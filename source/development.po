# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2020
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-19 07:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/development/index.rst:3
#: ../../source/development/rfc/rfc14_imagestructure.rst:61
msgid "Development"
msgstr ""

#: ../../source/development/rfc/index.rst:5
msgid "RFC list"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:5
msgid "RFC 10: OGR Open Parameters (not implemented)"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:7
#: ../../source/development/rfc/rfc5_unicode.rst:7
msgid "Author: Andrey Kiselev"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:9
#: ../../source/development/rfc/rfc5_unicode.rst:9
msgid "Contact: dron@ak4719.spb.edu"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:11
msgid "Status: Development, *not* implemented"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:14
#: ../../source/development/rfc/rfc11_fastidentify.rst:14
#: ../../source/development/rfc/rfc12_filemanagement.rst:14
#: ../../source/development/rfc/rfc14_imagestructure.rst:14
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:14
#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:14
#: ../../source/development/rfc/rfc17_python_namespaces.rst:14
#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:14
#: ../../source/development/rfc/rfc19_safememalloc.rst:14
#: ../../source/development/rfc/rfc1_pmc.rst:14
#: ../../source/development/rfc/rfc20_srs_axes.rst:14
#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:14
#: ../../source/development/rfc/rfc22_rpc.rst:14
#: ../../source/development/rfc/rfc23_ogr_unicode.rst:14
#: ../../source/development/rfc/rfc24_progressive_data_support.rst:14
#: ../../source/development/rfc/rfc25_fast_open.rst:15
#: ../../source/development/rfc/rfc27_supportdata.rst:14
#: ../../source/development/rfc/rfc28_sqlfunc.rst:14
#: ../../source/development/rfc/rfc29_desired_fields.rst:14
#: ../../source/development/rfc/rfc2_svn.rst:14
#: ../../source/development/rfc/rfc30_utf8_filenames.rst:14
#: ../../source/development/rfc/rfc31_ogr_64.rst:14
#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:14
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:14
#: ../../source/development/rfc/rfc34_license_policy.rst:14
#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:14
#: ../../source/development/rfc/rfc36_open_by_drivername.rst:14
#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:16
#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:14
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:8
#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:12
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:12
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:14
#: ../../source/development/rfc/rfc45_virtualmem.rst:14
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:14
#: ../../source/development/rfc/rfc47_dataset_caching.rst:14
#: ../../source/development/rfc/rfc49_curve_geometries.rst:14
#: ../../source/development/rfc/rfc4_geolocate.rst:14
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:14
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:14
#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:14
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:14
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:14
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:14
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:16
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:16
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:16
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:16
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:14
#: ../../source/development/rfc/rfc5_unicode.rst:14
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:16
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:16
#: ../../source/development/rfc/rfc62_raster_algebra.rst:16
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:16
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:16
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:16
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:16
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:16
#: ../../source/development/rfc/rfc68_cplusplus11.rst:19
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:23
#: ../../source/development/rfc/rfc6_sqlgeom.rst:14
#: ../../source/development/rfc/rfc70_output_format_guess.rst:16
#: ../../source/development/rfc/rfc71_github_migration.rst:15
#: ../../source/development/rfc/rfc72_pytest.rst:15
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:16
#: ../../source/development/rfc/rfc74_sphinx.rst:16
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:16
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:16
msgid "Summary"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:16
msgid ""
"It is proposed that OGRSFDriver::Open() and OGRSFDriverRegistrar::Open() "
"calls should be changed to accept additional parameter containing "
"arbitrary additional parameters supplied by caller. OGROpenEx() function "
"will be introduced to map this new functionality into C interface. In "
"addition it is proposed to add an \"update\" flag to "
"OGRSFDriverRegistrar::Open() call to avoid using "
"OGRSFDriverRegistrar::OpenShared() method."
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:25
msgid "Open parameters"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:27
msgid ""
"Sometimes it is needed to pass additional information to OGR driver along"
" with the name of the dataset to be opened. It can be, for example, the "
"style table name (some drivers allow to choose from the various style "
"tables) or any other additional data. The old method for doing this was "
"to encode the extra info in the dataset name string. It was inconvenient "
"approach, so it proposed to use separate parameter in OGRSFDriver::Open()"
" and OGRSFDriverRegistrar::Open() calls representing open options, just "
"like it is implemented in OGRDataSource::CreateLayer() call."
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:37
msgid ""
"It is supposed that open options will be supplied in form of NAME=VALUE "
"pairs forming the string list."
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:40
msgid ""
"In addition to options parameter the special \"shared\" flag will be "
"added to OGRSFDriverRegistrar::Open() call, so there will be no need in "
"separate OGRSFDriverRegistrar::OpenShared() method."
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:45
#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:139
#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:106
#: ../../source/development/rfc/rfc20_srs_axes.rst:217
#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:101
#: ../../source/development/rfc/rfc22_rpc.rst:266
#: ../../source/development/rfc/rfc23_ogr_unicode.rst:165
#: ../../source/development/rfc/rfc25_fast_open.rst:24
#: ../../source/development/rfc/rfc26_blockcache.rst:114
#: ../../source/development/rfc/rfc26_blockcache.rst:210
#: ../../source/development/rfc/rfc30_utf8_filenames.rst:206
#: ../../source/development/rfc/rfc31_ogr_64.rst:378
#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:114
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:129
#: ../../source/development/rfc/rfc34_license_policy.rst:232
#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:278
#: ../../source/development/rfc/rfc36_open_by_drivername.rst:45
#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:101
#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:38
#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:39
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:639
#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:19
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:29
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:29
#: ../../source/development/rfc/rfc45_virtualmem.rst:1258
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:679
#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:89
#: ../../source/development/rfc/rfc49_curve_geometries.rst:613
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:169
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:253
#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:56
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:500
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:590
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:85
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:167
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:133
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:105
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:782
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:202
#: ../../source/development/rfc/rfc5_unicode.rst:79
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:285
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:394
#: ../../source/development/rfc/rfc62_raster_algebra.rst:134
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:279
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:480
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:90
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:276
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:192
#: ../../source/development/rfc/rfc68_cplusplus11.rst:243
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:191
#: ../../source/development/rfc/rfc6_sqlgeom.rst:53
#: ../../source/development/rfc/rfc70_output_format_guess.rst:118
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:530
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:225
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:454
#: ../../source/development/rfc/rfc7_vsilapi.rst:96
msgid "Implementation"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:47
msgid "All Open() functions will be changed in the following way:"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:71
msgid ""
"The last change needs to be propagated in all OGR drivers. The change "
"itself is pretty simple: one additional parameter should be added to "
"function definition. But it has impact on third-party OGR drivers: they "
"are not source compatible anymore and should be changed too."
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:76
msgid "Also appropriate C functions will be added:"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:90
msgid "New Options for OGR Utilities"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:92
msgid ""
"Proposed functionality will be available in OGR utilities ogr2ogr and "
"ogrinfo via the '-doo NAME=VALUE' (\"Datasource Open Option\") format "
"specific parameter."
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:97
#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:126
#: ../../source/development/rfc/rfc26_blockcache.rst:178
#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:65
#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:50
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:224
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:332
#: ../../source/development/rfc/rfc5_unicode.rst:174
#: ../../source/development/rfc/rfc6_sqlgeom.rst:415
msgid "Backward Compatibility"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:99
msgid ""
"Proposed additions will not have any impact on C binary compatibility. "
"C++ binary interface will be broken, source level compatibility will be "
"broken for third-party OGR drivers only. There will be no impact for "
"high-level applications on source level."
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:105
msgid "Responsibility and Timeline"
msgstr ""

#: ../../source/development/rfc/rfc10_ogropen.rst:107
msgid ""
"Andrey Kiselev is responsible to implement this proposal. New API will be"
" available in GDAL 1.5.0."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:5
msgid "RFC 11: Fast Format Identification"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:7
#: ../../source/development/rfc/rfc12_filemanagement.rst:7
#: ../../source/development/rfc/rfc14_imagestructure.rst:7
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:7
#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:7
#: ../../source/development/rfc/rfc1_pmc.rst:7
#: ../../source/development/rfc/rfc20_srs_axes.rst:7
#: ../../source/development/rfc/rfc22_rpc.rst:7
#: ../../source/development/rfc/rfc27_supportdata.rst:7
#: ../../source/development/rfc/rfc28_sqlfunc.rst:7
#: ../../source/development/rfc/rfc2_svn.rst:7
#: ../../source/development/rfc/rfc3_commiters.rst:7
#: ../../source/development/rfc/rfc4_geolocate.rst:7
#: ../../source/development/rfc/rfc8_devguide.rst:7
#: ../../source/development/rfc/rfc9_maintainer.rst:7
msgid "Author: Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:9
#: ../../source/development/rfc/rfc12_filemanagement.rst:9
#: ../../source/development/rfc/rfc14_imagestructure.rst:9
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:9
#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:9
#: ../../source/development/rfc/rfc1_pmc.rst:9
#: ../../source/development/rfc/rfc20_srs_axes.rst:9
#: ../../source/development/rfc/rfc22_rpc.rst:9
#: ../../source/development/rfc/rfc23_ogr_unicode.rst:9
#: ../../source/development/rfc/rfc25_fast_open.rst:9
#: ../../source/development/rfc/rfc27_supportdata.rst:9
#: ../../source/development/rfc/rfc28_sqlfunc.rst:9
#: ../../source/development/rfc/rfc2_svn.rst:9
#: ../../source/development/rfc/rfc30_utf8_filenames.rst:9
#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:9
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:9
#: ../../source/development/rfc/rfc34_license_policy.rst:9
#: ../../source/development/rfc/rfc3_commiters.rst:9
#: ../../source/development/rfc/rfc4_geolocate.rst:9
#: ../../source/development/rfc/rfc8_devguide.rst:9
#: ../../source/development/rfc/rfc9_maintainer.rst:9
msgid "Contact: warmerdam@pobox.com"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:11
msgid "Status: Adopted (and Implemented)"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:16
msgid ""
"This RFC aims to add the ability for applications to quickly identify "
"what files in the file system are GDAL supported file formats without "
"necessarily opening any of them. It is mainly intended to allow GUI file "
"browsers based on file types."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:21
msgid ""
"This is accomplished by extending the GDALOpenInfo structure to hold more"
" directory context, and by adding an Identify() method on the GDALDriver "
"which a driver can implement to quickly identify that a file is of a "
"given format without doing a more expensive Open() operation."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:27
msgid "GDALOpenInfo"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:29
msgid ""
"The Open() (or Identify()) methods of many drivers need to probe for "
"files associated with the target file in order to open or identify a file"
" as being of a particular format. For instance, in order to open an ESRI "
"BIL file (EHDR driver) it is necessary to probe for a driver with the "
"same basename as the target file, but the extension .hdr. Currently this "
"is typically accomplished with VSIFStatL() calls or similar which can be "
"fairly expensive."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:37
msgid ""
"In order to reduce the need for such searches touch the operating system "
"file system machinery, the GDALOpenInfo structure will be extended to "
"hold an optional list of files. This is the list of all files at the same"
" level in the file system as the target file, including the target file. "
"The filenames will *not* include any path components, are an essentially "
"just the output of CPLReadDir() on the parent directory. If the target "
"object does not have filesystem semantics then the file list should be "
"NULL."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:46
msgid "The following is added to GDALOpenInfo:"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:53
msgid ""
"The new constructor allows the file list to be passed in to populate the "
"papszSiblingFiles member (the argument will be copied). The existing "
"default constructor will use CPLGetDirname() to get the directory of the "
"passed pszFile, and CPLReadDir() to read the corresponding file list. The"
" new constructor is primarily aimed at efficient implementation of the "
"later GDALIdentifyDriver() function, avoiding re-reading the file list "
"for each file to be tested."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:62
msgid "Identify()"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:64
msgid "The GDALDriver class will be extended with the following function:"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:70
msgid ""
"When implemented by a driver, the function is intended to return TRUE "
"(non-zero) if the driver determines that the file passed in via "
"GDALOpenInfo appears to be of the format the driver is implemented for. "
"To call this applications should call the new function:"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:79
msgid "Internally GDALIdentifyDriver() will do the following"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:81
msgid ""
"A GDALOpenInfo structure will be initialized based on pszDatasource and "
"papszDirFiles."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:83
msgid ""
"It will iterate over all drivers similarly to GDALOpen(). For each driver"
" it will use the pfnIdentify function if available, otherwise it will use"
" the pfnOpen() method to establish if the driver supports the file."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:87
msgid ""
"It will return the driver handle for the first driver to respond "
"positively or NULL if none accept it."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:91
msgid "Driver Changes"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:93
msgid ""
"In theory it is not necessary for any drivers to be modified, since "
"GDALIdentifyDriver() will fallback to using the pfnOpen function to test."
" But in practice, no optimization is achieved unless at least some "
"drivers (hopefully those for which Open can be very expensive) are "
"updated. Part of the ongoing effort then is to implement identify "
"functions for GDAL drivers."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:100
msgid ""
"Generally speaking it should be easy to craft an identify function from "
"the initial test logic in the open function. For instance, the GeoTIFF "
"driver might be changed like this:"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:139
msgid ""
"The open might then be modified to use the identify function to avoid "
"duplicating the test logic."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:162
msgid ""
"Drivers which require header files such as the EHdr driver might "
"implement Identify() like this:"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:192
msgid ""
"During the initial implementation a variety of drivers will be updated, "
"including the following. As well some performance and file system "
"activity logging will be done to identify drivers that are currently "
"expensive."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:197
msgid "HFA"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:198
msgid "GTiff"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:199
msgid "JPEG"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:200
msgid "PNG"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:201
msgid "GIF"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:202
msgid "HDF4"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:203
msgid "DTED"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:204
msgid "USGS DEM"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:205
msgid "MrSID"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:206
#: ../../source/development/rfc/rfc34_license_policy.rst:181
msgid "JP2KAK"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:207
#: ../../source/development/rfc/rfc34_license_policy.rst:175
msgid "ECW"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:208
msgid "EHdr"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:209
msgid "RST"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:212
msgid "CPLReadDir()"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:214
msgid ""
"Currently the VSIMemFilesystemHandler implemented in cpl_vsi_mem.cpp "
"which provides \"filesystem like\" access to objects in memory does not "
"implement directory reading services. In order to properly populate the "
"directory listing this will need to be added."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:219
msgid ""
"To do this the CPLReadDir() function will also need to be reimplemented "
"to use VSIFilesystemHandler::ReadDir() instead of direct implementation "
"in cpl_dir.cpp. The win32 and unix/posix implementations of "
"VSIFilesystemHandler::ReadDir() already exist. This should essentially "
"complete the virtualization of filesystem access services."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:225
msgid ""
"CPLReadDir() will also be renamed VSIReadDir() but with a stub under the "
"old name available for backward compatibility."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:229
#: ../../source/development/rfc/rfc29_desired_fields.rst:115
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:628
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:146
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:220
#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:70
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:138
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:108
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:462
msgid "Compatibility"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:231
msgid ""
"There are no anticipated backward compatibility problems. However forward"
" compatibility will be affected, in that drivers updated in trunk with "
"the Identify function will not be able to be ported back into 1.4 builds "
"and used their. Unmodified drivers, and externally maintained drivers "
"should not be impacted by this development."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:238
#: ../../source/development/rfc/rfc12_filemanagement.rst:192
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:176
msgid "SWIG Implications"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:240
msgid ""
"The GDALIdentifyDriver() and VSIReadDir() functions will need to be "
"exposed via SWIG."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:244
#: ../../source/development/rfc/rfc6_sqlgeom.rst:429
msgid "Regression Testing"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:246
msgid ""
"A test script for the Identify() function will be added to the "
"autotest/gcore directory. It will include testing of identify in a "
"/vsimem memory collection."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:251
#: ../../source/development/rfc/rfc12_filemanagement.rst:186
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:170
#: ../../source/development/rfc/rfc28_sqlfunc.rst:169
msgid "Implementation Plan"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:253
msgid ""
"The new features will be implemented by Frank Warmerdam in *trunk* for "
"the GDAL/OGR 1.5.0 release."
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:257
msgid "Performance Tests"
msgstr ""

#: ../../source/development/rfc/rfc11_fastidentify.rst:259
msgid ""
"A very quick test introducing the Identify without actually opening "
"changed the time to identify all files in a directory with 70 TIFF files "
"(on an NFS share) from 2 seconds to 0.5 seconds. So saving the overhead "
"of actually opening files can be significant for some formats, including "
"very common ones like GeoTIFF."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:5
msgid "RFC 12: Improved File Management"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:11
msgid "Status: Adopted / Implemented"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:16
msgid ""
"Some applications using GDAL have a requirement to provide file "
"management operations through the GUI. This includes deleting, renaming, "
"moving and packaging up datasets which often requires operations on "
"several associated files. This RFC introduces an operation on a "
"GDALDataset to identify all the dataset files, and operations to move or "
"copy them."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:24
msgid "GetFileList()"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:26
msgid ""
"The following new virtual method is added on the GDALDataset class, with "
"an analygous C function."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:33
msgid ""
"The method is intended to return a list of files associated with this "
"open dataset. The return is a NULL terminated string list which becomes "
"owned by the caller and should be deallocated with CSLDestroy()."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:37
msgid ""
"The default implementation tests the name of the datasource to see if it "
"is a file, and if so it is returned otherwise an empty list is returned. "
"If the default overview manager is active, and has overviews, those will "
"also be included in the file list. The default implementation also checks"
" for world files, but only those with extensions based on the original "
"files extension (ie. .tfw or .tifw for .tif) but does not search for .wld"
" since that is not very specific."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:45
msgid ""
"The GDALPamDataset::GetFileList() method will add the ability to find "
".aux and .aux.xml files associated with a dataset to the core default "
"behavior."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:50
msgid "pfnRename()"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:52
#: ../../source/development/rfc/rfc12_filemanagement.rst:105
msgid "The following new function is added to the GDALDriver class."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:58
#: ../../source/development/rfc/rfc12_filemanagement.rst:111
msgid "Also a corresponding function is added to the C API."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:64
msgid ""
"Note that renaming is done by the driver, but the dataset to be operated "
"on should *not* be open at the time. GDALRenameDataset() will invoke "
"pfnRename if it is non-NULL."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:68
msgid ""
"If pfnRename is NULL the default implementation will be used which will "
"open the dataset, fetch the file list, close the dataset, and then try to"
" rename all the files (based on shared basenames). The default rename "
"operation will fail if it is unable to establish a relationship between "
"the files (ie. a common basename or stem) to indicate how the group of "
"files should be rename to the new pattern."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:75
#: ../../source/development/rfc/rfc12_filemanagement.rst:129
msgid ""
"Optionally a NULL hDriver argument may be passed in, in which case the "
"appropriate driver will be selected by first opening the datasource."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:79
msgid "CPLMoveFile()"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:81
msgid ""
"The POSIX rename() function on which VSIRename() is usually based does "
"not normally allow renaming files between file systems or between "
"different kinds of file systems (ie. /vsimem to C:/abc). In order to "
"implement GDALRenameDataset() such that it works efficiently within a "
"file system, but still works between file systems, a new operation will "
"be added to gdal/port. This is the CPLMoveFile() function which will "
"first try a VSIRename(). If that fails it will use CPLCopyFile() to copy "
"the whole file and then VSIUnlink() to get rid of the old file."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:94
msgid "The return value will be zero on success, otherwise an errno style value."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:97
msgid ""
"It should be noted that in some error conditions, such as the destination"
" file system running out of space during a copy, it may happen that some "
"files for a dataset get renamed, and some do not leaving things in an "
"inconsistent state."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:103
msgid "pfnCopyFiles()"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:117
msgid ""
"Note that copying is done by the driver. The dataset may be opened, but "
"if opened in update mode it may be prudent to first do a flush to "
"synchronize the in-process state with what is on disk. "
"GDALCopyDatasetFiles() will invoke pfnCopyFiles if it is non-NULL."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:122
msgid ""
"If pfnCopy is NULL the default implementation will be used which will "
"open the dataset, fetch the file list, close the dataset, and then try to"
" copy all the files (based on shared basenames). The default copy "
"operation will fail if it is unable to establish a relationship between "
"the files (ie. a common basename or stem) to indicate how the group of "
"files should be renamed to the new pattern."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:132
msgid ""
"Copy is essentially the same as Rename, but the original files are "
"unaltered. Note that this form of copy is distinct from CreateCopy() in "
"that it preserves the exact binary files on disk in the new location "
"while CreateCopy() just attempts to reproduce a new dataset with "
"essentially the same data as modelled and carried through GDAL."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:139
msgid "pfnDelete()"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:142
msgid ""
"The delete operations default implementation will be extended to use the "
"GetFileList() results."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:146
msgid "Supporting Functions"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:148
msgid ""
"Some sort of supporting functions should be provided to make it easy to "
"identify worldfiles, .aux files and .prj files associated with a file."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:152
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:144
msgid "Drivers Updated"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:154
msgid ""
"It is anticipated that a majority of the commonly used drivers will be "
"updated with custom GetFileList() methods that account for world files "
"and other idiosyncratic files. A particular emphasis will made to handle "
"the various formats in gdal/frmts/raw that consist of a header file and a"
" raw binary file."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:160
msgid ""
"Drivers for \"one file formats\" that are not updated will still use the "
"default logic which should work fairly well, but might neglect auxiliary "
"world files."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:164
msgid ""
"VRT: I do not anticipate updating the VRT driver at this time since it "
"gets quite complicated to collect a file list for some kinds of virtual "
"files. It is also not exactly clear whether related files should be "
"considered \"owned\" by the virtual dataset or not."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:168
msgid ""
"AIGRID: I will implement a custom rename operation in an attempt to "
"handle this directory oriented format gracefully."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:172
msgid "Additional Notes"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:174
msgid ""
"Subdatasets will generally return an empty file list from GetFileList(), "
"and will not be manageable via Rename or Delete though a very "
"sophisticated driver could implement these operations."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:177
msgid ""
"There is no mechanism anticipated to ensure that files are closed before "
"they are removed. If an application does not ensure this rename/move "
"operations may fail on win32 since it doesn't allow rename/delete "
"operations on open files. Things could easily be left in an inconsistent "
"state."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:182
msgid ""
"Datasets without associated files in the file system will return an empty"
" file list. This essentially identifies them as \"unmanagable\"."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:188
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:172
msgid ""
"This change will be implemented by Frank Warmerdam in trunk in time for "
"the 1.5.0 release."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:194
msgid ""
"The GDALRenameDataset(), and GDALCopyDatasetFiles() operations on the "
"driver, and the GetFileList() operation on the dataset will need to be "
"exposed through SWIG."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:199
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:184
#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:128
#: ../../source/development/rfc/rfc22_rpc.rst:272
#: ../../source/development/rfc/rfc24_progressive_data_support.rst:228
#: ../../source/development/rfc/rfc25_fast_open.rst:100
#: ../../source/development/rfc/rfc26_blockcache.rst:198
#: ../../source/development/rfc/rfc28_sqlfunc.rst:175
#: ../../source/development/rfc/rfc36_open_by_drivername.rst:64
#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:92
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:231
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:340
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:664
#: ../../source/development/rfc/rfc49_curve_geometries.rst:605
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:160
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:242
#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:100
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:159
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:127
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:472
#: ../../source/development/rfc/rfc68_cplusplus11.rst:230
#: ../../source/development/rfc/rfc70_output_format_guess.rst:112
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:513
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:219
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:439
msgid "Testing"
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:201
msgid ""
"Rename and CopyFiles testing will be added to the regression tests for a "
"few representative formats. These rename operations will be between one "
"directory and another, and will not test cross file system copying which "
"will have to be tested manually."
msgstr ""

#: ../../source/development/rfc/rfc12_filemanagement.rst:206
msgid ""
"A small gdalmanage utility will be implemented allowing use and testing "
"of the identify, rename, copy and delete operations from the commandline "
"in a convenient fashion."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:5
msgid "RFC 13: Improved Feature Insertion/Update/Delete Performance in Batch Mode"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:15
msgid "*Withdrawn*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:17
msgid ""
"I have withdrawn this RFC based on some comments from `Frank "
"<http://lists.maptools.org/pipermail/gdal-dev/2007-May/013132.html>`__ "
"and `Tamas <http://lists.maptools.org/pipermail/gdal-"
"dev/2007-May/013130.html>`__ on GDAL-dev."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:23
msgid "*Summary*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:25
msgid ""
"Some OGR drivers can dramatically increase the speed of and optimize the "
"insertion, update, and deletion of a set of features, if the driver "
"knows, that there is a whole set of features that should/could be "
"inserted, updated, or deleted at once (instead of just one by one)."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:30
msgid "*CreateFeatures()*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:32
#: ../../source/development/rfc/rfc13_createfeatures.rst:61
#: ../../source/development/rfc/rfc13_createfeatures.rst:90
msgid ""
"The following new virtual method is added to the OGRLayer class, with an "
"analogous C function:"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:39
#: ../../source/development/rfc/rfc13_createfeatures.rst:68
#: ../../source/development/rfc/rfc13_createfeatures.rst:97
msgid "A default implementation is given as below:"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:54
msgid "This triggers the old behavior of an unoptimized insertion."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:56
msgid ""
"Individual drivers can override the default implementation and can "
"implement an optimized algorithm for inserting a set of features."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:59
msgid "*SetFeatures()*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:83
msgid "This triggers the old behavior of an unoptimized update."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:85
msgid ""
"Individual drivers can override the default implementation and can "
"implement an optimized algorithm for updating a set of features."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:88
msgid "*DeleteFeatures()*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:112
msgid "This triggers the old behavior of an unoptimized deletion."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:114
msgid ""
"Individual drivers can override the default implementation and can "
"implement an optimized algorithm for deleting a set of features."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:117
msgid "*C API functions*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:119
msgid "The following C functions are added:"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:127
msgid ""
"However, there are some issues with adding plain C arrays to the public "
"OGR interface due to the SWIG based wrapping, see for example `GDAL-Dev "
"Mail from Tamas <http://lists.maptools.org/pipermail/gdal-"
"dev/2007-May/013092.html>`__..."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:132
msgid "*Additional Notes*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:134
msgid ""
"Based in this new interface functions, I was able to increase the "
"insertion speed of features in the MySQL driver from 40 per second to up "
"to 800-2000 per second. I think other drivers can benefit from this "
"change, too."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:139
msgid "See also ticket #1633."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:141
msgid "*Implementation Plan*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:143
msgid "A patch for the describe additions can be trivially provided."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:145
msgid ""
"I can provide another patch based on this interface which contains the "
"optimized implementation for the MySQL driver."
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:148
msgid "*History*"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:150
msgid "14-May-2007: initial version created"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:152
msgid "15-May-2007: SetFeatures() added"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:154
msgid "16-May-2007: DeleteFeatures() added"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:156
msgid "17-May-2007: C API functions added; SWIG wrapping issues mentioned"
msgstr ""

#: ../../source/development/rfc/rfc13_createfeatures.rst:158
msgid "23-May-2007: Withdrawn due some concerns on GDAL-dev"
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:5
msgid "RFC 14: Image Structure Metadata"
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:11
#: ../../source/development/rfc/rfc15_nodatabitmask.rst:11
#: ../../source/development/rfc/rfc17_python_namespaces.rst:11
#: ../../source/development/rfc/rfc1_pmc.rst:11
#: ../../source/development/rfc/rfc20_srs_axes.rst:11
#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:11
#: ../../source/development/rfc/rfc24_progressive_data_support.rst:11
#: ../../source/development/rfc/rfc29_desired_fields.rst:11
#: ../../source/development/rfc/rfc2_svn.rst:11
#: ../../source/development/rfc/rfc30_utf8_filenames.rst:11
#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:11
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:11
#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:11
#: ../../source/development/rfc/rfc3_commiters.rst:11
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:11
#: ../../source/development/rfc/rfc6_sqlgeom.rst:11
#: ../../source/development/rfc/rfc7_vsilapi.rst:11
msgid "Status: Adopted"
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:16
msgid ""
"This RFC attempts to formalize the semantics of the \"IMAGE_STRUCTURE\" "
"domain of metadata. This metadata domain is used to hold structural "
"information about image organization that would not normally be carried "
"with an image when translated into another format. The IMAGE_STRUCTURE "
"metadata may occur on the GDALDataset or on individual bands, and most "
"items are meaningful in both contexts. When items like NBITS are found on"
" the dataset it is assumed they apply to all bands of that dataset."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:25
msgid "IMAGE_STRUCTURE items"
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:27
msgid ""
"COMPRESSION:: The compression type used for this dataset or band. There "
"is no fixed catalog of compression type names, but where a given format "
"includes a COMPRESSION creation option, the same list of values should be"
" used here as there."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:32
msgid ""
"NBITS:: The actual number of bits used for this band, or the bands of "
"this dataset. Normally only present when the number of bits is non-"
"standard for the datatype, such as when a 1 bit TIFF is represented "
"through GDAL as GDT_Byte."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:37
msgid ""
"INTERLEAVE:: This only applies on datasets, and the value should be one "
"of PIXEL, LINE or BAND. It can be used as a data access hint."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:40
msgid ""
"PIXELTYPE:: This may appear on a GDT_Byte band (or the corresponding "
"dataset) and have the value SIGNEDBYTE to indicate the unsigned byte "
"values between 128 and 255 should be interpreted as being values between "
"-128 and -1 for applications that recognise the SIGNEDBYTE type."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:46
#: ../../source/development/rfc/rfc20_srs_axes.rst:224
#: ../../source/development/rfc/rfc31_ogr_64.rst:306
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:70
#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:237
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:447
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:549
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:79
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:94
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:772
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:169
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:274
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:351
#: ../../source/development/rfc/rfc62_raster_algebra.rst:128
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:274
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:79
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:262
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:164
msgid "Compatibility Issues"
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:48
msgid ""
"This RFC has two changes from existing practise that may cause "
"compatibility issues:"
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:51
msgid ""
"Traditionally the NBITS metadata appeared in the default metadata domain "
"on datasets, instead of in the IMAGE_STRUCTURE domain."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:53
msgid ""
"Traditionally the COMPRESSION metadata appeared only on the dataset, "
"never one the band."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:56
msgid ""
"I am only aware of one application previously making systematic use of "
"these items, and it will be updated to reflect the new usage as GDAL "
"1.5.0 is adopted."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:63
msgid ""
"Beyond adopting the definition for the semantics of the IMAGE_STRUCTURE "
"metadata, the following development steps will be taken:"
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:66
msgid ""
"The PNG, GTiff, NITF and EHdr drivers will be updated to place NBITS in "
"the IMAGE_STRUCTURE metadata domain."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:68
msgid "The HFA driver will be updated to return NBITS metadata."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:69
msgid ""
"The HFA, GTiff, JP2KAK, ECW, JPEG, and PNG drivers will be updated to "
"return INTERLEAVE metadata."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:71
msgid "The HFA and GTiff drivers will be updated to return PIXELTYPE metadata."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:74
msgid ""
"The development will be done by Frank Warmerdam in trunk in time for "
"GDAL/OGR 1.5.0 release. Changes to other drivers that these definitions "
"might be useful for while be done as time permits by interested "
"developers - not necessarily in time for GDAL/OGR 1.5.0."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:80
msgid "Notes"
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:82
msgid ""
"The gdalinfo utility already reports IMAGE_STRUCTURE metadata when it is "
"available."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:84
msgid ""
"The GTiff, and HFA drivers CreateCopy() methods check the source for "
"NBITS, and PIXELTYPE metadata to create specialized output files types."
msgstr ""

#: ../../source/development/rfc/rfc14_imagestructure.rst:87
msgid ""
"The GTiff, HFA and default CreateCopy() implementations have been "
"reworked to use the new GDALDatasetCopyWholeRaster() function which uses "
"the INTERLEAVE metadata as a clue whether to do interleaved copies if the"
" source dataset is interleaved."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:5
msgid "RFC 15: Band Masks"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:16
msgid ""
"Some file formats support a concept of a bitmask to identify pixels that "
"are not valid data. This can be particularly valuable with byte image "
"formats where a nodata pixel value can not be used because all pixel "
"values have a valid meaning. This RFC tries to formalize a way of "
"recognising and accessing such null masks through the GDAL API, while "
"moving to a uniform means of representing other kinds of masking (nodata "
"values, and alpha bands)."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:24
msgid ""
"The basic approach is to treat such masks as raster bands, but not "
"regular raster bands on the datasource. Instead they are freestanding "
"raster bands in a manner similar to the overview raster band objects. The"
" masks are represented as GDT_Byte bands with a value of zero indicating "
"nodata and non-zero values indicating valid data. Normally the value 255 "
"will be used for valid data pixels."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:32
msgid "API"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:34
msgid "GDALRasterBand is extended with the following methods:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:42
msgid "GDALDataset is extended with the following method:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:48
msgid ""
"Note that the GetMaskBand() should always return a GDALRasterBand mask, "
"even if it is only an all 255 mask with the flags indicating "
"GMF_ALL_VALID."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:52
msgid ""
"The GetMaskFlags() method returns an bitwise OR-ed set of status flags "
"with the following available definitions that may be extended in the "
"future:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:56
msgid ""
"GMF_ALL_VALID(0x01): There are no invalid pixels, all mask values will be"
" 255. When used this will normally be the only flag set."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:58
msgid ""
"GMF_PER_DATASET(0x02): The mask band is shared between all bands on the "
"dataset."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:60
msgid ""
"GMF_ALPHA(0x04): The mask band is actually an alpha band and may have "
"values other than 0 and 255."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:62
msgid ""
"GMF_NODATA(0x08): Indicates the mask is actually being generated from "
"nodata values. (mutually exclusive of GMF_ALPHA)"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:65
msgid ""
"The CreateMaskBand() method will attempt to create a mask band associated"
" with the band on which it is invoked, issuing an error if it is not "
"supported. Currently the only flag that is meaningful to pass in when "
"creating a mask band is GMF_PER_DATASET. The rest are used to represent "
"special system provided mask bands. GMF_PER_DATASET is assumed when "
"CreateMaskBand() is called on a dataset."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:73
msgid "Default GetMaskBand() / GetMaskFlags() Implementation"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:75
msgid ""
"The GDALRasterBand class will include a default implementation of "
"GetMaskBand() that returns one of three default implementations."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:78
msgid "If a corresponding .msk file exists it will be used for the mask band."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:80
msgid ""
"If the band has a nodata value set, an instance of the new "
"GDALNodataMaskRasterBand class will be returned. GetMaskFlags() will "
"return GMF_NODATA."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:83
msgid ""
"If there is no nodata value, but the dataset has an alpha band that seems"
" to apply to this band (specific rules yet to be determined) and that is "
"of type GDT_Byte then that alpha band will be returned, and the flags "
"GMF_PER_DATASET and GMF_ALPHA will be returned in the flags."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:88
msgid ""
"If neither of the above apply, an instance of the new "
"GDALAllValidRasterBand class will be returned that has 255 values for all"
" pixels. The null flags will return GMF_ALL_VALID."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:92
msgid ""
"The GDALRasterBand will include a protected poMask instance variable and "
"a bOwnMask flag. The first call to the default GetMaskBand() will result "
"in creation of the GDALNodataMaskRasterBand, GDALAllValidMaskRasterBand "
"and their assignment to poMask with bOwnMask set TRUE. If an alpha band "
"is identified for use, it will be assigned to poMask and bOwnMask set to "
"FALSE. The GDALRasterBand class will take care of deleting the poMask if "
"set and bOwnMask is true in the destructor. Derived band classes may "
"safely use the poMask and bOwnMask flag similarly as long as the "
"semantics are maintained."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:102
msgid ""
"For an external .msk file to be recognized by GDAL, it must be a valid "
"GDAL dataset, with the same name as the main dataset and suffixed with "
".msk, with either one band (in the GMF_PER_DATASET case), or as many "
"bands as the main dataset. It must have INTERNAL_MASK_FLAGS_xx metadata "
"items set at the dataset level, where xx matches the band number of a "
"band of the main dataset. The value of those items is a combination of "
"the flags GMF_ALL_VALID, GMF_PER_DATASET, GMF_ALPHA and GMF_NODATA. If a "
"metadata item is missing for a band, then the other rules explained above"
" will be used to generate a on-the-fly mask band."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:113
msgid "Default CreateMaskBand()"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:115
msgid ""
"The default implementation of the CreateMaskBand() method will be "
"implemented based on similar rules to the .ovr handling implemented using"
" the GDALDefaultOverviews object. A TIFF file with the extension .msk "
"will be created with the same basename as the original file, and it will "
"have as many bands as the original image (or just one for "
"GMF_PER_DATASET). The mask images will be deflate compressed tiled images"
" with the same block size as the original image if possible."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:123
msgid ""
"The default implementation of GetFileList() will also be modified to know"
" about the .msk files."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:127
msgid "CreateCopy()"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:129
msgid ""
"The GDALDriver::DefaultCreateCopy(), and GDALPamDataset::CloneInfo() "
"methods will be updated to copy mask information if it seems necessary "
"and is possible. Note that NODATA, ALL_VALID and ALPHA type masks are not"
" copied since they are just derived information."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:135
msgid "Alpha Bands"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:137
msgid ""
"When a dataset has a normal GDT_Byte alpha (transparency) band that "
"applies, it should be returned as the null mask, but the GetMaskFlags() "
"method should include GMF_ALPHA. For processing purposes any value other "
"than 0 should be treated as valid data, though some algorithms will treat"
" values between 1 and 254 as partially transparent."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:146
msgid "These drivers will be updated:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:148
msgid ""
"JPEG Driver: support the \"zlib compressed mask appended to the file\" "
"approach used by a few data providers."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:150
msgid "GRASS Driver: updated to support handling null values as masks."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:152
msgid "Possibly updated:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:154
msgid ""
"HDF4 Driver: This driver might possibly be updated to return real mask if"
" we can figure out a way."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:156
msgid ""
"SDE Driver: This driver might be updated if Howard has sufficient time "
"and enthusiasm."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:160
#: ../../source/development/rfc/rfc31_ogr_64.rst:176
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:507
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:353
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:529
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:61
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:79
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:732
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:151
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:251
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:322
#: ../../source/development/rfc/rfc62_raster_algebra.rst:112
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:243
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:64
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:234
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:147
msgid "Utilities"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:162
msgid ""
"The gdalwarp utility and the gdal warper algorithm will be updated to use"
" null masks on input. The warper algorithm already uses essentially this "
"model internally. For now gdalwarp output (nodata or alpha band) will "
"remain unchanged, though at some point in the future support may be added"
" for explicitly generating null masks, but for most purposes producing an"
" alpha band is producing a null mask."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:178
msgid ""
"The GetMaskBand(), GetMaskFlags() and CreateMaskBand() methods (and "
"corresponding defines) will need to be added. The mask should work like a"
" normal raster band for swig purposes so minimal special work should be "
"required."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:186
msgid "The gdalautotest will be extended with the following:"
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:188
msgid ""
"gcore/mask.py: test default mask implementation for nodata, alpha and all"
" valid cases."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:190
msgid ""
"gdriver/jpeg.py: extend with a test for \"appended bitmask\" case - "
"creation and reading."
msgstr ""

#: ../../source/development/rfc/rfc15_nodatabitmask.rst:193
msgid "Interactive testing will be done for gdalwarp."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:5
msgid "RFC 16: OGR Thread Safety"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:11
#: ../../source/development/rfc/rfc27_supportdata.rst:11
#: ../../source/development/rfc/rfc34_license_policy.rst:11
#: ../../source/development/rfc/rfc47_dataset_caching.rst:11
#: ../../source/development/rfc/rfc4_geolocate.rst:11
#: ../../source/development/rfc/rfc5_unicode.rst:11
#: ../../source/development/rfc/rfc62_raster_algebra.rst:11
msgid "Status: Development"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:16
msgid ""
"In an effort to better support thread safety in OGR some methods are "
"added as internal infrastructure is updated."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:20
#: ../../source/development/rfc/rfc34_license_policy.rst:22
msgid "Definitions"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:22
msgid ""
"*Reentrant*: A reentrant function can be called simultaneously by "
"multiple threads provided that each invocation of the function references"
" unique data."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:26
msgid ""
"*Thread-safe*: A thread-safe function can be called simultaneously by "
"multiple threads when each invocation references shared data. All access "
"to the shared data is serialized."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:31
#: ../../source/development/rfc/rfc17_python_namespaces.rst:28
msgid "Objective"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:33
msgid ""
"To make all of the OGR core and selected drivers reentrant, and to make "
"the driver registrar, drivers and datasources at least potentially "
"thread-safe."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:38
msgid "TestCapability()"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:40
msgid ""
"The TestCapability() method on the driver, and datasource will be "
"extended to include ways of testing for reentrancy and thread safety on "
"particular instances. The following macros will be added:"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:51
msgid "Meaning:"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:53
msgid ""
"OLCReentrant: The layer class is reentrant. Multiple threads can operate "
"on distinct instances of this class - including different layers on a "
"single datasource."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:56
msgid ""
"ODsCReentrant: The datasource class is reentrant. Multiple threads can "
"operate on distinct instances of this class."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:58
msgid ""
"ODsCThreadSafe: The datasource class is thread-safe. Multiple threads can"
" operate on a single instance of this class."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:60
msgid ""
"ODsCLayerClones: The OGRDataSource::GetLayerClone() method is supported, "
"and returns a layer instance with distinct state from the default layer "
"returned by GetLayer()."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:64
msgid ""
"Note that a single layer instance cannot be threadsafe as long as layer "
"feature reading status is implicit in the layer object. The default "
"return value for all test values is FALSE, as is normal for the "
"TestCapability() method, but specific drivers can return TRUE after "
"determining that the driver datasources or layers are in fact reentrant "
"and/or threadsafe."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:72
msgid "OGRSFDriverRegistrar"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:74
msgid ""
"Various changes have already been made to make the driver registrar "
"thread safe, primarily by protecting operations on it with a mutex."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:78
msgid "OGRSFDriver"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:80
msgid ""
"No changes are required to the OGRSFDriver base class for thread safety, "
"primarily because it does almost nothing."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:84
msgid "OGRDataSource"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:86
msgid ""
"This class has been modified to include an m_hMutex class data member "
"which is a mutex used to ensure thread safe access to internal "
"datastructures such as the layer list. Classes derived from OGRDataSource"
" that wish to implement threadsafe operation should use this mutex when "
"exclusivity is required."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:92
msgid "A new method is added to this class:"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:98
msgid ""
"The default implementation of this method returns NULL. If the "
"ODsCLayerClones capability is true for the datasource, this method must "
"return duplicates of the requested layer that have distinct feature "
"reading state. That is they can have their own spatial and attribute "
"filter settings, and the internal feature iterator (for GetNextFeature() "
"and ResetReading()) is distinct from other OGRLayer instances referencing"
" the same underlying datasource layer."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:106
msgid ""
"The intention of this method in the multi-threaded context is that "
"different threads can have clones of a layer with distinct read state. A "
"sort of poor-mans threadsafety, even though in fact it is just "
"reentrancy."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:111
msgid ""
"Layers return by GetLayerClone() should be released with the "
"OGRDataSource::ReleaseResultSet() method, much like layers returned by "
"ExecuteSQL()."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:116
msgid "ExecuteSQL()"
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:118
msgid ""
"The default OGR implementation of OGRDataSource::ExecuteSQL() internally "
"uses and modifies the layer state (feature iterators and filters) and as "
"such is not appropriate to use on a datasource that is attempting to be "
"threadsafe even though it is understood that individual layers are not "
"threadsafe."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:124
msgid ""
"The proposed solution is that this code will be modified to use "
"GetLayerClone() if the datasource supports GetLayerClone()."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:130
msgid ""
"A multi-threaded C++ test harnass will be implemented for read-only "
"stress testing of datasources claiming to support reentrancy and "
"threadsafety."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:134
msgid ""
"No testing of reentrancy and threadsafety will be incorporated into the "
"regression test suite (gdalautotest) as it does not appear to be "
"practical."
msgstr ""

#: ../../source/development/rfc/rfc16_ogr_reentrancy.rst:141
msgid ""
"Frank Warmerdam will implement all the core features of this RFC for the "
"GDAL/OGR 1.5.0 release. As well the Shapefile, Personal Geodatabase, ODBC"
" and Oracle drivers will implement OLCReentrant, ODsCLayerClones, "
"ODsCReentrant and ODsThreadSafe."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:5
msgid "RFC 17: Python Namespaces"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:7
msgid "Author: Howard Butler"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:9
msgid "Contact: hobu.inc@gmail.com"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:17
msgid ""
"GDAL bindings for Python have historically dodged the normal Python "
"practices of using packages and namespaces to provide organization."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:25
msgid ""
"This RFC implements a new namespace for Python, called *osgeo*, where the"
" GDAL Python bindings henceforth will reside. Backward compatibility is "
"provided, so that current code will continue to run unchanged, but new "
"developments should utilize the namespace for code organization and "
"global namespace pollution reasons. As of 10/1/2007, the changes "
"described here in RFC 17 only pertain to the \"next-gen\" Python "
"bindings. It is expected that these bindings will be the default bindings"
" for GDAL 1.5."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:30
msgid ""
"To provide the GDAL Python bindings in a Python package that is properly "
"namespaced, eliminating pollution of Python's global namespace."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:34
msgid "Past Usage"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:36
msgid "GDAL's Python bindings previously used globally-aware Python modules:"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:47
msgid "New Usage"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:49
msgid "RFC 17 now provides these modules under the *osgeo* namespace:"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:59
msgid ""
"Additionally, the old module-style imports continue to work with a "
"deprecation warning:"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:68
msgid ""
"It is planned that we will remove the GDAL-specific global modules at "
"some point in the future."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:72
msgid "Other Sprint Updates"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:74
msgid ""
"The work for this RFC was done at the FOSS4G2007 GDAL code sprint by "
"Howard Butler and Chris Barker. In addition to the Python namespacing, "
"some minor issues were dealt with respect to building the GDAL bindings."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:78
msgid ""
"The next-gen Python bindings now use setuptools by default if it is "
"available."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:80
msgid ""
"The ./swig/python directory was slightly reorganized to separate "
"extension building from pure python modules."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:82
msgid ""
"gdal2tiles, a Google Summer of Code project by Petr Klokan, was "
"integrated into the next-gen bindings"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:86
#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:120
#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:153
#: ../../source/development/rfc/rfc26_blockcache.rst:230
#: ../../source/development/rfc/rfc29_desired_fields.rst:132
#: ../../source/development/rfc/rfc6_sqlgeom.rst:463
#: ../../source/development/rfc/rfc7_vsilapi.rst:114
msgid "Voting History"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:88
msgid "A voice vote (our first ever!) commenced at the FOSS4G2007 sprint."
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:90
#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:155
#: ../../source/development/rfc/rfc29_desired_fields.rst:134
#: ../../source/development/rfc/rfc6_sqlgeom.rst:465
msgid "Frank Warmerdam +1"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:91
#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:159
msgid "Howard Butler +1"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:92
#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:157
#: ../../source/development/rfc/rfc6_sqlgeom.rst:467
msgid "Daniel Morissette +1"
msgstr ""

#: ../../source/development/rfc/rfc17_python_namespaces.rst:93
msgid "Tamas Szekerest +1"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:5
msgid "RFC 18: OGR Style Support in C API"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:7
msgid "Author: Daniel Morissette"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:9
msgid "Contact: dmorissette@mapgears.com"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:11
msgid "Status: Adopted (2007-12-05)"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:16
msgid ""
"OGR has a number of C++ classes that deal with the encoding of style "
"information and attaching that to features. More information is available"
" in the :ref:`ogr_feature_style` document."
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:20
msgid ""
"With GDAL/OGR version 1.4.x and older, it was not possible to deal with "
"style information using the C API. This RFC proposes the addition of "
"functions to the C API to manipulate style information in GDAL/OGR 1.5."
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:25
msgid "Implementation Details"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:27
msgid "The following enums will be moved from ogr_featurestyle.h to ogr_core.h:"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:39
msgid ""
"The OGRStyleMgrH (corresponding to the OGRStyleMgr C++ class) will be "
"added to the C API:"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:53
msgid ""
"The OGRStyleToolH (corresponding to the OGRStyleTool C++ class) will be "
"added to the C API:"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:77
msgid ""
"Note: at implementation time, the OGR_ST_GetParamIsNull() has been "
"removed and replaced by an 'int \\*bValueIsNull' argument on all the "
"OGR_ST_GetParam...() functions in order to map more closely to the C++ "
"methods."
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:82
msgid ""
"NO wrappers will be needed for the following C++ classes which are "
"handled internally by the OGR\\_ST\\_\\* wrappers above:"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:92
msgid ""
"Note that ogr_featurestyle.h also contains a OGRSTVectorParam enum and a "
"corresponding OGRStyleVector class but this class is currently unused and"
" may eventually be removed, so we will not implement support for it in "
"the C API (and the OGRSTVectorParam enum will NOT be moved to "
"ogr_core.h)."
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:99
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:621
msgid "Python and other language bindings"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:101
msgid ""
"The initial implementation will be for the C API only and will not be "
"ported/tested with the Python and other scripting language bindings. This"
" will have to wait for a later release."
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:108
msgid ""
"Daniel Morissette will implement the changes to the C API described in "
"this RFC for the GDAL/OGR 1.5.0 release."
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:111
msgid ""
"The first test of the new C API functions will be the conversion of "
"MapServer's mapogr.cpp to use them."
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:115
msgid "Related Ticket(s)"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:117
msgid "#2061"
msgstr ""

#: ../../source/development/rfc/rfc18_ogr_styles_c_api.rst:122
#: ../../source/development/rfc/rfc19_safememalloc.rst:90
msgid "+1 from all PSC members (FrankW, DanielM, HowardB, TamasS, AndreyK)"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:5
msgid "RFC 19: Safer memory allocation in GDAL"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:7
#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:7
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:7
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:7
#: ../../source/development/rfc/rfc49_curve_geometries.rst:7
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:7
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:7
#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:7
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:7
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:7
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:7
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:7
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:7
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:7
msgid "Author: Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:9
msgid "Contact: even.rouault@spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:11
#: ../../source/development/rfc/rfc26_blockcache.rst:11
#: ../../source/development/rfc/rfc45_virtualmem.rst:11
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:11
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:11
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:11
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:11
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:11
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:11
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:11
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:11
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:11
msgid "Status: Adopted, implemented"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:16
msgid ""
"This document contains proposal on how to make GDAL safer (prevent "
"crashes) when doing memory allocations. The starting point of this "
"discussion is ticket #2075."
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:21
#: ../../source/development/rfc/rfc29_desired_fields.rst:31
#: ../../source/development/rfc/rfc2_svn.rst:22
#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:20
msgid "Details"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:23
msgid ""
"In many places in GDAL source code, multiplications are done to compute "
"the size of the memory buffer to allocate, like raster blocks, scanlines,"
" whole image buffers, etc.. Currently no overflow checking is done, thus "
"leading to potential allocation of not large enough buffers. Overflow can"
" occur when raster dimensions are very large (this can be the case with a"
" WMS raster source for example) or when a dataset is corrupted, "
"intentionnaly or unintentionnaly. This can lead to latter crash."
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:32
msgid ""
"This RFC introduces new API to allocate memory when the computation of "
"the size to allocate is based on multiplications. These new API report "
"overflows when they occur. Overflows are detected by checking that "
"((a*b)/b) == a. This does not require to make assumptions on the size of "
"the variable types, their signedness, etc."
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:58
msgid ""
"The behavior of VSIMalloc2 and VSIMalloc3 is consistent with the behavior"
" of VSIMalloc. Implementation of already existing memory allocation API "
"(CPLMalloc, CPLCalloc, CPLRealloc, VSIMalloc, VSICalloc, VSIRealloc) will"
" not be changed."
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:63
msgid ""
":ref:`rfc-8` will be updated to promote new API for safer memory "
"allocation. For example using VSIMalloc2(x, y) instead of doing "
"CPLMalloc(x \\* y) or VSIMalloc(x \\* y)."
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:69
msgid "Implementation steps"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:71
msgid "Introduce the new API in gdal/port"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:73
msgid ""
"Use the new API in GDAL core where it is relevant. The following files "
"have been identified as candidates : gcore/gdalnodatamaskband.cpp, "
"gcore/overview.cpp, gcore/gdaldriver.cpp, gcore/gdalrasterblock.cpp"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:78
msgid ""
"Use the new API in GDAL drivers. This step can be done incrementally. "
"Transition from CPL to VSI allocation can be necessary in some cases too."
" Candidate drivers : Idrisi, PNG, GXF, BSB, VRT, MEM, JP2KAK, RPFTOC, "
"AIRSAIR, AIGRIB, XPM, USGDEM, BMP, GSG, HFA, AAIGRID. (See "
"gdal_svn_trunk_use_vsi_safe_mul_in_frmts.patch in ticket #2075)"
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:84
msgid ""
"Even Rouault will implement the changes described in this RFC for the "
"GDAL 1.6.0 release."
msgstr ""

#: ../../source/development/rfc/rfc19_safememalloc.rst:88
#: ../../source/development/rfc/rfc31_ogr_64.rst:392
#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:287
#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:96
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:652
#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:52
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:245
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:352
#: ../../source/development/rfc/rfc45_virtualmem.rst:1265
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:691
#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:224
#: ../../source/development/rfc/rfc49_curve_geometries.rst:628
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:184
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:267
#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:105
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:515
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:605
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:100
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:181
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:146
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:113
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:791
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:213
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:297
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:402
#: ../../source/development/rfc/rfc62_raster_algebra.rst:167
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:290
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:491
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:95
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:288
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:201
#: ../../source/development/rfc/rfc68_cplusplus11.rst:260
#: ../../source/development/rfc/rfc70_output_format_guess.rst:129
#: ../../source/development/rfc/rfc71_github_migration.rst:117
#: ../../source/development/rfc/rfc72_pytest.rst:242
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:542
#: ../../source/development/rfc/rfc74_sphinx.rst:117
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:232
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:462
msgid "Voting history"
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:5
msgid "RFC 1: Project Management Committee Guidelines"
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:16
msgid ""
"This document describes how the GDAL/OGR Project Management Committee "
"determines membership, and makes decisions on GDAL/OGR project issues."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:19
msgid ""
"In brief the committee votes on proposals on gdal-dev. Proposals are "
"available for review for at least two days, and a single veto is "
"sufficient to delay progress though ultimately a majority of members can "
"pass a proposal."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:25
msgid "Detailed Process"
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:27
msgid ""
"Proposals are written up and submitted on the gdal-dev mailing list for "
"discussion and voting, by any interested party, not just committee "
"members."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:30
msgid ""
"Proposals need to be available for review for at least two business days "
"before a final decision can be made."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:32
msgid ""
"Respondents may vote \"+1\" to indicate support for the proposal and a "
"willingness to support implementation."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:34
msgid ""
"Respondents may vote \"-1\" to veto a proposal, but must provide clear "
"reasoning and alternate approaches to resolving the problem within the "
"two days."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:37
msgid ""
"A vote of -0 indicates mild disagreement, but has no effect. A 0 "
"indicates no opinion. A +0 indicate mild support, but has no effect."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:39
msgid ""
"Anyone may comment on proposals on the list, but only members of the "
"Project Management Committee's votes will be counted."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:41
msgid ""
"A proposal will be accepted if it receives +2 (including the proposer) "
"and no vetos (-1)."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:43
msgid ""
"If a proposal is vetoed, and it cannot be revised to satisfy all parties,"
" then it can be resubmitted for an override vote in which a majority of "
"all eligible voters indicating +1 is sufficient to pass it. Note that "
"this is a majority of all committee members, not just those who actively "
"vote."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:48
msgid ""
"Upon completion of discussion and voting the proposer should announce "
"whether they are proceeding (proposal accepted) or are withdrawing their "
"proposal (vetoed)."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:51
msgid "The Chair gets a vote."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:52
msgid ""
"The Chair is responsible for keeping track of who is a member of the "
"Project Management Committee."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:54
msgid ""
"Addition and removal of members from the committee, as well as selection "
"of a Chair should be handled as a proposal to the committee. The "
"selection of a new Chair also requires approval of the OSGeo board."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:58
msgid "The Chair adjudicates in cases of disputes about voting."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:61
msgid "When is Vote Required?"
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:63
msgid "Anything that could cause backward compatibility issues."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:64
msgid "Adding substantial amounts of new code."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:65
msgid "Changing inter-subsystem APIs, or objects."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:66
msgid "Issues of procedure."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:67
msgid "When releases should take place."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:68
msgid "Anything that might be controversial."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:71
msgid "Observations"
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:73
msgid "The Chair is the ultimate adjudicator if things break down."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:74
msgid ""
"The absolute majority rule can be used to override an obstructionist "
"veto, but it is intended that in normal circumstances vetoers need to be "
"convinced to withdraw their veto. We are trying to reach consensus."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:80
msgid "Bootstrapping"
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:82
msgid ""
"Frank Warmerdam is declared initial Chair of the Project Management "
"Committee."
msgstr ""

#: ../../source/development/rfc/rfc1_pmc.rst:85
msgid ""
"Daniel Morissette, Frank Warmerdam, Andrey Kiselev and Howard Butler are "
"declared to be the founding Project Management Committee. The current "
"membership list can be found on the :ref:`psc` page."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:5
msgid "RFC 20: OGRSpatialReference Axis Support"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:16
msgid ""
"The OGRSpatialReference and OGRCoordinateTransformation classes assume "
"that all coordinate systems use (easting, northing) coordinate order (or "
"in geographic terms (longitude, latitude)). In practice some coordinate "
"systems use alternate axis orientations (such as the Krovak projection), "
"and some standards (GML, WMS 1.3, WCS 1.1) require honouring the EPSG "
"declaration that all it's geographic coordinates have (latitude, "
"longitude) coordinate ordering."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:24
msgid ""
"This RFC attempts to extend the OGRSpatialReference, and "
"OGRCoordinateTransformation classes to support alternate axis "
"orientations, and to update selected drivers (GML, WMS, WCS, GMLJP2) to "
"properly support axis ordering."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:30
msgid "WKT Axis Representation"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:32
msgid ""
"The OGC WKT SRS format (per OGC 01-???) already indicates a way of "
"defining coordinate system axes as shown in this example:"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:51
msgid ""
"There is one AXIS definition per axis with order relating to position "
"within a tuple. The first argument is the user name for the axis and "
"exact values are not specified. The second argument is a direction and "
"may be one of NORTH, SOUTH, EAST or WEST."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:57
msgid "Dilemma"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:59
msgid ""
"The core challenge of this RFC is adding support for axes orders, "
"including honouring EPSG desired axis order for geographic coordinate "
"systems where appropriate without breaking existing files and code that "
"make extensive use of EPSG coordinate systems but override axis "
"orientations and assume they should be treated as long, lat regardless of"
" what EPSG says."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:66
msgid ""
"In particular, we come up with appropriate policies and mechanisms to "
"decide when a file in a geographic coordinate system like EPSG:4326 is to"
" be treated as lat/long and when it should be long/lat. Because of the "
"extensive existing practice it behooves us to err on the side of past "
"practice, and require \"opting in\" to honouring EPSG axis ordering."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:73
msgid "The Hack"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:75
msgid ""
"The main mechanism by I propose to work around the dilemma is to "
"differentiate between geographic coordinate systems with the AXIS values "
"set and those without. In particular, a WKT coordinate system with the "
"EPSG authority code (ie. 4326) set, but no axis declarations will be "
"assumed to be long, lat even though that is contrary to the definition "
"from EPSG of 4326. Only in cases where we really *know* we want to honour"
" EPSG's axis order will we actually populate the axis declarations "
"indicating lat, long."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:84
msgid ""
"The hope is that this will let us continue to (mis)use EPSG:4326 "
"definitions without necessary honouring the EPSG axis ordering except in "
"specific circumstances."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:89
msgid "OGRSpatialReference"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:92
msgid "New Enumeration"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:106
#: ../../source/development/rfc/rfc49_curve_geometries.rst:194
msgid "New methods"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:113
msgid "Fetch information about one axis (iAxis is zero based)."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:122
msgid "Defines the X and Y axes for a given target key (PROJCS or GEOGCS)."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:128
msgid ""
"Returns true based on the EPSG code if EPSG would like this coordinate "
"system to be treated as lat/long. This is useful in contexts like WMS 1.3"
" where EPSG:4326 needs to be interpreted as lat/long due to the standard."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:137
msgid ""
"This works like importFromEPSG() but will assign the EPSG defined AXIS "
"definition."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:140
msgid ""
"Note that OGRSpatialReference::StripNodes( \"AXIS\" ); can be used to "
"strip axis definitions where they are not desired."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:144
msgid "importFromURN"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:146
msgid ""
"Modify importFromURN() to set AXIS values properly for EPSG and OGC "
"geographic coordinate systems. So urn:...:EPSG: will be assumed to really"
" honour EPSG conventions."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:151
msgid "SetWellKnownGeogCS()"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:153
msgid "This method appears to be the only code"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:155
msgid ""
"Modify SetWellKnownGeogCS() to *not* set AXIS values, and strip AXIS "
"values out of any other hardcoded WKT definitions."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:159
msgid "importFromEPSG()"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:161
msgid ""
"importFromEPSG() will continue to *not* set AXIS values for GEOGCS "
"coordinate systems."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:163
msgid ""
"importFromEPSG() will now set axis values for projected coordinate "
"systems (at least in cases like Krovak where it is a non-default axis "
"orientation)."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:166
msgid ""
"importFromEPSG() will be implemented by calling importFromEPSGA() and "
"stripping off axis definitions from the geographic portion of the "
"returned definition."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:171
msgid "SetFromUserInput()"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:173
msgid ""
"This method will have one new option which is a value prefixed by EPSGA: "
"will be passed to importFromEPSGA() (similarly to EPSG:n being passed to "
"importFromEPSG())."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:178
msgid "OGRCoordinateTransformation"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:180
msgid ""
"If AXIS values are set on source and/or destination coordinate system, "
"the OGRCoordinateTransformation code will take care of converting into "
"normal easting/northing before calling PROJ."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:184
msgid ""
"The CPL config option \"GDAL_IGNORE_AXIS_ORIENTATION\" may also be set to"
" \"TRUE\" to disable OGRCoordinateTransformation's checking, and "
"application of axis orientation changes. Effectively this is a backdoor "
"to disable the core effects of the RFC."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:190
#: ../../source/development/rfc/rfc34_license_policy.rst:171
msgid "Drivers Affected"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:192
msgid ""
"GMLJP2 (classes in gcore/gdalgmlcoverage.cpp and "
"gcore/gdaljp2metadata.cpp)."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:194
msgid "WCS (based on interpretation of urns)."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:195
msgid ""
"WMS (maybe? actually, I suspect we don't actually get the coordinate "
"system from the capabalities)"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:197
msgid "OGR GML (maybe? only GML3 affected?)"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:198
msgid ""
"BSB, SAR_CEOS, ENVISAT, HDF4, JDEM, L1B, LAN, SRTMHGT: Like "
"SetWellKnownGeogCS() these all include lat/long AXIS specifications in "
"their hardcoded WGS84 coordinate systems. These need to be removed so "
"they will default to being interpreted as long/lat."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:204
msgid "Versions"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:206
msgid ""
"Work will be in trunk for GDAL/OGR 1.6.0 with the following exceptions "
"which will be address in 1.5.x:"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:209
msgid ""
"Existing use of AXIS specifier will for geographic coordinate systems "
"will be stripped from SetWellKnownGeogCS() and the various drivers with "
"hard coded WKT strings."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:212
msgid ""
"Some sort of hack will need to be introduced into the GMLJP2 (and "
"possibly WCS) code to flip EPSG authority lat/long values (details to be "
"worked out)."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:219
msgid ""
"Implementation would be done by Frank Warmerdam. Some aspects (such as "
"properly capturing axis ordering for projected coordinate systems) might "
"not be implemented immediately."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:226
msgid ""
"The greatest concern is that any existing WKT coordinate systems with "
"LAT/LONG axis ordering (in VRT files, or .aux.xml files for instance) "
"will be interpreted differently by GDAL/OGR 1.6.0 than they were by "
"1.5.0. This could easily occur if files in formats like BSB, or HDF4 were"
" copied to a format using WKT coordinate systems (such as JPEG with a "
".aux.xml file). To partially mitigate this I am proposing that AXIS "
"definitions be removed from GDAL 1.5.1."
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:235
msgid "Supporting Information"
msgstr ""

#: ../../source/development/rfc/rfc20_srs_axes.rst:237
msgid ""
"OSGeo Wiki Summary: `http://wiki.osgeo.org/index.php/Axis_Order_Confusion"
" <http://wiki.osgeo.org/index.php/Axis_Order_Confusion>`__"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:5
msgid "RFC 21: OGR SQL type cast and field name alias"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:7
#: ../../source/development/rfc/rfc6_sqlgeom.rst:7
msgid "Author: Tamas Szekeres"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:9
#: ../../source/development/rfc/rfc6_sqlgeom.rst:9
msgid "Contact: szekerest@gmail.com"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:16
msgid ""
"This proposal provides support for changing the column name and the "
"column type in the OGR SQL select list."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:19
msgid ""
"The main motivation of this change is to provide better control when "
"transferring the OGR_STYLE special field from each data source to the "
"other. For example we can use ogr2ogr for this purpose using the "
"following command line:"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:28
msgid ""
"The shape driver will truncate the OGR_STYLE field to 80 characters by "
"default in length that may not be enough to hold the actual value. So as "
"to fix this issue we might want to specify the desired length in the "
"select list, like:"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:37
msgid ""
"In some cases it would also be useful to change the name of the field in "
"the target data source:"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:45
#: ../../source/development/rfc/rfc23_ogr_unicode.rst:21
#: ../../source/development/rfc/rfc26_blockcache.rst:45
#: ../../source/development/rfc/rfc5_unicode.rst:20
#: ../../source/development/rfc/rfc6_sqlgeom.rst:29
msgid "Main concepts"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:47
msgid ""
"To support these new features we will extend the current OGR SQL syntax. "
"The proposed addition will keep the syntax conform to the SQL92 "
"specification:"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:95
msgid ""
"This RFC doesn't address implementing conversion to the 'integer list', "
"'double list' and 'string list' OGR data types, which doesn't conform to "
"the SQL92 specification and the necessary conversion routines are missing"
" in the OGR code."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:103
msgid ""
"To implement the addition the following changes should be made in the OGR"
" codebase:"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:106
msgid ""
"In ogr_swq.h I'll have to add to 4 fields to swq_col_def to hold the "
"field_alias the target_type, the field_length, and field_precision"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:109
msgid ""
"In ogr_swq.h SWQ_DATE, SWQ_TIME, SWQ_TIMESTAMP will be added to "
"swq_field_type enum."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:112
msgid ""
"In swq.c I'll have to change swq_select_preparse to take care of the "
"field alias and the CAST specification."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:115
msgid ""
"A new function (swq_parse_typename) will be added to parse the supported "
"typenames."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:118
msgid ""
"In ogr_gensql.cpp the .ctor of OGRGenSQLResultsLayer will be changed to "
"set up the field name and the field length to the target data source"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:122
msgid ""
"In ogr_gensql.cpp TranslateFeature will be modified to take care of the "
"type change if specified."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:128
msgid ""
"The backward compatibility for the current SQL syntax will be retained. "
"This addition doesn't require changes in the OGR C and SWIG API."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:132
#: ../../source/development/rfc/rfc22_rpc.rst:260
#: ../../source/development/rfc/rfc26_blockcache.rst:193
#: ../../source/development/rfc/rfc28_sqlfunc.rst:182
#: ../../source/development/rfc/rfc30_utf8_filenames.rst:200
#: ../../source/development/rfc/rfc31_ogr_64.rst:194
#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:108
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:119
#: ../../source/development/rfc/rfc34_license_policy.rst:227
#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:96
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:615
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:656
#: ../../source/development/rfc/rfc49_curve_geometries.rst:598
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:154
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:237
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:383
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:535
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:66
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:153
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:121
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:84
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:737
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:156
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:264
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:339
#: ../../source/development/rfc/rfc62_raster_algebra.rst:118
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:263
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:457
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:69
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:250
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:154
#: ../../source/development/rfc/rfc6_sqlgeom.rst:435
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:505
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:210
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:433
msgid "Documentation"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:134
msgid ""
"The OGR SQL document will be updated to reflect the new features. I'll "
"take care of updating the OGR Style Documentation with the support of "
"transferring the styles between the data sources."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:139
#: ../../source/development/rfc/rfc6_sqlgeom.rst:441
msgid "Implementation Staffing"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:141
msgid "Tamas Szekeres will implement the RFC in the development version."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:143
msgid ""
"Frank Warmerdam will implement the regression test scripts according to "
"this new functionality."
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:147
#: ../../source/development/rfc/rfc23_ogr_unicode.rst:175
#: ../../source/development/rfc/rfc26_blockcache.rst:217
#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:41
#: ../../source/development/rfc/rfc5_unicode.rst:191
#: ../../source/development/rfc/rfc68_cplusplus11.rst:156
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:215
#: ../../source/development/rfc/rfc6_sqlgeom.rst:452
msgid "References"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:149
msgid ""
"Tracking bug for this feature (containing all of the proposed code "
"changes): #2171"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:161
msgid "Even Rouault +1"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:163
#: ../../source/development/rfc/rfc29_desired_fields.rst:135
msgid "Tamas Szekeres +1"
msgstr ""

#: ../../source/development/rfc/rfc21_ogrsqlcast.rst:165
msgid "Andrey Kiselev +0"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:5
msgid "RFC 22: RPC Georeferencing"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:11
#: ../../source/development/rfc/rfc28_sqlfunc.rst:11
msgid "Status: Adopted, Implemented"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:16
msgid ""
"It is proposed that GDAL support an additional mechanism for geolocation "
"of imagery based on rational polynomial coefficients (RPCs) represented "
"as metadata."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:20
msgid ""
"Many modern raw satellite products are distributed with RPCs, including "
"products from GeoEye, and DigitalGlobe. RPCs provide a higher systematic "
"description of georeferencing over an image, and also contain information"
" on the viewing geometry that in theory makes orthocorrection (given a "
"DEM) and some 3D operations like building height computation possible."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:28
msgid "RPC Domain Metadata"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:30
msgid ""
"Datasets with RPCs will include the following dataset level metadata "
"items in the \"RPC\" domain to identify the rational polynomials."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:33
msgid ""
"ERR_BIAS: Error - Bias. The RMS bias error in meters per horizontal axis "
"of all points in the image (-1.0 if unknown)"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:35
msgid ""
"ERR_RAND: Error - Random. RMS random error in meters per horizontal axis "
"of each point in the image (-1.0 if unknown)"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:37
msgid "LINE_OFF: Line Offset"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:38
msgid "SAMP_OFF: Sample Offset"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:39
msgid "LAT_OFF: Geodetic Latitude Offset"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:40
msgid "LONG_OFF: Geodetic Longitude Offset"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:41
msgid "HEIGHT_OFF: Geodetic Height Offset"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:42
msgid "LINE_SCALE: Line Scale"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:43
msgid "SAMP_SCALE: Sample Scale"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:44
msgid "LAT_SCALE: Geodetic Latitude Scale"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:45
msgid "LONG_SCALE: Geodetic Longitude Scale"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:46
msgid "HEIGHT_SCALE: Geodetic Height Scale"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:47
msgid ""
"LINE_NUM_COEFF (1-20): Line Numerator Coefficients. Twenty coefficients "
"for the polynomial in the Numerator of the rn equation. (space separated)"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:50
msgid ""
"LINE_DEN_COEFF (1-20): Line Denominator Coefficients. Twenty coefficients"
" for the polynomial in the Denominator of the rn equation. (space "
"separated)"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:53
msgid ""
"SAMP_NUM_COEFF (1-20): Sample Numerator Coefficients. Twenty coefficients"
" for the polynomial in the Numerator of the cn equation. (space "
"separated)"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:56
msgid ""
"SAMP_DEN_COEFF (1-20): Sample Denominator Coefficients. Twenty "
"coefficients for the polynomial in the Denominator of the cn equation. "
"(space separated)"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:60
msgid ""
"These fields are directly derived from the document prospective GeoTIFF "
"RPC document at:"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:63
msgid ""
"`http://geotiff.maptools.org/rpc_prop.html "
"<http://geotiff.maptools.org/rpc_prop.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:65
msgid ""
"The line and pixel offset expressed with LINE_OFF and SAMP_OFF are with "
"respect to the center of the pixel (#5993)"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:69
msgid "Updating NITF Driver"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:71
msgid ""
"Already supports RPCs in this model, but will be modified to put them in "
"the RPC domain instead of the primary metadata domain."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:73
msgid "Add support for reading Digital Globe .RPB files."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:74
msgid "No support for writing RPCs for now."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:77
msgid "Updating GeoTIFF Driver"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:79
msgid "Upgrade to support reading Digital Globe .RPB files."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:80
msgid "Possible support reading Space Imaging (GeoEye?) rpc.txt files."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:81
msgid ""
"Support reading RPC TIFF tag (per "
"`http://geotiff.maptools.org/rpc_prop.html "
"<http://geotiff.maptools.org/rpc_prop.html>`__)"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:83
msgid "Support writing RPC TIFF tag."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:84
msgid "Support writing .RPB files (if RPB=YES or PROFILE not GDALGeoTIFF)."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:87
msgid "Changes to GenImgProj Transformer"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:89
msgid ""
"Currently it is difficult to reliably create a warp transformer based on "
"RPCs using GDALGenImgProjTransformer() as it will use a geotransform in "
"preference to RPCs if available. Many images with useful RPC information "
"also include a geotransform (approximate or accurate). It is therefore "
"proposed to modify the GDALCreateGenImgProjTransformer() function to make"
" it practical to provide more direction in the creation of the "
"transformer. The proposed new function is:"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:103
msgid "Supported Options:"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:105
msgid "SRC_SRS: WKT SRS to be used as an override for hSrcDS."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:106
msgid "DST_SRS: WKT SRS to be used as an override for hDstDS."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:107
msgid "GCPS_OK: If false, GCPs will not be used, default is TRUE."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:108
msgid ""
"MAX_GCP_ORDER: the maximum order to use for GCP derived polynomials if "
"possible. The default is to autoselect based on the number of GCPs. A "
"value of -1 triggers use of Thin Plate Spline instead of polynomials."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:112
msgid ""
"METHOD: may have a value which is one of GEOTRANSFORM, GCP_POLYNOMIAL, "
"GCP_TPS, GEOLOC_ARRAY, RPC to force only one geolocation method to be "
"considered on the source dataset."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:115
msgid "RPC_HEIGHT: A fixed height to be used with RPC calculations."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:117
msgid ""
"This replaces the older function which did not include support for "
"passing arbitrary options, and was thus not easily extended. The old "
"function will be re-implemented with a call to the new functions."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:121
msgid ""
"The most important addition is the METHOD option which can be set to "
"specifically use one of the image to georeferenced coordinate system "
"methods instead of leaving it up to the code to pick the one it thinks is"
" best."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:127
msgid "Changes to gdalwarp and gdaltransform"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:129
msgid ""
"In order to facilitate passing transformer options into the updated "
"GDALCreateGenImgProjTransformer2(), the gdalwarp and gdaltransform "
"programs (built on this function) will be updated to include a -to "
"(transformer option) switch, and to use the new function."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:135
#: ../../source/development/rfc/rfc4_geolocate.rst:142
msgid "Preserving Geolocation Through Translation"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:137
msgid ""
"The RPC information needs to be copied and preserved through translations"
" that do not alter the spatial arrangement of the data. To that end RPC "
"metadata copying will be added to:"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:141
msgid "VRT driver's CreateCopy()."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:142
msgid "GDALDriver's default CreateCopy()."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:143
msgid "GDALPamDataset::CopyInfo()"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:144
msgid ""
"gdal_translate will be updated to copy RPC metadata to the intermediate "
"internal VRT if, and only if, no resizing or subsetting is being done."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:149
msgid "Changes to RPC Transformer"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:151
msgid ""
"Implement iterative \"back transform\" from pixel/line to lat/long/height"
" instead of simple linear approximator."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:153
msgid ""
"Add support for RPC_HEIGHT offset, so all Z values to transformer are "
"assumed to be relative to this offset (normally really and average "
"elevation for the scene)."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:156
msgid "Make RPC Transformer serializable (in VRT files, etc)."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:159
#: ../../source/development/rfc/rfc25_fast_open.rst:92
#: ../../source/development/rfc/rfc36_open_by_drivername.rst:58
msgid "Backward Compatibility Issues"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:161
msgid ""
"Previously the NITF driver returned RPC metadata in the default domain. "
"With the implementation of this RFC for GDAL 1.6.0 any applications using"
" this metadata would need to consult the RPC domain instead. The RPC\\_ "
"prefix on the metadata values has also been removed."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:166
msgid ""
"The GDALCreateGenImgProjTransformer() function is preserved, so no "
"compatibility issues are anticipated by the addition of the new "
"generalized factory."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:171
msgid "SWIG Bindings Issues"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:173
msgid ""
"The raw access is by the established metadata api, so no changes are "
"needed for this."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:175
msgid ""
"The Warp API is only bound at a high level, so there should be no changes"
" in this regard."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:177
msgid ""
"For testing purposes it is desirable to provide a binding around the GDAL"
" transformer API. The following planned binding is based loosely on "
"OGRCoordinateTransformation API binding. So far I have only found the "
"TransformPoint( bDstToSrc, x, y, z ) entry point to be useful in Python "
"and even that ends up returning a (bSuccess, (x, y, z)) result which is "
"somewhat awkward. Is there a better way of doing this?"
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:262
msgid ""
"In addition to standard API documentation, the RPC metadata mechanism "
"will be introduced into the \"GDAL Data Model\" document."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:268
msgid ""
"This work will be implemented by Frank Warmerdam with support from the "
"Canadian Nuclear Safety Commission."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:274
msgid ""
"A test script for the transformer API covering RPC, GCP_TPS, "
"GCP_POLYNOMIAL, GEOLOC and GEOTRANSFORM methods will be implemented."
msgstr ""

#: ../../source/development/rfc/rfc22_rpc.rst:276
msgid ""
"A test script for reading and writing RPB, and GeoTIFF RPC tags will be "
"written."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:5
msgid "RFC 23.1: Unicode support in OGR"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:7
#: ../../source/development/rfc/rfc25_fast_open.rst:7
#: ../../source/development/rfc/rfc30_utf8_filenames.rst:7
#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:7
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:7
#: ../../source/development/rfc/rfc34_license_policy.rst:7
msgid "Authors: Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:11
msgid "Status: Adopted (implemented)"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:16
msgid ""
"This document proposes preliminary steps towards GDAL/OGR handling "
"strings internally in UTF-8, and supporting conversion between different "
"encodings."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:23
#: ../../source/development/rfc/rfc5_unicode.rst:22
msgid "GDAL should be modified in a way to support three following main ideas:"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:25
msgid ""
"C Functions will be provided to support a variety of encoding "
"conversions, including conversion between representations (ie. UTF-8 to "
"UCS-16/wchar_t)."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:28
msgid "Character encodings will be identified by iconv() style strings."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:29
msgid ""
"OFTString/OFTStringList feature attributes in OGR will be treated as "
"being in UTF-8."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:32
msgid ""
"This RFC specifically does not attempt to address issues of using non-"
"ascii filenames. It also does not attempt to make definitions about the "
"encoding of other strings used in GDAL/OGR (such as field names, "
"metadata, etc). These would presumably be addressed in a later RFC "
"building on this one."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:39
msgid "CPLRecode API"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:41
msgid ""
"The following three C callable functions will be introduced for recoding "
"strings, and for converting between wchar_t (wide character) and char "
"(multi-byte) formats:"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:57
msgid ""
"In each case the returned string is zero terminated, as is the input "
"string, and the returned string should be deallocated with CPLFree(). In "
"case of error the returned string will be NULL, and the function will "
"issue a CPLError(). The functions will be marked with CPL_DLL and "
"considered part of the public GDAL/OGR API for use of applications as "
"well as internal use."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:65
msgid "Encoding Names"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:67
msgid ""
"It is proposed that the encoding names will be the same sorts of names "
"used by iconv(). So stuff like \"UTF-8\", \"LATIN5\", \"CP850\" and "
"\"ISO_8859-1\". It does not appear that these names for encodings are a "
"1:1 match with C library locale names (like \"en_CA.utf8\" for instance) "
"which may cause some issues."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:73
msgid "Some particular names of interest:"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:75
msgid ""
"\"\": The current locale. Use this when converting from/to the users "
"locale."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:77
msgid ""
"\"UTF-8\": Unicode in multi-byte encoding. Most of the time this will be "
"our internal linga-franca."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:79
msgid ""
"\"POSIX\": I think this is roughly ASCII (perhaps with some extended "
"characters?)."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:81
msgid ""
"\"UCS-2\": Two byte unicode. This is a wide character format and only "
"suitable for use with the wchar_t methods."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:84
msgid ""
"On some systems you can use \"iconv --list\" to get a list of supported "
"encodings."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:88
msgid "iconv()"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:90
msgid ""
"It is proposed to implement the CPLRecode() method using the iconv() and "
"related functions when available."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:93
msgid ""
"There is an excellent implementation of this API as GNU libiconv(), which"
" is used by the C libraries on Linux. Also some operating systems provide"
" the iconv() API as part of the C library (all unix?); however, the "
"system iconv() often has a restricted set of conversions supported so it "
"may be desirable to use libiconv in preference to the system iconv() even"
" when it is available."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:100
msgid ""
"If iconv() is not available, a stub implementation of the recode services"
" will be provided which:"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:103
msgid ""
"implements UCS-2 / UTF-8 interconversion using either mbtowc/wctomb, or "
"an implementation derived from "
"`http://www.cl.cam.ac.uk/~mgk25/unicode.html "
"<http://www.cl.cam.ac.uk/~mgk25/unicode.html>`__."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:106
msgid ""
"Implements recoding from \"\" to and from \"UTF-8\" by doing nothing, but"
" issuing a warning on the first use if the current locale does not appear"
" to be the \"C\" locale."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:109
msgid "Implements recoding from \"ASCII\" to \"UTF-8\" as a null operation."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:110
msgid ""
"Implements recoding from \"UTF-8\" to \"ASCII\" by turning all non-ASCII "
"multi-byte characters to '?'."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:113
msgid ""
"This hopefully gives us a weak operational status when built without "
"iconv(), but full operation when it is available."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:116
msgid ""
"The --with-iconv= option will be added to configure. The argument can be "
"the path to a libiconv installation or the special value 'system' "
"indicating that the system lib should be used. Alternatively, --without-"
"iconv can be used to avoid using iconv."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:122
msgid "OFTString/OFTStringList Fields"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:124
msgid ""
"It is declared that OGR string attribute values will be in UTF-8. This "
"means that OGR drivers are responsible for translating format specific "
"representations to UTF-8 when reading, and back to the format specific "
"representation when writing. In many cases (of simple ASCII text) this "
"requires no transformation."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:130
msgid ""
"This implies that the arguments to methods like OGRFeature::SetField( int"
" i, const char \\*) should be UTF-8, and that GetFieldAsString() will "
"return UTF-8."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:134
msgid ""
"The same issues apply to OFTStringList lists of strings. Each string will"
" be assumed to be UTF-8."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:138
msgid "OLCStringsAsUTF8 Capability Flag"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:140
msgid ""
"Some drivers (ie. CSV) can effectively not know the encoding of their "
"inputs. Therefore, it isn't always practical to turn things into UTF-8 in"
" a guaranteed way. So, the new layer level capability called "
"\"StringsAsUTF8\" represented with the macro \"OLCStringsAsUTF8\" will be"
" testable at the layer level with TestCapability(). Drivers which are "
"certain to return string attributes as UTF-8 should return TRUE, while "
"drivers that do not know the encoding they return should return FALSE. "
"Any driver which knows it's encoding should convert to UTF-8."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:150
msgid "OGR Driver Updates"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:152
msgid ""
"The following OGR drivers could benefit immediately from recoding to "
"UTF-8 support in one way or another."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:155
msgid "ODBC (add support for wchar_t / NVARSHAR fields)"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:156
msgid "Shapefile"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:157
msgid ""
"GML (I'm not sure how the XML encoding values all map to our concept of "
"encoding)"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:159
msgid "Postgres"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:161
msgid ""
"I'm sure a number of the other drivers, particularly the RDBMS drivers, "
"could benefit from an update."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:167
msgid ""
"Frank Warmerdam will implement the core iconv() capabilities, the "
"CPLRecode() additions and update the ODBC driver. Other OGR drivers would"
" be updated as time and demand mandates to conform to the definitions in "
"this RFC by interested developers."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:172
msgid "The core work will be completed for GDAL/OGR 1.6.0 release."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:177
#: ../../source/development/rfc/rfc5_unicode.rst:193
msgid ""
"`The Unicode Standard, Version 4.0 - Implementation Guidelines "
"<http://unicode.org/versions/Unicode4.0.0/ch05.pdf>`__ - Chapter 5 (PDF)"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:180
#: ../../source/development/rfc/rfc5_unicode.rst:196
msgid ""
"FAQ on how to use Unicode in software: "
"`http://www.cl.cam.ac.uk/~mgk25/unicode.html "
"<http://www.cl.cam.ac.uk/~mgk25/unicode.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:182
#: ../../source/development/rfc/rfc5_unicode.rst:198
msgid ""
"FLTK implementation of string conversion functions: "
"`http://svn.easysw.com/public/fltk/fltk/trunk/src/utf.c "
"<http://svn.easysw.com/public/fltk/fltk/trunk/src/utf.c>`__"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:184
#: ../../source/development/rfc/rfc5_unicode.rst:200
msgid ""
"`http://www.easysw.com/~mike/fltk/doc-2.0/html/utf_8h.html "
"<http://www.easysw.com/~mike/fltk/doc-2.0/html/utf_8h.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:185
#: ../../source/development/rfc/rfc5_unicode.rst:201
msgid "Ticket #1494 : UTF-8 encoding for GML output."
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:186
msgid ""
"Libiconv: `http://www.gnu.org/software/libiconv/ "
"<http://www.gnu.org/software/libiconv/>`__"
msgstr ""

#: ../../source/development/rfc/rfc23_ogr_unicode.rst:188
msgid ""
"ICU (another i18n library): `http://www.icu-project.org/ <http://www.icu-"
"project.org/>`__"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:5
msgid "RFC 24: GDAL Progressive Data Support"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:7
msgid "Author: Norman Barker, Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:9
msgid "Contact: nbarker@ittvis.com, warmerdam@pobox.com"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:16
msgid ""
"Provide an interface for asynchronous/streaming data access in GDAL. The "
"initial implementation is for JPIP, but should be generic enough to apply"
" to other streaming / progressive approaches. Background on the JPIP "
"(Kakadu) implementation can be found in [wiki:rfc24_jpipkak]."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:22
msgid "Interfaces"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:25
msgid "GDALAsyncReader"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:27
msgid ""
"This new class is intended to represent an active asynchronous raster "
"imagery request. The request includes information on a source window on "
"the dataset, a target buffer size (implies level of decimation or "
"replication), the buffer type, buffer interleaving, data buffer and bands"
" being requested. Essentially the same sort of information that is passed"
" in a GDALDataset::!RasterIO() request."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:34
msgid ""
"The GetNextUpdatedRegion() method can be used to wait for an update to "
"the imagery buffer, and to find out what area was updated. The "
"LockBuffer() and UnlockBuffer() methods can be used to temporarily "
"disable updates to the buffer while application code accesses the buffer."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:40
msgid ""
"While an implementation of the simple accessors is provided as part of "
"the class, it is intended that the class be subclassed as part of "
"implementation of a particular driver, and custom implementations of "
"GetNextUpdatedRegion(), LockBuffer() and UnlockBuffer() provided."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:45
msgid ""
"{{{ class CPL_DLL GDALAsyncReader { protected: GDALDataset\\* poDS; int "
"nXOff; int nYOff; int nXSize; int nYSize; void \\* pBuf; int nBufXSize; "
"int nBufYSize; GDALDataType eBufType; int nBandCount; int\\* panBandMap; "
"int nPixelSpace; int nLineSpace; int nBandSpace; long nDataRead;"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:50
msgid ""
"public: GDALAsyncReader(GDALDataset\\* poDS = NULL); virtual "
"~GDALAsyncReader();"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:81
msgid "}; }}}"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:84
msgid "GetNextUpdatedRegion()"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:105
msgid ""
"The async return status list is as follows, and will be declared in "
"gdal.h."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:119
msgid "The meaning as a return value is:"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:121
msgid ""
"GARIO_PENDING: No imagery was altered in the buffer, but there is still "
"activity pending, and the application should continue to call "
"GetNextUpdatedRegion() as time permits."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:124
msgid ""
"GARIO_UPDATE: Some of the imagery has been updated, but there is still "
"activity pending."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:126
msgid ""
"GARIO_ERROR: Something has gone wrong. The asynchronous request should be"
" ended."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:128
msgid ""
"GARIO_COMPLETE: An update has occurred and there is no more pending work "
"on this request. The request should be ended and the buffer used."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:133
#: ../../source/development/rfc/rfc47_dataset_caching.rst:122
msgid "GDALDataset"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:135
msgid ""
"The GDALDataset class is extended with methods to create an asynchronous "
"reader, and to cleanup the asynchronous reader. It is intended that these"
" methods would be subclassed by drivers implementing asynchronous data "
"access."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:151
msgid ""
"It is expected that as part of gdal/gcore a default !GDALAsyncReader "
"implementation will be provided that just uses GDALDataset::!RasterIO() "
"to perform the request as a single blocking request. However, this "
"default implementation will ensure that applications can use the "
"asynchronous interface without worrying whether a particular format will "
"actually operate asynchronously."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:159
msgid "GDALDriver"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:161
msgid ""
"In order to provide a hint to applications whether particular formats "
"support asynchronous IO, we will add a new metadata item on the "
"GDALDriver of implementing formats. The metadata item will be "
"\"DCAP_ASYNCIO\" (macro GDAL_DCAP_ASYNCIO) and will have the value "
"\"YES\" if asynchronous IO is available."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:167
msgid ""
"Implementing drivers will do something like this in their driver setup "
"code:"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:175
#: ../../source/development/rfc/rfc47_dataset_caching.rst:147
msgid "GDALRasterBand"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:177
msgid ""
"There are no changes to the GDALRasterBand interface for asynchronous "
"raster IO. Asynchronous IO requests can only be made at the dataset "
"level, not the band."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:182
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:364
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:183
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:219
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:144
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:87
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:152
msgid "C API"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:184
msgid ""
"The following C API wrappers for the C++ classes and methods will be "
"added. Note that at this time there is no intention to provide C wrappers"
" for all the GDALAsyncReader accessors since the provided information is "
"already available in the application from the call launching the async "
"io."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:213
msgid "SWIG"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:215
msgid ""
"It is intended that all the above functions in the C API will be wrapped "
"for SWIG."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:219
msgid "Driver Implementations"
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:221
msgid ""
"A full implementation of the Asynchronous API will be provided as the "
"JPIPKAK driver - a JPIP protocol implementation using the Kakadu library."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:225
msgid "At this time, no other implementations are planned."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:230
msgid ""
"Some testing of the asynchronous api against normal drivers will be added"
" in the test suite, as well as testing of the JPIPKAK driver in "
"asynchronous and conventional data access methods."
msgstr ""

#: ../../source/development/rfc/rfc24_progressive_data_support.rst:234
msgid ""
"Also, a new commandline program, gdalasyncread, is implemented which "
"provides a mechanism to test the async API from the commandline. It takes"
" a subset of the gdal_translate commandline options."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:5
msgid "RFC 25: Fast Open (withdrawn)"
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:11
msgid ""
"Status: Withdrawn (in favor of some specific improvements in #2957 - rfc "
"may be renewed at a later date)"
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:17
msgid ""
"This document proposes a mechanism for application to indicate a desire "
"for the fastest possible open of a raster file, even if a variety of "
"metadata and supporting information may not be available. It is primarily"
" intended to optimize applications working with catalogs containing many "
"raster files."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:26
msgid ""
"An application can request fast open mode by setting the "
"\"GDAL_FAST_OPEN\" configuration option to \"YES\" - the default is "
"assumed to be no. When this option is set to YES selected drivers can "
"operate differently so as to optimize the speed of opening a dataset. "
"Acceleration options include:"
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:32
msgid ""
"Skip establishing a coordinate system - particularly helpful if it avoids"
" an EPSG lookup."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:34
msgid "Skip probing for supporting .aux.xml, world files and other files."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:36
msgid ""
"It is anticipated that fast open mode will be used primarily for fast "
"raster display from datasets where required metadata is already provided "
"by a catalog of some sort. Because of this it is essential that in fast "
"open mode datasets will still accurately return a list of bands, their "
"datatypes, and their overviews."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:43
msgid "Thread Local Configuration Options"
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:45
msgid ""
"In multi-threaded applications use of a process-global configuration "
"option - turned on just while calling GDALOpen() - may not be "
"appropriate. In particular, it is hard to ensure that this configuration "
"option won't affect GDALOpen()'s in other threads of the same process. "
"This problem also affects other configuration options that. To resolve "
"this problem it is intended to add a new function to set \"thread local\""
" configuration options."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:57
msgid ""
"This mechanism will be implemented using normal thread local data "
"handling (CPLGetTLS(), etc)."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:60
msgid ""
"It should be noted that CPLSetConfigOption() will continue to set "
"configuration options to apply to all threads. CPLGetConfigOption() will "
"first search thread local values, then process global values and then the"
" environment."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:66
msgid "Work Plan"
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:68
msgid ""
"For the time being the following changes will be made to drivers to "
"accelerate them in fast open mode."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:71
msgid "GDALOpenInfo will avoid loading a list of all files in a directory."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:72
msgid "GTIFF driver will avoid collecting a coordinate systems."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:74
msgid ""
"This work will be completed in trunk in time for the GDAL 1.7.0 release "
"by Frank Warmerdam."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:78
#: ../../source/development/rfc/rfc36_open_by_drivername.rst:51
msgid "Utilization"
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:80
msgid ""
"There is no plan to do this immediately, but the GDAL VRT driver would be"
" a good candidate to utilize this mechanism."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:83
msgid ""
"In theory, it would also be desirable for MapServer to utilize this mode "
"for tileindexed rasters - except that MapServer depends on the "
"geotransform coming from the underlying raster file rather than coming "
"from the raster catalog. MapServer also assumes the color table, and "
"nodata values will be available."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:89
msgid "ArcGIS is also expected to utilize this feature."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:94
msgid ""
"There are no known backward compatibility issues. However, there may be "
"forward compatibility issues if we are not precise and consistent from "
"version to version on what supporting info is allowed to be omitted in "
"fast open mode."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:102
msgid ""
"Tests would be added to the appropriate driver test scripts to test fast "
"open mode - confirming that expected information is discarded, and kept."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:107
#: ../../source/development/rfc/rfc36_open_by_drivername.rst:69
#: ../../source/development/rfc/rfc68_cplusplus11.rst:119
msgid "Issues"
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:109
msgid ""
"Potentially desirable things like ignoring .aux.xml files are not "
"possible as they are also sometimes the source of overview information."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:112
msgid ""
"Potentially discarding all metadata including color tables, nodata "
"values, and geotransforms makes this mode not useful for applications "
"like MapServer that don't keep such information in their catalog."
msgstr ""

#: ../../source/development/rfc/rfc25_fast_open.rst:115
msgid ""
"This RFC does not discuss a way of accelerating GDALOpen() by skipping "
"unnecessary drivers, though that would also potentially help quite a bit."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:5
msgid "RFC 26: GDAL Block Cache Improvements"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:7
msgid "Authors: Tamas Szekeres, Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:9
msgid "Contact: szekerest@gmail.com, even.rouault at spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:13
msgid "Implementation version: GDAL 2.1"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:16
msgid "Summary and rationale"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:18
msgid ""
"GDAL maintains an in-memory cache for the raster blocks fetched from the "
"drivers and ensures that the second attempt to access the same block will"
" be served from the cache instead of the driver. This cache is maintained"
" in a per-band fashion and an array is allocated for the pointers for "
"each blocks (or sub-blocks). This approach is not sufficient with large "
"raster dimensions (or large virtual rasters ie. with the WMS/TMS driver),"
" which may cause out of memory errors in GDALRasterBand::InitBlockInfo, "
"as raised in #3224"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:27
msgid ""
"For example, a band of a dataset at level 21 with a GoogleMaps tiling "
"requires 2097152x2097152 tiles of 256x256 pixels. This means that GDAL "
"will try to allocate an array of 32768x32768 = 1 billion elements (32768 "
"= 2097152 / 64). The size of this array is 4 GB on a 32-bit build, so it "
"cannot be allocated at all. And it is 8 GB on a 64-bit build (even if "
"this is generally only virtual memory reservation but not actually "
"allocation of physical pages of memory, due to over-commit mechanism of "
"the operating system). At dataset closing, this means that those 1 "
"billion cells will have to be explored to discover remaining cached "
"blocks. In reality, all above figures must be multiplied by 3 for a RGB "
"(or 4 for a RGBA) dataset."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:39
msgid ""
"In the hash set implementation, memory allocation depends directly on the"
" number of cached blocks. Typically with the default GDAL_CACHEMAX size "
"of 40 MB, only 640 blocks of 256x256 pixels can be simultaneously cached "
"(for all datasets)."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:47
msgid ""
"Awareness of thread-safety issues is crucial in the design of block "
"caching. In gdalrasterblock.cpp, a static linked list is maintained so as"
" to track the access order of the blocks and keep the size of the cache "
"within a desired limit by dropping the oldest blocks out of the list. "
"This linked list is shared among all the datasets and bands in GDAL "
"(protected by a hRBMutex) and a thread on each band, when reading a new "
"block, may also trigger a GDALRasterBand::UnreferenceBlock call on "
"another band within the scope of this mutex. GDALRasterBand::FlushBlock "
"will also access the data structure of the band level cache by removing "
"the corresponding tile from the array or the hashtable."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:58
msgid ""
"In GDAL 2.0, some issues related to thread-safety (#3225, #3226) have "
"been fixed and this RFC still preserves those scenarios as safe."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:61
msgid ""
"The changes of this RFC consist in moving away from the GDALRasterBand "
"class the logic to access to a cached block, to add or remove it. This is"
" done with the new GDALAbstractBandBlockCache class. The current array "
"based logic is moved into the new GDALArrayBandBlockCache class, and the "
"new hashset based logic in GDALHashsetBandBlockCache."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:67
msgid ""
"For the array based implementation, due to the \"static\" nature of the "
"hosting structure (an array), no special care is needed when reading or "
"writing a cell from concurrent threads. The only special care that must "
"be taken is to prevent a given cell (block) to be accessed concurrently. "
"For example we want to avoid TryGetLockedBlockRef() to return a block "
"that is being freed by another thread from "
"GDALRasterBlock::FlushCacheBlock() or Internalize(). For that, the "
"nRefCount member of GDALRasterBlock is now accessed and modified only "
"through atomic functions to increase, decrease or compare-and-swap its "
"value."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:78
msgid ""
"For the hash set based implementation, the base implementation of hash "
"set data structure done in in cpl_hash_set.h / cpl_hash_set.cpp is not "
"thread safe by default. So GDALHashsetBandBlockCache has a dedicated "
"mutex to protect all reads, additions and removals from the hash set. No "
"dead-lock with the hRBMutex can occurs since no operations done under the"
" hashset mutex involves calling any method from GDALRasterBlock."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:85
msgid ""
"We could potentially have reused the hRBMutex to protect the hash set, "
"but this would have increased the contention of the hRBMutex "
"unnecessarily."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:89
msgid ""
"By default, the selection between the array based and the hashtable based"
" approaches is based on the following rule: if the dataset has more than "
"1 million blocks, the hashset based implementation is used, otherwise the"
" array based implementation is used. The new GDAL_OF_ARRAY_BLOCK_ACCESS "
"and GDAL_OF_HASHSET_BLOCK_ACCESS open flags can also be passed to "
"GDALOpenEx() to override this choice. The GDAL_BAND_BLOCK_CACHE "
"configuration option can also be set to ARRAY or HASHSET."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:98
msgid ""
"The hashset based implementation could potentially be the default "
"implementation in all cases (performance comparisons done with the "
"autotest/cpp/testblockcache utility with 4 or 8 cores show non measurable"
" differences), but in theory the array based implementation offers less "
"contention of the hRBMutex, so should be more scalable when using lots of"
" cores. And as work has been done during GDAL 2.0 to improve the "
"scalability, it might be prudent for now to remain on the array based "
"implementation on rasters of modest size."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:107
msgid ""
"Not completely linked with this RFC, a few changes have been done to "
"limit the number of allocation/deallocation of objects (GDALRasterBlock "
"instances, as well as an internal element of CPLHashSet), which has an "
"effect on scalability since memory allocation routines involve "
"synchronization between threads."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:116
msgid ""
"To implement the addition the following changes is made in the GDAL "
"codebase:"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:119
msgid ""
"port/cpl_hash_set.cpp / port/cpl_hash_set.h: CPLHashSetClear() function "
"added to remove all the elements in one operation."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:122
msgid ""
"port/cpl_hash_set.cpp / port/cpl_hash_set.h: "
"CPLHashSetRemoveDeferRehash() function added to remove one element "
"quickly. That is to say the potential resizing of the array used "
"internally is deferred to a later operation"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:127
msgid ""
"port/cpl_hash_set.cpp / port/cpl_hash_set.h: improvements to \"recycle\" "
"links from the linked lists and avoid useless malloc()/free()."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:131
msgid "port/cpl_atomic_ops.cpp: addition of CPLAtomicCompareAndExchange()"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:133
msgid ""
"gcore/gdal.h: additions of GDAL_OF_DEFAULT_BLOCK_ACCESS, "
"GDAL_OF_ARRAY_BLOCK_ACCESS and GDAL_OF_HASHSET_BLOCK_ACCESS values."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:136
msgid ""
"gcore/gdal_priv.h: definition of GDALAbstractBandBlockCache class, and "
"GDALArrayBandBlockCacheCreate() and GDALHashSetBandBlockCacheCreate() "
"functions. Modifications of GDALRasterBand, GDALDataset and "
"GDALRasterBlock definitions."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:141
msgid ""
"gcore/gdalrasterband.cpp: InitBlockInfo() instantiates the appropriate "
"band block cache implementation."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:144
msgid ""
"gcore/gdalrasterband.cpp: the AdoptBlock(), UnreferenceBlock(), "
"FlushBlock() and TryGetLockedBlockRef() methods delegate to the actual "
"band block cache implementation."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:148
msgid ""
"gcore/gdalrasterband.cpp: AddBlockToFreeList() is added and delegate to "
"GDALAbstractBandBlockCache"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:151
msgid "gcore/gdalrasterblock.cpp: SafeLockBlock() is replaced by TakeLock()"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:153
msgid ""
"gcore/gdalrasterblock.cpp: RecycleFor() method added to recycle an "
"existing block object to save a few new/delete calls (used by "
"GDALAbstractBandBlockCache::CreateBlock())"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:157
msgid ""
"gcore/gdalrasterblock.cpp: Internalize() or FlushCacheBlock() no longer "
"directly free a block (they still free or recycle its pData member), but "
"provide it to GDALRasterBand::AddBlockToFreeList() for layer reuse."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:162
msgid ""
"gcore/gdalrasterblock.cpp: DropLockForRemovalFromStorage() is added to "
"avoid racing destruction of blocks between GDALRasterBand::FlushCache() "
"or FlushBlock() with GDALRasterBlock::Internalize() or FlushCacheBlock()."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:167
msgid ""
"gcore/gdalabstractbandblockcache.cpp: added. Contains logic to keep "
"instantiated GDALRasterBlock that were discarded by the global block "
"manager for their later reuse. Saves a few new/delete calls."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:171
msgid ""
"gcore/gdalarraybandblockcache.cpp: the GDALArrayBandBlockCache class "
"implementation with mostly the existing code"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:174
msgid ""
"gcore/gdalhashsetbandblockcache.cpp: the new GDALHashsetBandBlockCache "
"class implementation"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:180
msgid ""
"This implementation retains the backward compatibility with the existing "
"API. The C++ ABI of GDALRasterBand, GDALDataset and GDALRasterBlock is "
"modified."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:185
msgid "Performance impacts"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:187
msgid ""
"The array based implementation after this RFC should still show the same "
"performance than the current implementation (potentially very slightly "
"improved with the recycling of blocks). Confirmed by tests with "
"autotest/cpp/testblockcache."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:195
msgid "This change doesn't affect the existing user documentation."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:200
msgid ""
"The autotest/cpp/testblockcache utility is now run by the \"quick_test\" "
"target of autotest/cpp/Makefile with GDAL_BAND_BLOCK_CACHE=HASHSET in "
"additions to the array based implementation."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:204
msgid ""
"A new autotest/cpp/testblockcachelimits utility has been developed to "
"test a few racing situations. As races are hard to trigger, the code of "
"GDALRasterBlock has been instrumented to allow sleeping in particular "
"places, enabling races to be reliably simulated."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:212
msgid ""
"Tamas Szekeres had provided an initial version of this RFC. It has been "
"restructured and ported on GDAL 2.0 by Even Rouault (sponsored by `LINZ "
"(Land Information New Zealand) <http://www.linz.govt.nz/>`__)"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:219
msgid ""
"The proposed implementation lies in the \"rfc26_bandblockcache\" branch "
"of the `https://github.com/rouault/gdal2/tree/rfc26_bandblockcache "
"<https://github.com/rouault/gdal2/tree/rfc26_bandblockcache>`__ "
"repository."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:224
msgid ""
"The list of changes: "
"`https://github.com/rouault/gdal2/compare/rfc26_bandblockcache "
"<https://github.com/rouault/gdal2/compare/rfc26_bandblockcache>`__"
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:227
msgid "Related bugs: #3264, #3224."
msgstr ""

#: ../../source/development/rfc/rfc26_blockcache.rst:232
msgid "+1 from EvenR, DanielM, TamasS. +0 from JukkaR"
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:5
msgid "RFC 27: Improved Supporting Data File Options"
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:16
msgid ""
"Currently GDAL depends on a variety of supporting data files from the "
"`gdal data <http://svn.osgeo.org/gdal/trunk/gdal/data>`__ directory. The "
"largest part of these are coordinate system dictionaries from EPSG and "
"other sources. It also includes S-57 dictionaries, seed DGN and DXF "
"files, and project logos. Uncompressed it currently comes to roughly "
"1.8MB and it is expected to grow as additional dictionaries are added "
"(for PCI and IAU coordinate systems for instance)."
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:24
msgid ""
"It has also been a frequent problem at run time to find the data files "
"when they are installed in unusual locations."
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:27
msgid ""
"This RFC aims to overhaul support file handling with two new major "
"features."
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:30
msgid ""
"The ability to read from compressed data files to reduce the disk "
"footprint of GDAL."
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:32
msgid ""
"The ability to embed the data files with the GDAL DLL or shared library "
"to remove the \"finding\" problem."
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:36
msgid "CPL CSV Access via VSI*L"
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:38
msgid ""
"The large majority of the support data file access is via the CPL CSV API"
" (gdal/port/cpl_csv.cpp). Finding support data files is done via "
"CPLFindFile(). It turns out these functions are still using the old VSI "
"API which does not support special handlers (like /vsizip/), or in at "
"least one case direct fopen() calls. So the first stage of this RFC is to"
" convert these functions to all use the VSI*L API. A `patch "
"<http://trac.osgeo.org/gdal/attachment/wiki/rfc27_supportdata/rfc27_csv_vsil.patch>`__"
" has been prepared that demonstrates the bulk of the required changes. "
"With this patch it is possible to access files from a GDAL_DATA setting "
"like /vsizip//home/warmerda/gdal/data/gdaldata.zip."
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:49
msgid ""
"Note that we are explicitly changing the contract about the nature of the"
" FILE\\* passed to functions like CSVReadParseLine() (real FILE\\* vs. "
"VSI\\ *L style FILE*). It is possible, though relatively unlikely that "
"application code, or private driver implementations will be using the SV "
"functions and will need to be changed. This change should be noted in the"
" GDAL 1.8 release notes."
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:56
msgid ""
"It is also unclear if there will be bad interactions with the cpl_csv "
"implementation embedded in libgeotiff in some situations, such as when "
"using libgeotiff as an external library. Some review will be needed."
msgstr ""

#: ../../source/development/rfc/rfc27_supportdata.rst:60
msgid ""
"Another point to investigate is what the performance impact of doing all "
"the file finding through the VSI*L API will be."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:5
msgid "RFC 28: OGR SQL Generalized Expressions"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:16
msgid ""
"The OGR SQL evaluation engine currently does not allow general purpose "
"functions to be applied to columns in SELECT statements. Some special "
"purpose functions are supported (ie. CAST, COUNT, AVG, MAX, MIN, and "
"SUM), but not as part of more general expressions and generally in very "
"constrained arrangements. It is the intent of this work item to extend "
"the OGR SQL engine to support fairly general purpose expression "
"evaluation in the output field list of OGR SQL SELECT statements and to "
"implement a few preliminary processing functions in a fashion compatible "
"with standard SQL. As well, expressions used in WHERE clauses will be "
"generalized to support evaluation of non-logical operations, such as math"
" and functions. For example, after implementation it is intended the "
"following could be evaluated."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:35
msgid ""
"A prototype implementation is now available for review in "
"`http://svn.osgeo.org/gdal/sandbox/warmerdam/gdal-rfc28 "
"<http://svn.osgeo.org/gdal/sandbox/warmerdam/gdal-rfc28>`__"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:39
msgid "Technical Approach"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:41
msgid ""
"Currently logical expressions take a very constrained format with the "
"base elements having to be of the form * <constant_value>*. As part of "
"the generalization non-logical expressions will be supported and the left"
" and right side of operators will be equally treated. The current OGR SQL"
" parser is ad hoc and cannot be practically extended to this generalized "
"form of expression. So at this point we will move to a yacc/bison based "
"parser grammar for expressions."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:49
msgid ""
"Since it is not really practical to continue to use the existing ad hoc "
"SELECT parsing when parts of the SELECT statement are expressions, the "
"yacc/bison based parser will also be used to parse the whole SELECT "
"statement."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:54
msgid ""
"The current expression node will be generalized to have 0-n children (for"
" arguments to functions), and to treat field references and constant "
"values as distinct leaf nodes rather than embedding this information in a"
" node defining an operation."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:59
msgid ""
"It should be noted that as a side effect WHERE clauses will also support "
"more general expressions - not just logical comparisons. For instance:"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:62
msgid "SELECT \\* WHERE (subtotal+salestax) > 100.0"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:65
msgid "New Functions"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:67
msgid "Math: +, -, \\*, /, \\*\\*"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:68
msgid "String: CONCAT, SUBSTR"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:71
msgid "SELECT Rules"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:120
msgid "Special Notes"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:122
msgid ""
"The existing CAST, and column summary functions COUNT, AVG, MIN, MAX and "
"SUM will be treated more-or-less as functions but constrained to be root "
"operations on column definitions and treated as a special case (still)."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:127
msgid "Compatibility Implications"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:129
msgid ""
"Some identifiers that were previously allowed as unquoted field names "
"will likely now have to be quoted as they will be keywords in the "
"grammar. The keyword set is:"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:133
msgid "IN"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:134
msgid "LIKE"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:135
msgid "NULL"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:136
msgid "IS"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:137
msgid "SELECT"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:138
msgid "LEFT"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:139
msgid "JOIN"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:140
msgid "WHERE"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:141
msgid "ON"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:142
msgid "ORDER"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:143
msgid "BY"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:144
msgid "FROM"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:145
msgid "AS"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:146
msgid "ASC"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:147
msgid "DESC"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:148
msgid "DISTINCT"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:149
msgid "CAST"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:151
msgid ""
"The previous implementation was written in C and avoided all use of "
"GDAL/OGR services so that it could be easily used in other contexts, "
"including as the where clause evaluator of the OGDI library. After this "
"update the code is C++, and direct use of CPL error and other services "
"has been directly incorporated. This means the implementation used by "
"GDAL and OGDI will diverge."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:158
msgid ""
"For the most part the change results in some OGR SQL statements to work "
"that would previously have generated an error."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:162
msgid "Performance Implications"
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:164
msgid ""
"I am hopeful that the evaluation speed will not be significantly "
"different for simple selections, but each output field will need to be "
"evaluated as an expression (with presumably one value-from-field node)."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:171
msgid ""
"Frank Warmerdam will implement, test and document for the GDAL/OGR 1.8 "
"release."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:177
msgid ""
"All existing OGR SQL test suite tests should pass. A new "
"autotest/ogr/ogr_sql_rfc28.py script will be introduced to test new "
"functionality."
msgstr ""

#: ../../source/development/rfc/rfc28_sqlfunc.rst:184
msgid ""
"The :ref:`OGR SQL <ogr_sql_dialect>` document will be extended to "
"describe the new capabilities."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:5
msgid "RFC 29: OGR Set Ignored Fields"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:7
msgid "Author: Martin Dobias"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:9
msgid "Contact: wonder.sk@gmail.com"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:16
msgid ""
"To improve performance when fetching features, this RFC proposes a way "
"how to tell OGR which fields are not going to be required in subsequent "
"GetFeature() / GetNextFeature() calls. Such fields will be ignored by the"
" driver and their value will be kept null. The RFC counts also with the "
"possibility to ignore feature geometry and style."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:22
msgid "Common use cases:"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:24
msgid ""
"the client renders the layer: all (or most) fields can be ignored, only "
"the geometry is required"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:27
msgid ""
"the client shows attribute table: all fields are required, the geometry "
"can be ignored"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:33
msgid ""
"A new function will be added to OGRLayer class to allow the client to set"
" which fields will *not* be fetched:"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:40
msgid "and an equivalent call for C API:"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:46
msgid ""
"The argument is a list of fields to be ignored, by name, and the special "
"field names \"OGR_GEOMETRY\" and \"OGR_STYLE\" will be interpreted to "
"refer to the geometry and style values of a feature."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:50
msgid ""
"Passing by field name has been chosen so that we could handle "
"OGR_GEOMETRY, OGR_STYLE and possibly some other special fields in the "
"future. Instead of specifying \"desired\" fields, it has been decided to "
"specify \"ignored\" fields so that we wouldn't accidentally drop things "
"like geometry and style just because they weren't explicitly listed in a "
"desired list."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:57
msgid "Passing NULL for papszFields will clear the ignored list."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:59
msgid ""
"The method will return OGRERR_NONE as long as all the field names are "
"able to be resolved, even if the method does not support selection of "
"fields."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:63
msgid ""
"The drivers supporting this method will return TRUE to OLCIgnoreFields "
"(\"IgnoreFields\") capability."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:66
msgid ""
"The method will be implemented at the level of OGRLayer class: it will "
"resolve indexes of the fields and set the following new member variables "
"which indicate what should be ignored. The flags will be stored within "
"OGRFeatureDefn and OGRFieldDefn classes and available with these getter "
"functions:"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:78
msgid ""
"The getter member functions will be complemented by setter functions for "
"use by OGRLayer. Setting the \"ignored\" flags directly by clients will "
"be forbidden."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:82
msgid ""
"Optionally the method ``SetIgnoredFields()`` can be overridden in driver "
"implementation if the driver has some special needs."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:86
msgid "Implementation in drivers"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:88
msgid ""
"The implementation of drivers will require small adjustments in order to "
"support this RFC. Drivers not making use of this addition will simply "
"continue to fetch also fields/geometry/style that are not requested by "
"the caller."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:93
msgid "The adjustments in driver implementation will look as follows:"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:117
msgid ""
"This change is fully backwards compatible: OGR will continue to fetch "
"geometry, style and all fields by default. Only applications using the "
"proposed API will experience the new behavior."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:121
msgid ""
"Initially, only some drivers (Shapefile and few others) will implement "
"this RFC. There is no need to modify all existing drivers when adopting "
"the RFC - drivers that do not consider the ignored fields will simply "
"fetch all attributes as before. To check whether a driver supports this "
"RFC, OLCIgnoreFields capability can be checked."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:127
msgid ""
"ogr2ogr command line tool will make use of this RFC in cases it receives "
"-select argument with a list of required fields. Other than the specified"
" fields will be ignored."
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:136
msgid "Daniel Morissette +0"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:137
#: ../../source/development/rfc/rfc6_sqlgeom.rst:469
msgid "Howard Butler +0"
msgstr ""

#: ../../source/development/rfc/rfc29_desired_fields.rst:138
msgid "Even Rouault +0"
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:5
msgid "RFC 2: Migration to OSGeo Subversion Repository"
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:16
msgid ""
"It is proposed that the GDAL source tree be moved a subversion repository"
" in such a manner as to preserve the history existing in the CVS "
"repository. A 1.3.x branch will be created after automatic updating of "
"the header format."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:24
msgid "The conversion will be done by Howard Butler using the cvs2svn tool."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:25
msgid ""
"At least 24 hours notice will be provided before the transition starts to"
" allow committers to commit any outstanding work that is ready to into "
"the repository."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:28
msgid ""
"When the conversion starts, the GDAL (and gdalautotest) trees will be "
"removed from cvs.maptools.org, and archived to avoid any confusion."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:30
msgid ""
"Frank Warmerdam will modify the \"daily cvs snapshot\" capability to work"
" from SVN."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:32
msgid ""
"Frank will be responsible for updating the source control information in "
"the documentation."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:34
msgid ""
"All source files in SVN will have the svn:keywords property set to \"Id\""
" by Frank after they are created."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:36
msgid ""
"Committers will need to get a login on osgeo.org and notify Frank to "
"regain commit access. Committer access on the new repository will be "
"enabled after the above changes are all complete."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:39
msgid ""
"The GDAL committers document should be updated, removing non-GDAL "
"committers (ie. libtiff, geotiff, etc)."
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:43
msgid "Header Format"
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:45
msgid ""
"SVN does not support history insertion in source files, and to keep the "
"old history listings around without keeping them up to date would be very"
" confusing. So it is proposed that Frank Warmerdam write a script to "
"strip the history logs out. Changing this:"
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:75
msgid "to this:"
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:98
msgid "Branch for 1.3"
msgstr ""

#: ../../source/development/rfc/rfc2_svn.rst:100
msgid ""
"Once the headers have been updated appropriately, a 1.3 branch will be "
"established in subversion. The intent is that further 1.3.x releases "
"would be made against this \"stable branch\" while trunk work is towards "
"a 1.4.0 release targeted for around the time of the OSGeo conference."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:5
msgid "RFC 30: Unicode Filenames"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:16
msgid ""
"This document describes steps to generally handle filenames as UTF-8 "
"strings in GDAL/OGR. In brief it will be assumed that filenames passed "
"into and returned by GDAL/OGR interfaces are UTF-8. On some operating "
"systems, notably Windows, this will require use of \"wide character\" "
"interfaces in the low level VSI*L API."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:23
msgid "Key Interfaces"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:26
msgid "VSI*L API"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:28
msgid ""
"All filenames in the VSI*L API will be treated as UTF-8, which means the "
"cpl_vsil_win32.cpp implementation will need substantial updates to use "
"wide character interfaces."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:32
msgid "VSIFOpenL()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:33
msgid "VSIFStatL()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:34
msgid "VSIReadDir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:35
msgid "VSIMkdir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:36
msgid "VSIRmdir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:37
msgid "VSIUnlink()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:38
msgid "VSIRename()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:41
msgid "Old (small file) VSI API"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:43
msgid ""
"The old VSIFOpen() function will be adapted to use \\_wfopen() on windows"
" instead of fopen() so that utf-8 filenames will be supported."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:46
msgid "VSIFOpen()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:47
msgid "VSIStat()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:50
msgid "Filename Parsing"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:52
msgid ""
"Because the path/extension delimiter characters '.', '', '/' and ':' will"
" never appear in the non-ascii portion of utf-8 strings we can safely "
"leave the existing path parsing functions working as they do now. They do"
" not need to be aware of the real character boundaries for exotic "
"characters in utf-8 paths. The following will be left unchanged."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:58
msgid "CPLGetPath()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:59
msgid "CPLGetDirname()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:60
msgid "CPLGetFilename()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:61
msgid "CPLGetBasename()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:62
msgid "CPLGetExtension()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:63
msgid "CPLResetExtension()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:66
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:506
msgid "Other"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:68
msgid "CPLStat()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:69
msgid "CPLGetCurrentDir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:70
msgid "GDALDataset::GetFileList()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:72
msgid "These will all also need to treat filenames as utf-8."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:75
msgid "Windows"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:77
msgid ""
"Currently Windows's cpl_vsil_win32.cpp module uses CreateFile() with "
"ascii filenames. It needs to be converted to use CreateFileW() and other "
"wide character functions for stat(), rename, mkdir, etc. Prototype "
"implementation already developed (r20620)."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:85
msgid "Linux / Unix / MacOS X"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:87
msgid ""
"On modern linux, unix and MacOS operating systems the fopen(), stat(), "
"readdir() functions already support UTF-8 strings. It is not currently "
"anticipated that any work will be needed on Linux/Unix/MacOS X though "
"there is some question about this. It is considered permissible under the"
" definition of this RFC for old, and substandard operating systems "
"(WinCE?) to support only ASCII, not UTF-8 filenames."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:95
msgid "Metadata"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:97
msgid ""
"There are a variety of places where general text may contain filenames. "
"One obvious case is the subdataset filenames returned from the SUBDATASET"
" domain. Previously these were just exposed as plain text and "
"interpretation of the character set was undefined. As part of this RFC we"
" state that such filenames should be considered to be in utf-8 format."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:104
msgid "Python Changes"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:106
msgid ""
"I observe with Python 2.6 that functions like gdal.Open() do not accept "
"unicode strings, but they do accept utf-8 string objects. One possible "
"solution is to update the bindings in selective places to identify "
"unicode strings passed in, and transform them to utf-8 strings."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:111
#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:87
msgid "eg."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:119
msgid ""
"I'm not sure what the easiest way is to accomplish this in the bindings. "
"The key entries are:"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:122
msgid "gdal.Open()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:123
msgid "ogr.Open()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:124
msgid "gdal.ReadDir()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:125
msgid "gdal.PushFinderLocation()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:126
msgid "gdal.FindFile()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:127
msgid "gdal.Unlink()"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:129
msgid ""
"Similarly all interfaces (ie. gdal.ReadDir()) that return filenames will "
"hereafter return unicode objects rather than string objects."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:132
msgid "Also note that in Python 3.x strings are always unicode."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:135
msgid "C# Changes"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:137
msgid ""
"Tamas notes that in C# we normally convert the unicode C# strings into C "
"string with the PtrToStringAnsi marshaller. Presumably we will need to "
"use a utf-8 converter for all interface strings considered to be "
"filenames. I would note this should also apploy to OGR string attribute "
"values which are also intended to be treated as utf-8."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:143
msgid ""
"(It is unclear who will take care of this aspect since the primary author"
" (FrankW) is not C#-binding-competent."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:147
msgid "Perl Changes"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:149
msgid ""
"The general rule in Perl is that all strings should be decoded before "
"giving them to Perl and encoded when they are output. In practice things "
"usually just work. To be sure, I (Ari) have added an explicit decode from"
" utf8 to FindFile and ReadDir (#20800)."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:155
msgid "Java Changes"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:157
msgid ""
"No changes are needed for Java. Java strings are unicode, and they are "
"already converted to utf-8 in the java swig bindings. That is, the java "
"bindings already assumed passing and receiving utf-8 strings to/from "
"GDAL/OGR."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:163
msgid "Commandline Issues"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:165
msgid ""
"On windows argv[] as passed into main() will not generally be able to "
"represent exotic filenames that can't be represented in the locale "
"charset. It is possible to fetch the commandline and parse it as wide "
"characters using GetCommandLineW() and CommandLinetoArgvW() to capture "
"ucs-16 filenames (easily converted to utf-8); however, this interferes "
"with the use of setargv.obj to expand wildcards on windows."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:172
msgid ""
"I have not been able to come up with a good solution, so for now I am not"
" intending to make any changes to the GDAL/OGR commandline utilities to "
"allow passing exotic filenames. So this RFC is mainly aimed at ensuring "
"that other applications using GDAL/OGR can utilize exotic filenames."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:179
#: ../../source/development/rfc/rfc31_ogr_64.rst:201
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:388
msgid "File Formats"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:181
msgid ""
"The proposed implementation really only addresses file format drivers "
"that use VSIFOpenL(), VSIFOpen() and related functions. Some drivers "
"dependent on external libraries (ie. netcdf) do not have a way to hook "
"the file IO API and may not support utf-8 filenames. It might be nice to "
"be able to distinguish these."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:187
msgid ""
"At the very least any driver marked with GDAL_DCAP_VIRTUALIO as \"YES\" "
"will support UTF-8. Perhaps this opportunity ought to be used to more "
"uniformly apply this driver metadata (done)."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:192
#: ../../source/development/rfc/rfc31_ogr_64.rst:295
#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:102
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:109
#: ../../source/development/rfc/rfc34_license_policy.rst:222
#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:269
#: ../../source/development/rfc/rfc45_virtualmem.rst:1249
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:435
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:541
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:73
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:89
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:742
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:161
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:269
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:344
#: ../../source/development/rfc/rfc62_raster_algebra.rst:123
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:268
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:74
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:255
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:159
msgid "Test Suite"
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:194
msgid ""
"We will need to introduce some test suite tests with multibyte utf-8 "
"filenames. In support of that aspects of the VSI*L API - particularly the"
" rename, mkdir, rmdir, functions and VSIFOpenL itself have been exposed "
"in python."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:202
msgid ""
"Appropriate API entry points will be documented as taking and return "
"UTF-8 strings."
msgstr ""

#: ../../source/development/rfc/rfc30_utf8_filenames.rst:208
msgid "Implementation is underway and being tracked in ticket #3766."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:5
msgid "RFC 31: OGR 64bit Integer Fields and FIDs"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:7
msgid "Authors: Frank Warmerdam, Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:9
msgid "Contact: warmerdam@pobox.com, even dot rouault at spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:11
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:11
#: ../../source/development/rfc/rfc49_curve_geometries.rst:11
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:11
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:11
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:11
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:11
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:11
msgid "Status: Adopted, implemented in GDAL 2.0"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:16
msgid ""
"This RFC addresses steps to upgrade OGR to support 64bit integer fields "
"and feature ids. Many feature data formats support wide integers, and the"
" inability to transform these through OGR causes increasing numbers of "
"problems."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:24
msgid "64bit FID, feature index and feature count"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:26
msgid ""
"Feature id's will be handled as type \"GIntBig\" instead of \"long\" "
"internally. This will include the nFID field of the OGRFeature. The "
"existing GetFID() and SetFID() methods on the OGRFeature use type long "
"and are changed to return (respectively accept) GIntBig instead. The "
"change of return type for GetFID() will require application code to "
"carefully adapt to avoid potential issues (for example if GetFID() is "
"used in printf-like expression). SetFID() change should be mostly "
"transparent. So the changes in the OGRFeature class are:"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:40
msgid "At the C API level:"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:47
msgid ""
"Note that the old interfaces using \"long\" are already 64bit on 64bit "
"operating systems (excluding Windows target compilers where long is 32bit"
" even on 64bit builds), so there is little harm to applications "
"continuing to use these interfaces on 64bit operating systems."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:52
msgid ""
"A layer that can discover in a relatively cheap way that it holds "
"features with 64bit FID should advertise the OLMD_FID64 metadata item to "
"\"YES\", so ogr2ogr can pass the FID64 creation option to drivers that "
"support it."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:57
msgid ""
"The OGRLayer class allows several operations based on the FID. The "
"signature of these will be *altered* to accept GIntBig instead of long. "
"In theory this should not require any changes to application code since "
"long can be converted to GIntBig losslessly. However, all existing OGR "
"drivers require changes, including private drivers. This will also result"
" in a backwards incompatible change in the C ABI. While we are at it, we "
"want GetFeatureCount() to be able to return more than 2 billion record "
"(currently returning 32 bit integer), and thus it will return GIntBig. "
"Similarly to GetFID(), this change of return type will require caution in"
" application code."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:68
msgid "So at the OGRLayer C++ class level:"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:77
msgid "At the C API level :"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:89
msgid "64bit Fields"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:91
msgid "New field types will be introduced for 64bit integers:"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:98
msgid "The OGRField union will be extended to include:"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:108
msgid "The OGRFeature class will be extended with these new methods:"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:124
msgid "At the C level, the following functions are added :"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:133
msgid ""
"Furthermore, the new interfaces will internally support setting/getting "
"integer fields, and the integer field methods will support "
"getting/setting 64bit integer fields so that one case can be used for "
"both field types where convenient (except GetFieldAsInteger64List() that "
"can only operate on Integer64List fields)"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:139
msgid ""
"A GDAL_DMD_CREATIONFIELDDATATYPES = \"DMD_CREATIONFIELDDATATYPES\" driver"
" metadata item is added so as drivers to be able to declare the field "
"types they support on creation. For example \"Integer Integer64 Real "
"String Date DateTime Time IntegerList Integer64List RealList StringList "
"Binary\". Commonly used drivers will be updated to declare it."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:146
#: ../../source/development/rfc/rfc31_ogr_64.rst:302
msgid "OGR SQL"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:148
msgid ""
"A SWQ_INTEGER64 internal type is added so as to be able to map/from "
"OFTInteger64 fields. The int_value member of the swq_expr_node class is "
"extended from int to GIntBig (so both SWQ_INTEGER and SWQ_INTEGER64 refer"
" to that member)."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:156
msgid "Python / Java / C# / perl Changes"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:158
msgid "The following changes have been done :"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:160
msgid "GetFID(), GetFeatureCount() have been changed to return a 64 bit integer"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:162
msgid ""
"SetFID(), GetFeature(), DeleteFeature(), SetNextByIndex() have been "
"changed to accept a 64 bit integer as argument"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:164
msgid "GetFieldAsInteger64() and SetFieldInteger64() have been added"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:165
msgid "In Python, GetField(), SetField() can accept/return 64 bit values"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:166
msgid ""
"GetFieldAsInteger64List() and SetFieldInteger64List() have been added "
"(Python only, due to lack of relevant typemaps for other languages, but "
"could potentially be done)"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:170
msgid ""
"The change in return type of GetFID() and GetFeatureCount() might cause "
"warnings at compilation time in some languages (Java YES, Python not "
"relevant, Perl/C# ?). All changes to existing methods will are an ABI "
"change for Java bytecode."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:178
msgid "ogr2ogr and ogrinfo are updated to support the new 64bit interfaces."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:180
msgid ""
"A new option is added to ogr2ogr : -mapFieldType. Can be used like this "
"-mapFieldType Integer64=Integer,Date=String to mean that Integer64 field "
"in the source layer should be created as Integer, and Date as String. "
"ogr2ogr will also warn if attempting to create a field in an output "
"driver that advertizes a GDAL_DMD_CREATIONFIELDDATATYPES metadata item "
"that does not mention the required field type. For Integer64 fields, if "
"it is not advertized in GDAL_DMD_CREATIONFIELDDATATYPES metadata item or "
"GDAL_DMD_CREATIONFIELDDATATYPES is missing, conversion to Real is done by"
" default with a warning. ogr2ogr will also query the source layer to "
"check if the OLMD_FID64 metadata item is declared and if the output "
"driver has the FID64 layer creation option. In which case it will set it."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:196
msgid ""
"New/modified API are documented. Updates in drivers with new "
"options/behaviours are documented. MIGRATION_GUIDE.TXT extended with a "
"section related to this RFC. OGR API updated."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:203
msgid ""
"As appropriate, existing OGR drivers have been updated to support the "
"new/updated interfaces. In particular an effort has been made to update a"
" few database drivers to support 64bit integer columns for use as feature"
" id, though they don't always create FID columns as 64bit by default when"
" creating new layers as this may cause problems for other applications."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:210
msgid ""
"Apart from the mechanical changes due to interface changes, the detailed "
"list of changes is :"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:213
msgid ""
"Shapefile: OFTInteger fields are created by default with a width of 9 "
"characters, so to be unambiguously read as OFTInteger (and if specifying "
"integer that require 10 or 11 characters. the field is dynamically "
"extended like managed since a few versions). OFTInteger64 fields are "
"created by default with a width of 18 digits, so to be unambiguously read"
" as OFTInteger64, and extended to 19 or 20 if needed. Integer fields of "
"width between 10 and 18 will be read as OFTInteger64. Above they will be "
"treated as OFTReal. In previous GDAL versions, Integer fields were "
"created with a default with of 10, and thus will be now read as "
"OFTInteger64. An open option, DETECT_TYPE=YES, can be specified so as OGR"
" does a full scan of the DBF file to see if integer fields of size 10 or "
"11 hold 32 bit or 64 bit values and adjust the type accordingly (and same"
" for integer fields of size 19 or 20, in case of overflow of 64 bit "
"integer, OFTReal is chosen)"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:228
msgid ""
"PG: updated to read and create OFTInteger64 as INT8 and OFTInteger64List "
"as bigint[]. 64 bit FIDs are supported. By default, on layer creation, "
"the FID field is created as a SERIAL (32 bit integer) to avoid "
"compatibility issues. The FID64=YES creation option can be passed to "
"create it as a BIGSERIAL instead. If needed, the drivers will dynamically"
" alter the schema to extend a 32 bit integer FID field to 64 bit. "
"GetFeatureCount() modified to return 64 bit values. OLMD_FID64 = \"YES\" "
"advertized as soon as the FID column is 64 bit."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:237
msgid ""
"PGDump: Integer64, Integer64List and 64 bit FID supported in read/write. "
"FID64=YES creation option available."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:239
msgid ""
"GeoJSON: Integer64, Integer64List and 64 bit FID supported in read/write."
" The 64 bit variants are reported only if needed, otherwise "
"OFTInteger/OFTIntegerList is used. OLMD_FID64 = \"YES\" advertized if "
"needed"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:243
msgid ""
"CSV: Integer64 supported in read/write, including the autodetection "
"feature of field types."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:245
msgid ""
"GPKG: Integer64 and 64 bit FID supported in read/write. Conforming with "
"the GeoPackage spec, \"INT\" or \"INTEGER\" columns are considered 64 "
"bits, whereas \"MEDIUMINT\" is considered 32 bit. OLMD_FID64 = \"YES\" "
"advertized as soon as MAX(fid_column) is 64 bit. GetFeatureCount() "
"modified to return 64 bit values."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:250
msgid ""
"SQLite: Integer64 and 64 bit FID supported in read/write. On write, "
"Integer64 are createad as \"BIGINT\" and on read BIGINT or INT8 are "
"considered as Integer64. However it might be possible that databases "
"produced by other tools are created with \"INTEGER\" and hold 64 bit "
"values, in which case OGR will not be able to detect it. The "
"OGR_PROMOTE_TO_INTEGER64=YES configuration option can then be passed to "
"workaround that issue. OLMD_FID64 = \"YES\" advertized as soon as "
"MAX(fid_column) is 64 bit. GetFeatureCount() modified to return 64 bit "
"values."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:259
msgid ""
"MySQL: Integer64 and 64 bit FID supported in read/write. Similarly to PG,"
" FID column is created as 32 bit by default, unless FID64=YES creation "
"option is specified. OLMD_FID64 = \"YES\" advertized as soon as the FID "
"column is 64 bit. GetFeatureCount() modified to return 64 bit values."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:264
msgid ""
"OCI: Integer64 and 64 bit FID supported in read/write. Detecting "
"Integer/Integer64 on read is tricky since there's only a NUMBER SQL type "
"with a field width. It is assumed that if the width is <= 9 or if it is "
"the unspecified value (38), then it is a Integer. On creation, OGR will "
"set a width of 20 for OFTInteger64, so a NUMBER without decimal part and "
"with a width of 20 will be considered as a Integer64."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:271
msgid ""
"MEM: Integer64 and 64 bit FID supported in read/write. GetFeatureCount() "
"modified to return 64 bit values."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:273
msgid ""
"VRT: Integer64, Integer64List and 64 bit FID supported in read/write. "
"GetFeatureCount() modified to return 64 bit values."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:275
msgid ""
"JML: Integer64 supported on creation (created as \"OBJECT\"). On read, "
"returned as String"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:277
msgid ""
"GML: Integer64, Integer64List and 64 bit FID supported in read/write. "
"GetFeatureCount() modified to return 64 bit values."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:279
msgid ""
"WFS: Integer64, Integer64List and 64 bit FID supported in read/write. "
"GetFeatureCount() modified to return 64 bit values."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:281
msgid ""
"CartoDB: Integer64 supported on creation. On read returned as Real "
"(CartoDB only advertizes a 'Number' type). GetFeatureCount() modified to "
"return 64 bit values."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:284
msgid "XLSX: Integer64 supported in read/write."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:285
msgid "ODS: Integer64 supported in read/write."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:286
msgid ""
"MSSQLSpatial: GetFeatureCount() modified to return 64 bit values. No "
"Integer64 support implemented although could likely be done."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:288
msgid "OSM: FID is now always set even when sizeof(long) != 8"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:289
msgid "LIBKML: KML 'uint' advertized as Integer64."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:290
msgid ""
"MITAB: Change the way FID of Seamless tables are generated to make it "
"more robust and accept arbitrary number of index tables made of an "
"arbitrary number of features, by using full 64bit width of IDs"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:297
msgid "The test suite is extended to test the new capabilities:"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:299
msgid "core SetField/GetField methods"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:300
msgid ""
"updated drivers: Shapefile, PG, GeoJSON, CSV, GPKG, SQLite, MySQL, VRT, "
"GML, XLSX, ODS, MITAB"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:303
msgid "option -mapFieldType of ogr2ogr"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:309
msgid "Driver Code Changes"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:311
msgid ""
"All drivers implementing SetNextByIndex(), DeleteFeature(), GetFeature(),"
" GetFeatureCount() will need to change their prototype and do modest "
"changes."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:315
msgid ""
"Drivers supporting CreateField() likely ought to be extended to support "
"OFTInteger64 as an integer/real/string field if nothing else is available"
" (and if bApproxOK is TRUE). ogr2ogr will convert Integer64 to Real if "
"Integer64 support is not advertized"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:320
msgid ""
"Drivers reporting FIDs via Debug statements, printf's or using sprintfs "
"like statements to format them for output have been updated to use "
"CPL_FRMT_GIB to format the FID. Failure to make these changes may result "
"in code crashing. Due to the use of GCC annotation to advertise "
"printf()-like formatting syntax in CPL functions, we are reasonably "
"confident to have done the required changes in in-tree drivers (except in"
" some proprietary drivers, like SDE, IDB, INGRES, ArcObjects, where this "
"couldn't be compiled-checked). The same holds true for GetFeatureCount()"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:331
msgid "Application Code"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:333
msgid ""
"Application code may need to be updated to use GIntBig for FIDs and "
"feature count in order to avoid warnings about downcasting."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:336
msgid ""
"Application code formatting FIDs or feature count using printf like "
"facilities may also need to be changed to downcast explicitly or to use "
"CPL_FRMT_GIB."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:340
msgid ""
"Application code may need to add Integer64 handling in order to utilize "
"wide fields."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:344
msgid "Behavioral Changes"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:346
msgid ""
"Wide integer fields that were previously treated as \"real\" or Integer "
"by the shapefile driver will now be treated as Integer64 which will "
"likely not work with some applications, and translation to other formats "
"may fail."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:352
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:580
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:388
#: ../../source/development/rfc/rfc62_raster_algebra.rst:131
msgid "Related tickets"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:354
msgid ""
"`#3747 OGR FID needs to be 64 bit "
"<http://trac.osgeo.org/gdal/ticket/3747>`__"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:356
msgid ""
"`#3615 Shapefile : A 10-digit value doesn't necessarily fit into a 32 bit"
" integer. <http://trac.osgeo.org/gdal/ticket/3615>`__"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:358
msgid ""
"`#3150 Precision Problem for Numeric on OGR/OCI driver "
"<http://trac.osgeo.org/gdal/ticket/3150>`__"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:362
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:465
msgid "Related topics out of scope of this RFC"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:364
msgid ""
"The possibility of having a Numeric type that corresponds to the matching"
" SQL type, i.e. a decimal number with an arbitrary number of significant "
"figures has been considered. In OGR, this could be implemented as a full "
"type like Integer, Integer64 etc., or possibly as a subtype of String "
"(see `RFC 50: OGR field subtypes <./rfc50_ogr_field_subtype>`__). The "
"latter approach would be easier to implement and mostly useful for "
"lossless conversion between database drivers (and shapefile). The former "
"approach would require more work, and would ideally involve OGR SQL "
"support, which would require supporting arithmetic of arbitrary length. "
"The use cases for such a numeric type have been considered marginal "
"enough to let that aside for now."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:380
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:502
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:592
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:87
msgid ""
"Implementation will be done by Even Rouault (`Spatialys "
"<http://spatialys.com>`__), and sponsored by `LINZ (Land Information New "
"Zealand) <http://www.linz.govt.nz/>`__."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:384
msgid ""
"The proposed implementation lies in the \"rfc31_64bit\" branch of the "
"`https://github.com/rouault/gdal2/tree/rfc31_64bit "
"<https://github.com/rouault/gdal2/tree/rfc31_64bit>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:388
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/rfc31_64bit "
"<https://github.com/rouault/gdal2/compare/rfc31_64bit>`__"
msgstr ""

#: ../../source/development/rfc/rfc31_ogr_64.rst:394
msgid "+1 from JukkaR, DanielM, TamasS, HowardB and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:5
msgid "RFC 32: gdallocationinfo utility"
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:16
msgid ""
"This document proposes the addition of a new standard commandline utility"
" for GDAL to report details about a location (pixel) in a raster."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:20
#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:23
#: ../../source/development/rfc/rfc34_license_policy.rst:41
#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:21
#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:21
#: ../../source/development/rfc/rfc45_virtualmem.rst:21
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:24
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:21
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:24
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:24
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:23
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:22
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:22
#: ../../source/development/rfc/rfc62_raster_algebra.rst:29
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:23
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:25
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:22
msgid "Rationale"
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:22
msgid ""
"A user has a use case where they would like to be able to identify the "
"VRT file used to satisfy requests for a particular pixel / location."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:26
msgid ""
"Many users have requested a tool to find the value of a location, often "
"expressed in a coordinate system different than that of the image. For "
"instance, \"what is the elevation at a given lat/long location?\"."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:31
msgid ""
"The gdallocationinfo utility is intended to address both sorts of "
"requests, and hopefully in a way that will have some general value as a "
"\"raster point query\" tool."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:36
msgid "gdallocationinfo"
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:38
msgid "Full docs are available at :ref:`gdallocationinfo`"
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:46
msgid ""
"The key aspects of the utility are control over the coordinate system of "
"the location (-s_srs, -geoloc, -wgs84) and various controls over the "
"output format (-xml, -lifonly, -valonly). An example of full output in "
"xml might be:"
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:64
msgid "LocationInfo Metadata Domain"
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:66
msgid ""
"The pixel values and location transformation logic is all built into "
"gdallocationinfo and doesn't require much elaboration. The more exotic "
"portion is reporting of \"LocationInfo\" queried from the datasource."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:70
msgid ""
"For our immediate needs the requirement is to have the "
"VRTSourcedRasterBand return information on the file(s) overlapping the "
"target pixel. But, in theory different drivers might return different "
"sorts of information about a location. For instance, a WMS driver might "
"issue a GetFeatureInfo for the location and return the result."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:76
msgid ""
"The mechanism to query the datasource is a specially named "
"GetMetadataItem() request against the \"LocationInfo\" domain of the "
"target band(s). The following requested item name is of the form "
"\"Pixel_x_y\" where x and y are the pixel and line of the pixel being "
"queried."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:82
msgid ""
"The returned value from this item should either be NULL, or an XML "
"documented with the root element \"\". The contents of the document are "
"otherwise undefined as long as they are well formed XML. The VRT driver "
"returns a series of xxx entries for each of the files at that location."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:93
msgid "might return:"
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:104
msgid ""
"A test will be introduced in the gdal utilities suite, and the "
"gdrivers/vrt.py script for the utility and VRT behavior respectively."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:110
msgid ""
"Documentation for the utility has already been prepared and is referenced"
" above."
msgstr ""

#: ../../source/development/rfc/rfc32_gdallocationinfo.rst:116
msgid ""
"Implementation is already complete, and in trunk. Adjustments can be made"
" by Frank Warmerdam as needed due to RFC revisions."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:5
msgid "RFC 33: GTiff - Fixing PixelIsPoint Interpretation"
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:16
msgid ""
"This document proposes changes in the GDAL GTiff (GeoTIFF) driver's "
"interpretation of PixelIsPoint when constructing the geotransform and "
"interpreting control points. An RFC is used due to the fundamental role "
"of GeoTIFF in GDAL and the GDAL user community and the risk for "
"significant backward compatibility problems with this adjustment."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:25
msgid ""
"The GeoTIFF specification includes a data item, GTRasterTypeGeoKey, which"
" may be set to either RasterPixelIsArea (the default), or "
"RasterPixelIsPoint. RasterPixelIsArea defines that a pixel represents an "
"area in the real world, while RasterPixelIsPoint defines a pixel to "
"represent a point in the real world. Often this is useful to distinguish "
"the behavior of optical sensors that average light values over an area "
"vs. raster data which is point oriented like an elevation sample at a "
"point."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:34
msgid ""
"Traditionally GDAL has treated this flag as having no relevance to the "
"georeferencing of the image despite disputes from a variety of other "
"software developers and data producers. This was based on the authors "
"interpretation of something said once by the GeoTIFF author. However, a "
"recent review of section [`section 2.5.2.2 "
"<http://www.remotesensing.org/geotiff/spec/geotiff2.5.html#2.5.2.2>`__] "
"of the GeoTIFF specificaiton has made it clear that GDAL behavior is "
"incorrect and that PixelIsPoint georeferencing needs to be offset by a "
"half a pixel when transformed to the GDAL georeferencing model. This "
"issue is documented in the following tickets including #3837, #3838, ...."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:46
msgid ""
"This RFC attempts to manage this transition with a minimum of disruption "
"for the users of GDAL/OGR."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:50
#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:35
#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:50
msgid "Planned Changes"
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:52
msgid ""
"Interpretation of the raster space from the GeoTIFF tie points will be "
"offset by half a pixel in the PixelIsPoint case in "
"gdal/frmts/gtiff/geotiff.cpp. This will impact the formation of the "
"geotransform and the formation of GCPs when there are multiple tie "
"points. geotransmatrix conversion to geotransform will also be affected."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:58
msgid ""
"Conversely if writing files with PixelIsPoint (as driven by the "
"\"AREA_OR_POINT\" metadata item being set to \"POINT\") the written "
"raster space coordinates would be offset by half a pixel."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:62
msgid ""
"In trunk the above behavior may be disabled by setting the "
"GTIFF_POINT_GEO_IGNORE configuration option to TRUE (it will default to "
"FALSE)."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:66
msgid ""
"In GDAL 1.7 and 1.6 branch the same changes will be applied, except the "
"GTIFF_POINT_GEO_IGNORE configuration option will default to TRUE."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:72
msgid ""
"This change will alter the apparent georeferencing of all GeoTIFF files "
"with PixelIsPoint set. It is not clear how large a proportion of GeoTIFF "
"files this will apply to, but it is significant. This isn't too bad for "
"files coming from non-GDAL sources as most other produces have made the "
"correct interpretation of PixelIsPoint for years. However, unfortunately,"
" files produced in the past by GDAL with PixelIsPoint will now be "
"interpreted differently and the values will be off by half a pixel."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:81
msgid ""
"In practice it was not particularly convenient or well documented how to "
"produce PixelIsPoint GeoTIFF files with GDAL, so these files should be "
"fairly rare. Thee easiest way to produce them was by copying from another"
" PixelIsPoint GeoTIFF file in which the error on write just undid the "
"error when reading the source GeoTIFF file."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:88
msgid "Reporting Extents"
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:90
msgid ""
"Folks have at various points in the past requested that we report the "
"extents differently for files with an AREA_OR_POINT value of POINT, much "
"as listgeo does for GeoTIFF files that have a PixelIsPoint "
"interpretation. I do *not* plan to do this, and for the purpose of GDAL "
"the GCPs, RPCs and GeoTransform will always be based on an area "
"interpretation of pixels. The AREA_OR_POINT will *only* be used to "
"control setting of the PixelIsPoint value in GeoTIFF files, and as "
"metadata about the physical interpretation of pixels."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:100
msgid "World Files"
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:102
msgid ""
"These changes will have no impact on how world files are treated or "
"written. They are always based on the assumption of a area based pixel, "
"but with the origin at the center of the top left pixel. This is "
"effectively the same as the values for PixelIsPoint, but is not in any "
"way tried to this metadata."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:111
msgid "The 1.6 and 1.7 branch test suites will not be altered."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:113
msgid ""
"The trunk branch test suite will be altered to check for the updated "
"values and will be extended with a test to confirm that setting the "
"config option GTIFF_POINT_GEO_IGNORE to TRUE suppresses the altered "
"behavior."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:121
msgid ""
"The situation will be noted in the 1.8.0, 1.7.4 and 1.6.4 release notes "
"as well as in the GeoTIFF driver documentation in trunk."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:124
msgid ""
"The GeoTIFF web site GeoTIFF FAQ will be updated to clarify the "
"interpretation of PixelIsPoint and note that up to GDAL 1.8 it was "
"improperly interpreted by GDAL."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:131
msgid "All code implementation will be by Frank Warmerdam in the next few weeks."
msgstr ""

#: ../../source/development/rfc/rfc33_gtiff_pixelispoint.rst:134
msgid ""
"Applied in trunk (r21158), 1.7 (r21159), 1.6 (r21160) and 1.6-esri "
"(r21161)."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:5
msgid "RFC 34: License Policy Enforcement"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:16
msgid ""
"This document proposes the addition of a new mechanisms so that "
"applications and end users can define a license policy, and so that GDAL "
"can help avoid license conflicts between proprietary and reciprocally "
"licensed applications and format drivers."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:24
msgid ""
"Reciprocal FOSS License: A open source software license, such as the GPL,"
" that requires all other software components linked into the same "
"executable and distributed beyond the creator to also be offered under "
"open source terms."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:29
msgid ""
"Non-Reciprocal FOSS License: A open source software license, such as "
"MIT/X, BSD or LGPL, that does not place any requirements on other linked "
"components in the same executable at distribution time."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:33
msgid ""
"Proprietary License: Software provided under terms that do not adhere to "
"the requirements of the open source definition, such as libraries from "
"Oracle (OCI), Lizardtech (MrSID) and Erdas (ECW). While often offered for"
" zero cost, these components are incompatible with reciprocal FOSS "
"licenses and may place a variety of other restrictions on the distributor"
" or end user."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:43
msgid ""
"GDAL/OGR is distributed under the Non-Reciprocal MIT/X open source "
"license which facilitates it's use by proprietary and open source "
"applications, and facilitates the inclusion of proprietary format drivers"
" along side the open source format drivers. However, it is still a "
"license violation to distribute reciprocally licensed applications (like "
"QGIS and GRASS) which use GDAL with proprietary licensed drivers (such as"
" the MrSID, ECW or Oracle drivers). Likewise, it is a license violation "
"to distribute proprietary applications with reciprocally licensed drivers"
" such as the GDAL GRASS driver, or the PDF driver."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:53
msgid ""
"This RFC, and the improvements it promotes are intended to facilitate "
"users, applications and drivers setting and following license policies to"
" avoid unintentional license violations. One area this can be "
"particularly helpful is broad software distributions like `OSGeo4W "
"<http://osgeo4w.osgeo.org>`__."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:60
#: ../../source/development/rfc/rfc62_raster_algebra.rst:85
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:22
msgid "Approach"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:62
msgid ""
"The general approach proposed is that drivers will declare their license "
"category, and applications or end users will declare a policy for what "
"sorts of drivers may be used in combination with them. The "
"GDALDriverManager and OGRDriverRegistrar classes will apply this "
"information to avoid unintentional license violations."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:69
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:449
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:210
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:305
#: ../../source/development/rfc/rfc62_raster_algebra.rst:102
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:185
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:225
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:116
msgid "Drivers"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:71
msgid ""
"Drivers will declare one of these three driver specific licensing "
"policies via the \"LICENSE_POLICY\" (DMD_LICENSE_POLICY) metadata item on"
" the driver:"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:75
msgid ""
"\"RECIPROCAL\": the driver is available under a reciprocal FOSS license "
"such as the GPL, and should not be mixed with proprietary drivers or "
"applications."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:78
msgid ""
"\"NONRECIPROCAL\": the driver is available under a non-reciprocal FOSS "
"license such as MIT/X, or LGPL. This is the default if no licensing "
"policy is declared and is the natural policy of drivers provided as part "
"of GDAL without outside dependencies."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:82
msgid ""
"\"PROPRIETARY\": the driver, usually due to use of proprietary libraries,"
" has some licensing restrictions which make it ineligible for "
"distribution with reciprocally licensed software. This would include "
"MrSID, ECW, and Oracle related drivers."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:88
msgid "Application License Policy"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:90
msgid ""
"Applications are encouraged to set one of the following licensing "
"policies reflective of the applications nature. The policy should be set "
"as the value of the GDAL_APPLICATION_LICENSE_POLICY configuration "
"variable, typically via a call to GDALSetConfigOption() *before* the call"
" to GDALAllRegister() or OGRRegisterAll()."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:96
msgid ""
"\"RECIPROCAL\": the application is licensed under a reciprocal license "
"such as the GPL, and no proprietary drivers should be loaded."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:98
msgid ""
"\"PROPRIETARY\": the application has some licensing restrictions which "
"make it ineligible for distribution with reciprocally licensed software. "
"Care will be taken to avoid loading reciprocally licensed drivers, such "
"as the GRASS and PDF drivers."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:102
msgid ""
"\"DEFAULT\": the application does not apply any licensing restrictions. "
"This is typical of non-GPL open source applications such as MapServer, "
"and will be the default policy if nothing is declared."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:107
msgid "User License Policy"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:109
msgid ""
"The restrictions on mixing proprietary and reciprocally licensed software"
" generally applies at the point of distribution. In particular, it is not"
" intended to prevent the end user from assembling a variety of components"
" for their own use as they see fit, for their own use. To that end it is "
"important to provide a mechanism for the end user to deliberately "
"override the restrictions on mixing reciprocally licensed, and "
"proprietary components. This is accomplished via the GDAL_LICENSE_POLICY "
"configuration variable which might typically be set via the environment "
"or via the --config commandline switch to most GDAL applications. It may "
"have the following values:"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:120
msgid "\"USE_ALL\": do not discard any drivers based on licensing restrictions."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:122
msgid ""
"\"PREFER_PROPRIETARY\": If there is a conflict between proprietary and "
"reciprocally licensed drivers, use the proprietary ones."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:124
msgid ""
"\"PREFER_RECIPROCAL\": If there is a conflict between proprietary and "
"reciprocally licensed drivers, use the reciprocally licensed ones."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:127
msgid ""
"In addition to setting this via config variables, there will also be a "
"configure / nmake.opt declaration to alter the default "
"GDAL_LICENSE_POLICY. Thus a local build could be configured to USE_ALL at"
" build time instead of having to set environment variables or commandline"
" switches. This would not be suitable for software that will be "
"redistributed."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:135
msgid "Policy Logic"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:137
msgid ""
"If the user selected a GDAL_LICENSE_POLICY of \"USE_ALL\" then no drivers"
" are unloaded on the basis of licensing."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:139
msgid ""
"If the user selected a GDAL_LICENSE_POLICY of \"PREFER_PROPRIETARY\" or "
"\"PREFER_RECIPROCAL\" then ignore the GDAL_APPLICATION_LICENSE_POLICY."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:141
msgid ""
"if the application select a GDAL_APPLICATION_LICENSE_POLICY of "
"\"PROPRIETARY\" or \"RECIPROCAL\" then use that."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:143
msgid ""
"In the absence of a user or application level policy, default to a policy"
" of \"PREFER_PROPRIETARY\"."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:146
msgid ""
"The policy will be applied in the GDALDriverManager::AutoSkipDrivers() "
"method and in the newly introduced OGRSFDriverManager::AutoSkipDrivers() "
"method. The AutoSkipDrivers() method is already used to unload drivers "
"based on GDAL_SKIP (and soon OGR_SKIP) and is generally called after the "
"preliminary registration of drivers."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:153
msgid "Strict Link Level Compliance"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:155
msgid ""
"The GPL, the leading reciprocal license, talks about distribution of GPL "
"applications with proprietary code linked in. In a literal sense we may "
"still have running processes with mixed code linked in. Instead of "
"addressing the problem at the point of linking we are disabling use of "
"incompatible components at runtime. There is some small risk that this "
"may be considered not to be compliant with the requirements of the GPL "
"license in a literal sense, though it is clear we are making every "
"reasonable effort to enforce it in a practical sense."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:164
msgid ""
"In the situation of standalone software packages being distributed with "
"GDAL, it may still be best for those preparing the package to completely "
"omit any components incompatible with the license of the applications. "
"This RFC is primarily intended to support complex mixed-component "
"distributions such as OSGeo4W."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:173
msgid "I believe the following drivers should be marked as \"PROPRIETARY\":"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:176
msgid "JP2ECW"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:177
msgid "MRSID"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:178
msgid "JP2MRSID"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:179
msgid "MG4Lidar"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:180
msgid "GEORASTER"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:182
msgid "JPIPKAK"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:183
msgid "ArcObjects"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:184
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:106
msgid "OCI"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:185
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:113
msgid "FileGDB"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:186
msgid "FME"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:187
msgid "ArcSDE (raster and vector)"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:189
msgid "I believe the following drivers should be marked as \"RECIPROCAL\":"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:191
msgid "grass (raster and vector)"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:192
msgid "EPSILON"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:193
msgid "MySQL (depending on active license terms!)"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:194
msgid "PDF"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:196
msgid "Unresolved:"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:198
msgid ""
"The OGR SOSI driver should probably be marked as proprietary currently as"
" it relies on linking with binary objects with unknown licencing terms, "
"even if apparently the ultimate goal seems to open source them."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:202
msgid ""
"I'm a bit confused by :ref:`raster.msg`. Seems that it relies on third "
"party stuff with both proprietary and GPL code."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:205
msgid ""
"I am unsure about the ODBC based drivers. I suppose PGEO and MSSQLSPATIAL"
" drivers ought to be marked proprietary too? Might it depend on the "
"actual license terms of the odbc library?"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:209
msgid "Please let me know of other drivers needing marking."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:212
msgid "SWIG Bindings"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:214
msgid ""
"Some (all?) swig bindings automatically call GDALAllRegister() and/or "
"OGRRegisterAll() at the point the bindings are loaded making it hard to "
"set the application level GDAL_LICENSE_POLICY in a script before the "
"registration takes place. To address that I believe we should expose the "
"AutoSkipDrivers() methods via SWIG so that scripts can set the policy and"
" then \"clean\" the drivers based on the policy in force."
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:224
msgid "How to test?"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:229
msgid "How to document?"
msgstr ""

#: ../../source/development/rfc/rfc34_license_policy.rst:234
msgid ""
"Frank Warmerdam will do the core implementation in trunk. Driver "
"maintainers may need to update the metadata for particular drivers."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:5
msgid "RFC 35: Delete, reorder and alter field definitions of OGR layers"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:7
#: ../../source/development/rfc/rfc45_virtualmem.rst:7
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:7
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:7
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:7
msgid "Authors: Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:9
#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:9
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:9
#: ../../source/development/rfc/rfc45_virtualmem.rst:9
#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:9
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:9
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:9
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:9
msgid "Contact: even dot rouault at spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:16
msgid ""
"This document proposes changes in OGR to add the capability to delete "
"fields, reorder fields and alter field definitions, in OGR layer "
"definitions."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:23
msgid ""
"Currently, an OGR layer definition can only be altered to add a new field"
" definition with OGRLayer::CreateField()."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:26
msgid ""
"It is desirable to extend OGR capabilities to be able to delete, reorder "
"and alter field definitions of existing layers. Such wish has been "
"expressed in ticket #2671 and comes back regularly on QGIS mailing list "
"(e.g. `http://lists.osgeo.org/pipermail/qgis-user/2011-May/011935.html "
"<http://lists.osgeo.org/pipermail/qgis-user/2011-May/011935.html>`__). "
"QGIS currently has a \"Table Manager\" extension to work around the lack "
"of DeleteField(), so a proper solution is clearly needed."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:37
msgid "The OGRLayer class will be extended with the following methods :"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:48
msgid "The documentation of those new methods is :"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:183
msgid "Three new layer capabilities are added :"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:196
msgid "The new methods are mapped to the C API :"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:205
msgid ""
"For the purpose of the implementation, new methods are also added to the "
"OGRFeatureDefn class :"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:213
msgid ""
"A OGRErr OGRCheckPermutation(int\\* panPermutation, int nSize) function "
"is added to ogrutils.cpp to check that the array is a permutation of "
"[0,nSize-1]. It is used by OGRFeatureDefn::ReorderFieldDefns() and can be"
" used by all drivers implementing OGRLayer::ReorderFields() to validate "
"the panMap argument."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:220
msgid "Altering field types"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:222
msgid ""
"This RFC does not attempt to guarantee which type conversions will be "
"possible. It will depend on the capabilities of the implementing drivers."
" For example, for database drivers, the operation will be directly done "
"on the server side (through a 'ALTER TABLE my_table ALTER COLUMN "
"my_column TYPE new_type' command for the PG driver). So some conversions "
"might be possible, others not..."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:229
msgid ""
"It is however expected that converting from any type to OFTString will be"
" supported in most cases when AlterFieldDefn() is supported."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:232
msgid ""
"Drivers that don't support a conversion and that were required to do it "
"(ALTER_TYPE_FLAG set and new_type != old_type) should emit an explicit "
"error."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:239
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:61
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:189
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:405
msgid "None"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:242
msgid "Changed drivers"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:244
msgid ""
"The shapefile driver will implement DeleteField(), ReorderFields() and "
"AlterFieldDefn(). Shapelib will be extended with DBFReorderFields() and "
"DBFAlterFieldDefn()."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:248
msgid ""
"Note: The implementation of AlterFieldDefn() in the Shapefile driver does"
" not support altering the field type, except when converting to "
"OFTString. It will not reformat numeric values of existing features if "
"width or precision are changed. However, appropriate field truncation or "
"expansion will occur if the width is altered."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:254
msgid ""
"Other drivers, mainly database drivers (PG, MySQL, SQLite), could be "
"easily extended to implement the new API by issuing the appropriate SQL "
"command (ALTER TABLE foo DROP COLUMN bar, ALTER TABLE foo ALTER COLUMN "
"bar, ...). The implementation of DeleteField() and AlterFieldDefn() in "
"the PG driver is indeed planned, provided this RFC is adopted. The Memory"
" driver will also updated to support DeleteField(), ReorderFields() and "
"AlterFieldDefn()."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:263
#: ../../source/development/rfc/rfc45_virtualmem.rst:1168
msgid "SWIG bindings"
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:265
msgid ""
"DeleteField(), ReorderField(), ReorderFields() and AlterFieldDefn() will "
"be mapped to SWIG."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:271
msgid ""
"The autotest suite will be extended to test the implementation of the new"
" API for the Shapefile driver. An example of the use of the new API is "
"attached to ticket #2671 (`rfc35_test.py "
"<http://trac.osgeo.org/gdal/attachment/ticket/2671/rfc35_test.py>`__) and"
" will be turned into unit tests."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:280
msgid ""
"Implementation will be done by Even Rouault in GDAL/OGR trunk. Changes in"
" Shapelib will need to be pushed into upstream CVS by a Shapelib "
"committer. The proposed implementation is attached as a patch in ticket "
"#2671 (`rfc35_v3.patch "
"<http://trac.osgeo.org/gdal/attachment/ticket/2671/rfc35_v3.patch>`__)."
msgstr ""

#: ../../source/development/rfc/rfc35_deletereorderalterfielddefn.rst:289
msgid "+1 from FrankW, DanielM, HowardB, TamasS and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:5
msgid "RFC 36: Allow specification of intended driver on GDALOpen"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:7
msgid "Authors: Ivan Lucena"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:9
msgid "Contact: ivan.lucena@pmldnet.com"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:11
msgid "Status: Proposed"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:16
msgid ""
"This document proposes a mechanism to explicitly tell GDAL what driver "
"should open a particular dataset."
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:20
msgid "Justification"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:22
msgid ""
"By selecting the driver, users can optimize processing time and avoid "
"incorrect or undesirable driver selection due to the driver probing "
"mechanism."
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:27
msgid "Concept"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:29
msgid ""
"The idea is to pass to GDALOpen a string containing the token \"driver=\""
" followed by the driver name and a comma separating it from the file-"
"name."
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:33
msgid "[driver=driver-name,]file-name"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:35
msgid "Examples:"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:37
msgid "$ gdalinfo driver=nitf:imagefile01.ntf"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:39
msgid ""
"In that case no probing is necessary, since the user has indicated to use"
" the specific driver. If for some reason that process fails the function "
"returns NULL and no other attempt is made to open the file by another "
"driver."
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:47
msgid ""
"The amount of code is minimal and there is already a proposed patch on "
"ticket #3043."
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:53
msgid ""
"Any application that uses GDAL API or any GDAL command line tool's user "
"that, at one point, wants to force the use of a particular driver to open"
" a datasets."
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:60
msgid ""
"That optional entry on GDALOpen process should not affect the current "
"logic."
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:66
msgid "Extra tests would be added to the test script"
msgstr ""

#: ../../source/development/rfc/rfc36_open_by_drivername.rst:71
msgid ""
"For gdalbuildvrt and gdaltindex it will not be possible to use the driver"
" selection with wildcard, as in \"driver=gtiff,*.tif\"."
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:5
msgid "RFC 37: User data callbacks in CPLError"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst
msgid "Date"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:7
msgid "2011/10/25"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst
msgid "Author"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:8
#: ../../source/development/rfc/rfc3_commiters.rst:218
#: ../../source/development/rfc/rfc74_sphinx.rst:8
msgid "Howard Butler"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst
msgid "Contact"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:9
msgid "hobu.inc at gmail dot com"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst
msgid "Status"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:10
msgid "Implemented"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst
msgid "Version"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:11
msgid "GDAL 1.9"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst
msgid "Voting"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:12
msgid "+1 Frank, Howard, Tamas, Daniel, Even"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:15
msgid ""
"Description: This RFC proposes to implement user context data in "
"CPLErrorHandler callback functions. It does so without disrupting "
"existing callback patterns already in use, and provides completely "
"auxiliary functionality to CPLErrorHandler."
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:23
msgid ""
"It could be argued that users could already manage user context of error "
"handling functions with application-level globals that control its "
"interaction. While this sentiment is technically true, this approach adds"
" a ton of complication for library users. A scenario that has error "
"callbacks pass back user context data means simpler code for users "
"wishing to have the state of their application be returned along with "
"errors from inside of GDAL."
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:30
msgid "The case for user data be passed in callbacks:"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:32
msgid ""
"It is a common idiom for signal-based APIs (of which CPLErrorHandler is "
"one)"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:33
msgid ""
"It is simpler than requiring library users to manage the state of "
"internal library error handling externally in their own applications"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:38
msgid "Implementation Concerns"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:40
msgid ""
"GDAL's (and OGR and OSR's) error handling callback mechanisms are in wide"
" use and changes to the base library that were to break either the "
"callback signatures *or* the behavior of existing callback operations "
"should be rejected. Adding support for user data in the call back is to "
"be provided in addition to existing functionality that already exists in "
"the error handling, and an approach that mimics and looks similar to the "
"existing operations is likely the best approach for GDAL -- if not the "
"cleanest approach in general."
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:52
msgid "The first change will add a void* to CPLErrorHandlerNode:"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:63
msgid "and to methods to add error handlers with user data will be provided:"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:70
msgid ""
"``CPLSetErrorHandler`` and ``CPLPushErrorHandler`` will simply use the "
"``Ex`` functions and pass NULL in for the pUserData member."
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:73
msgid ""
"Finally, similar to ``CPLGetLastErrorType`` and ``CPLGetLastErrorMsg`` "
"methods, a ``CPLGetErrorHandlerUserData``"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:81
msgid "SWIG bindings consideration"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:83
msgid ""
"The SWIG bindings will *not* be updated to provide access to user data "
"for the currently active error handler for implementation of this RFC. "
"SWIG bindings maintainers can take advantage of this new functionality at"
" their discretion, however."
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:89
msgid "Ticket History"
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:91
msgid ""
"`http://trac.osgeo.org/gdal/ticket/4295 "
"<http://trac.osgeo.org/gdal/ticket/4295>`_ contains a patch that "
"implements the proposed solution and provides context and discussion "
"about this feature.  "
"http://trac.osgeo.org/gdal/attachment/ticket/4295/4295-hobu-rfc.patch "
"contains the current patch to implemented the proposed functionality."
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:98
msgid "Documentation of the added functions is provided as part of the patch."
msgstr ""

#: ../../source/development/rfc/rfc37_cplerror_userdata.rst:103
msgid ""
"All code will be implemented in trunk by Howard Butler after passage of "
"the RFC."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:5
msgid "RFC 38: OGR Faster Open (withdrawn)"
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:11
msgid "Status: Withdrawn."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:13
msgid "Covered by `RFC 46: GDAL/OGR unification <./rfc46_gdal_ogr_unification>`__"
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:18
msgid ""
"It is proposed that the OGR datasource opening mechanism relies on the "
"GDALOpenInfo class, already used by GDAL drivers, to speed-up datasource "
"opening. The speed-up is due to the fact that the file passed to "
"OGROpen() will be opened and stat'ed only once, whereas currently, it is "
"opened and closed as many times as there are OGR drivers. This should be "
"particularly beneficial for network filesystems, or when trying to open a"
" file that is not a OGR datasource at all."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:26
msgid ""
"E.g., trying to open a file that is not a OGR datasource currently "
"requires 45 file opening or stat operations :"
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:34
msgid ""
"It is expected that if/once all drivers are migrated, it will decrease to"
" 2 operations only."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:40
msgid ""
"Similarly to GDALDriver, the OGRSFDriver class is extended to have a "
"pfnOpen member, that drivers will set to point to their own Open method."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:52
msgid ""
"The OGRSFDriverRegistrar::Open() method is updated to call pfnOpen when "
"iterating over the drivers. When pfnOpen is not set, it will try to call "
"the Open() method of OGRSFDriver (which enables a progressive migration "
"of drivers)."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:57
msgid ""
"Mainly for compatibility reasons, the virtual method Open() of "
"OGRSFDriver that is currently pure virtual, will now be a regular virtual"
" method, that will have a default implementation, that will try to call "
"pfnOpen."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:62
msgid "The patch with the changes to OGR core is attached to this page."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:67
msgid "Proposed additions will not have any impact on C binary compatibility."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:69
msgid ""
"C++ binary interface will be broken (due to the addition of a new member "
"in OGRSFDriver class and the Open() method changed from pure virtual to "
"virtual)."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:73
msgid "Source level compatibility will be preserved for third-party OGR drivers."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:77
#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:61
msgid "Impact on drivers"
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:79
msgid ""
"Existing drivers are *not* required to migrate to RFC38, but are strongly"
" encouraged to. New drivers *should* use RFC38 mechanism to preserve the "
"overall faster opening."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:83
msgid "An example of the migration for a few drivers is attached to this page."
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:86
#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:66
#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:99
msgid "Timeline"
msgstr ""

#: ../../source/development/rfc/rfc38_ogr_faster_open.rst:88
msgid ""
"Even Rouault is responsible to implement this proposal. New API will be "
"available in GDAL 2.0. Most in-tree OGR drivers will be migrated to the "
"new mechanism."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:5
msgid "RFC 39: OGR Layer Algebra"
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:7
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:7
#: ../../source/development/rfc/rfc62_raster_algebra.rst:7
msgid "Author: Ari Jolma"
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:9
msgid "Contact: ari dot jolma at aalto dot fi"
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:11
msgid "Status: Adopted, implemented in GDAL 1.10"
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:16
msgid ""
"It is proposed that the OGR layer class and the C API contains methods "
"for commonly needed overlay analysis methods."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:19
msgid ""
"The basic functionality for spatial analysis with GDAL is provided by "
"GEOS. However, GEOS operates on geometries and typically people work with"
" geospatial data layers. Vector data layers are represented in GDAL by "
"OGRLayer objects. Thus, there is a need for spatial analaysis operations "
"that work on layers."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:25
msgid ""
"Unfortunately there is no standard for spatial analysis operations API, "
"but it is possible to create a useful set by using existing software as "
"example."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:29
msgid ""
"The methods are fundamentally dependent on comparison of all the features"
" of two layers. There would possibly be huge performance improvements "
"achievable with layer specific spatial indexes. This is considered out of"
" the scope of these methods and belonging to the general problem of "
"iterating features in a layer and accessing features randomly. For these "
"reasons these methods should be only considered convenience methods and "
"not replacements for analysis in relational databases for example."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:41
msgid ""
"The methods are implemented by new methods in OGRLayer class "
"(ogrsf_frmts.h and ogrlayer.cpp) and new calls in the C API (ogr_api.h). "
"The Swig bindings (ogr.i) are also extended with these methods."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:45
msgid ""
"The patch with the changes to OGR core and to the Swig bindings is "
"attached to this page. The patch has been superficially tested but it is "
"not written or formatted according to the GDAL tradition."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:52
msgid ""
"Proposed additions will have an impact on C binary compatibility because "
"they change the API."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:55
msgid ""
"C++ binary interface will be broken (due to the addition of a new members"
" in OGRLayer class)."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:58
msgid "The changes are purely extensions and have no impact on existing code."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:63
msgid "The changes do not have any impacts on drivers."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:68
msgid ""
"Ari Jolma is responsible to implement this proposal. New API should be "
"available in GDAL 1.11."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:71
msgid ""
"There needs to be a discussion on the names of the methods and on the "
"internal logic of the methods (this refers especially to the handling of "
"attributes and error conditions)."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:75
msgid ""
"In addition to the methods in the attached patch, there should be some "
"discussion on additional methods. For example Append and Buffer methods "
"could be easily added to the set. An illustration of what is currently "
"available in the common software is for example this page: "
"`http://courses.washington.edu/gis250/lessons/Model_Builder/ "
"<http://courses.washington.edu/gis250/lessons/Model_Builder/>`__"
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:82
msgid "Comments on performance"
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:84
msgid ""
"Profiling Intersection of a layer of 46288 line string features with a "
"layer of one polygon feature (~1/3 of features within and many only "
"partly within the one feature) showed that when the method layer was a "
"Shapefile, most of the time was spent in reading the feature from the "
"Shapefile. When the method layer was copied into memory, most of the time"
" (83 %) was spent in OGRLineString::getEnvelope. The 6th version of the "
"patch contains a test against a pre-computed layer envelope, which speeds"
" up the computation in this case ~30% (from 2.44 s to 1.76 in my "
"machine). Still the most of the time (82 %) is spent in "
"OGRLineString::getEnvelope."
msgstr ""

#: ../../source/development/rfc/rfc39_ogr_layer_algebra.rst:98
msgid "(June 2012) +1 from Even, Frank, Howard, Tamas, Daniel"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:5
msgid "RFC 3: GDAL Committer Guildlines"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:14
#: ../../source/development/rfc/rfc7_vsilapi.rst:14
#: ../../source/development/rfc/rfc8_devguide.rst:14
#: ../../source/development/rfc/rfc9_maintainer.rst:14
msgid "Purpose"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:16
msgid ""
"To formalize SVN (or CVS) commit access, and specify some guidelines for "
"SVN committers."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:20
msgid "Election to SVN Commit Access"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:22
msgid ""
"Permission for SVN commit access shall be provided to new developers only"
" if accepted by the GDAL/OGR Project Steering Committee. A proposal "
"should be written to the PSC for new committers and voted on normally. It"
" is not necessary to write an RFC document for these votes, a proposal to"
" gdal-dev is sufficient."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:28
msgid "Removal of SVN commit access should be handled by the same process."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:30
msgid ""
"The new committer should have demonstrated commitment to GDAL/OGR and "
"knowledge of the GDAL/OGR source code and processes to the committee's "
"satisfaction, usually by reporting bugs, submitting patches, and/or "
"actively participating in the GDAL/OGR mailing list(s)."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:35
msgid ""
"The new committer should also be prepared to support any new feature or "
"changes that he/she commits to the GDAL/OGR source tree in future "
"releases, or to find someone to which to delegate responsibility for them"
" if he/she stops being available to support the portions of code that "
"he/she is responsible for."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:41
msgid ""
"All committers should also be a member of the gdal-dev mailing list so "
"they can stay informed on policies, technical developments and release "
"preparation."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:45
msgid ""
"New committers are responsible for having read, and understood this "
"document."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:49
msgid "Committer Tracking"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:51
msgid ""
"A list of all project committers will be kept in the main gdal directory "
"(called COMMITTERS) listing for each SVN committer:"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:54
msgid "Userid: the id that will appear in the SVN logs for this person."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:55
msgid "Full name: the users actual name."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:56
msgid ""
"Email address: A current email address at which the committer can be "
"reached. It may be altered in normal ways to make it harder to auto-"
"harvest."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:59
msgid "A brief indication of areas of responsibility."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:62
msgid "SVN Administrator"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:64
msgid ""
"One member of the Project Steering Committee will be designed the SVN "
"Administrator. That person will be responsible for giving SVN commit "
"access to folks, updating the COMMITTERS file, and other SVN related "
"management. That person will need login access on the SVN server of "
"course."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:70
msgid "Initially Frank Warmerdam will be the SVN Administrator."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:73
msgid "SVN Commit Practices"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:75
msgid ""
"The following are considered good SVN commit practices for the GDAL/OGR "
"project."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:78
msgid "Use meaningful descriptions for SVN commit log entries."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:79
msgid ""
"Add a bug reference like \"(#1232)\" at the end of SVN commit log entries"
" when committing changes related to a ticket in Trac. The '#' character "
"enables Trac to create a hyperlink from the changeset to the mentioned "
"ticket."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:83
msgid ""
"After committing changes related to a ticket in Trac, write the tree and "
"revision in which it was fixed in the ticket description. Such as \"Fixed"
" in trunk (r12345) and in branches/1.7 (r12346)\". The 'r' character "
"enables Trac to create a hyperlink from the ticket to the changeset."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:88
msgid ""
"Changes should not be committed in stable branches without a "
"corresponding bug id. Any change worth pushing into the stable version is"
" worth a bug entry."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:91
msgid ""
"Never commit new features to a stable branch without permission of the "
"PSC or release manager. Normally only fixes should go into stable "
"branches."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:94
msgid "New features go in the main development trunk."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:95
msgid ""
"Only bug fixes should be committed to the code during pre-release code "
"freeze, without permission from the PSC or release manager."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:97
msgid ""
"Significant changes to the main development version should be discussed "
"on the gdal-dev list before you make them, and larger changes will "
"require a RFC approved by the PSC."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:100
msgid ""
"Do not create new branches without the approval of the PSC. Release "
"managers are assumed to have permission to create a branch."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:102
msgid ""
"All source code in SVN should be in Unix text format as opposed to DOS "
"text mode."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:104
msgid ""
"When committing new features or significant changes to existing source "
"code, the committer should take reasonable measures to insure that the "
"source code continues to build and work on the most commonly supported "
"platforms (currently Linux and Windows), either by testing on those "
"platforms directly, running [wiki:Buildbot] tests, or by getting help "
"from other developers working on those platforms. If new files or library"
" dependencies are added, then the configure.in, Makefile.in, Makefile.vc "
"and related documentations should be kept up to date."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:115
msgid "Relationship with other upstream projects imported in GDAL/OGR code base"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:117
msgid ""
"Some parts of the GDAL/OGR code base are regularly refreshed from other "
"upstream projects. So changes in those areas should go first into those "
"upstream projects, otherwise they may be lost during a later refresh. "
"Note that those directories may contain a mix of GDAL specific files and "
"upstream files. This has to be checked on a case-by-case basis (any file "
"with CVS changelog at its beginning is a good candidate for belonging to "
"the upstream project)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:125
msgid "Currently the list of those areas is :"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:127
msgid ""
"frmts/gtiff/libtiff : from libtiff CVS "
"(`http://www.remotesensing.org/libtiff/ "
"<http://www.remotesensing.org/libtiff/>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:129
msgid ""
"frmts/gtiff/libgeotiff : from libgeotiff SVN "
"(`http://trac.osgeo.org/geotiff/ <http://trac.osgeo.org/geotiff/>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:131
msgid ""
"frmts/jpeg/libjpeg : from libjpeg project "
"(`http://sourceforge.net/projects/libjpeg/ "
"<http://sourceforge.net/projects/libjpeg/>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:133
msgid ""
"frmts/png/libpng : from libpng project "
"(`http://www.libpng.org/pub/png/libpng.html "
"<http://www.libpng.org/pub/png/libpng.html>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:135
msgid ""
"frmts/gif/giflib : from giflib project "
"(`http://sourceforge.net/projects/giflib "
"<http://sourceforge.net/projects/giflib>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:137
msgid ""
"frmts/zlib : from zlib project (`http://www.zlib.net/ "
"<http://www.zlib.net/>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:139
msgid ""
"ogr/ogrsf_frmts/mitab : from MITAB CVS (`http://mitab.maptools.org/ "
"<http://mitab.maptools.org/>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:141
msgid ""
"ogr/ogrsf_frmts/avc : from AVCE00 CVS (`http://avce00.maptools.org/ "
"<http://avce00.maptools.org/>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:143
msgid ""
"ogr/ogrsf_frmts/shape/[dbfopen.c, shpopen.c, shptree.c, shapefil.h] : "
"from shapelib project (`http://shapelib.maptools.org/ "
"<http://shapelib.maptools.org/>`__)"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:146
msgid "data/ : some .csv files related to CRS come from libgeotiff"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:149
msgid "Legal"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:151
msgid ""
"Committers are the front line gatekeepers to keep the code base clear of "
"improperly contributed code. It is important to the GDAL/OGR users, "
"developers and the OSGeo foundation to avoid contributing any code to the"
" project without it being clearly licensed under the project license."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:156
msgid ""
"Generally speaking the key issues are that those providing code to be "
"included in the repository understand that the code will be released "
"under the MIT/X license, and that the person providing the code has the "
"right to contribute the code. For the committer themselves understanding "
"about the license is hopefully clear. For other contributors, the "
"committer should verify the understanding unless the committer is very "
"comfortable that the contributor understands the license (for instance "
"frequent contributors)."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:165
msgid ""
"If the contribution was developed on behalf of an employer (on work time,"
" as part of a work project, etc) then it is important that an appropriate"
" representative of the employer understand that the code will be "
"contributed under the MIT/X license. The arrangement should be cleared "
"with an authorized supervisor/manager, etc."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:171
msgid ""
"The code should be developed by the contributor, or the code should be "
"from a source which can be rightfully contributed such as from the public"
" domain, or from an open source project under a compatible license."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:176
msgid "All unusual situations need to be discussed and/or documented."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:178
msgid ""
"Committers should adhere to the following guidelines, and may be "
"personally legally liable for improperly contributing code to the source "
"repository:"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:182
msgid ""
"Make sure the contributor (and possibly employer) is aware of the "
"contribution terms."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:184
msgid ""
"Code coming from a source other than the contributor (such as adapted "
"from another project) should be clearly marked as to the original source,"
" copyright holders, license terms and so forth. This information can be "
"in the file headers, but should also be added to the project licensing "
"file if not exactly matching normal project licensing (gdal/LICENSE.txt)."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:190
msgid ""
"Existing copyright headers and license text should never be stripped from"
" a file. If a copyright holder wishes to give up copyright they must do "
"so in writing to the foundation before copyright messages are removed. If"
" license terms are changed it has to be by agreement (written in email is"
" ok) of the copyright holders."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:195
msgid ""
"Code with licenses requiring credit, or disclosure to users should be "
"added to /trunk/gdal/LICENSE.TXT."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:197
msgid ""
"When substantial contributions are added to a file (such as substantial "
"patches) the author/contributor should be added to the list of copyright "
"holders for the file."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:200
msgid ""
"If there is uncertainty about whether a change it proper to contribute to"
" the code base, please seek more information from the project steering "
"committee, or the foundation legal counsel."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:205
msgid "Bootstraping"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:207
msgid ""
"The following existing committers will be considered authorized GDAL/OGR "
"committers as long as they each review the committer guidelines, and "
"agree to adhere to them. The SVN administrator will be responsible for "
"checking with each person."
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:212
msgid "Daniel Morissette"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:213
msgid "Frank Warmerdam"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:214
msgid "Gillian Walter"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:215
msgid "Andrey Kiselev"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:216
msgid "Alessandro Amici"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:217
msgid "Kor de Jong"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:219
msgid "Lichun Wang"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:220
msgid "Norman Vine"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:221
msgid "Ken Melero"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:222
msgid "Kevin Ruland"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:223
msgid "Marek Brudka"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:224
msgid "Pirmin Kalberer"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:225
msgid "Steve Soule"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:226
msgid "Frans van der Bergh"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:227
msgid "Denis Nadeau"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:228
msgid "Oleg Semykin"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:229
msgid "Julien-Samuel Lacroix"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:230
msgid "Daniel Wallner"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:231
msgid "Charles F. I. Savage"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:232
msgid "Mateusz Loskot"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:233
msgid "Peter Nagy"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:234
msgid "Simon Perkins"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:235
msgid "Radim Blazek"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:236
msgid "Steve Halasz"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:237
msgid "Nacho Brodin"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:238
msgid "Benjamin Collins"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:239
msgid "Ivan Lucena"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:240
msgid "Ari Jolma"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:241
msgid "Tamas Szekeres"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:245
msgid ""
"`COMMITTERS <http://trac.osgeo.org/gdal/browser/trunk/gdal/COMMITTERS>`__"
" file"
msgstr ""

#: ../../source/development/rfc/rfc3_commiters.rst:247
msgid ""
"`Edit GDAL Subversion Group <https://www.osgeo.org/cgi-"
"bin/auth/ldap_group.py?group=gdal>`__"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:5
msgid ""
"RFC 40: Improving performance of Raster Attribute Table implementation "
"for large tables"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:8
msgid "Summary:"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:10
msgid ""
"Raster Attrbute Tables from some applications (notably segmentation) can "
"be very large and are slow to access with the current API due to the way "
"only one element can get read or written at a time. Also, when an "
"attribute table is requested by the application the whole table must be "
"read - there is no way of delaying this so just the required subset is "
"read off disk. These changes will bring the attribute table support more "
"in line with the way raster data is accessed."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:19
msgid "Implementation:"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:21
msgid ""
"It is proposed that GDALRasterAttributeTable be re-written as a virtual "
"base class. This will allow drivers to have their own implementation that"
" only reads and writes data when requested. A new derived class, "
"GDALDefaultRasterAttributeTable will be provided that provides the "
"functionality of the GDAL 1.x GDALRasterAttributeTable (ie holds all data"
" in memory)."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:28
msgid ""
"Additional methods will be provided in the GDALRasterAttributeTable class"
" that allow 'chunks' of data from a column to be read/written in one "
"call. As with the GetValueAs functions columns of different types would "
"be able to read as a value of a different type (i.e., read a int column "
"as a double) with the appropriate conversion taking place. The following "
"overloaded methods will be available:"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:41
msgid ""
"It is expected that the application will allocate the required space for "
"reading in the same way as with the RasterIO() call."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:44
msgid ""
"The char*\\* type will be used for reading and writing strings. When "
"reading strings, it is expected that the array is created of the correct "
"size and ValuesIO will just create the individual strings for each row. "
"The application should call CPLFree on each of the strings before de-"
"allocating the array."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:50
msgid ""
"These methods will be available from C as GDALRATValuesIOAsDouble, "
"GDALRATValuesIOAsInteger and GDALRATValuesIOAsString."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:53
msgid ""
"This is also an opportunity to remove unused functions on the attribute "
"table such as GetRowMin(), GetRowMax() and GetColorOfValue()."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:57
msgid "Language Bindings:"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:59
msgid ""
"The Python bindings will be altered so ValuesIO will be supported using "
"numpy arrays for the data with casting of types as appropriate. Strings "
"will be supported using the numpy support for string arrays."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:64
msgid "Backward Compatibility:"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:66
msgid ""
"The proposed additions will extend the C API. However, the C++ binary "
"interface will be broken and so GDAL 2.0 is suggested as an appropriate "
"time to introduce the changes."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:70
msgid ""
"Care will be taken to still support the use of Clone() and Serialize() in"
" derived implementations of the GDALRasterAttributeTable class as these "
"are called by existing code. For implementations where the table is not "
"held in memory these may fail if the table is larger than some suitable "
"limit (for example, GetRowCount() \\* GetColCount() < 1 000 000). Clone()"
" should return a instance of GDALDefaultRasterAttributeTable to prevent "
"problems with sharing memory between objects."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:79
msgid ""
"Existing code may need to be altered to use create instances of "
"GDALDefaultRasterAttributeTable rather than GDALRasterAttributeTable if "
"an in memory implementation is still required."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:84
msgid "Impact on Drivers"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:86
msgid ""
"The HFA driver will be updated to support all aspects of the new "
"interface, such as the new functions and reading/writing upon request. "
"Other drivers will be modified to continue to use the in memory "
"implementation (GDALDefaultRasterAttributeTable)."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:94
msgid ""
"The Python autotest suite will be extended to test the new API, both for "
"the default implementation and specialised implementation in the HFA "
"driver."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:101
msgid ""
"We (Sam Gillingham and Pete Bunting) are prepared undertake the work "
"required and have it ready for inclusion in GDAL 1.11 There needs to be a"
" discussion on the names of the methods and on the internal logic of the "
"methods."
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:107
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:237
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:347
msgid "Ticket"
msgstr ""

#: ../../source/development/rfc/rfc40_enhanced_rat_support.rst:109
msgid "Ticket #5129 has been opened to track the progress of this RFC."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:5
msgid "RFC 41 : Support for multiple geometry fields in OGR"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:10
msgid ""
"Add read/write support in the OGR data model for features with multiple "
"geometry fields."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:14
#: ../../source/development/rfc/rfc68_cplusplus11.rst:30
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:32
#: ../../source/development/rfc/rfc70_output_format_guess.rst:24
#: ../../source/development/rfc/rfc72_pytest.rst:26
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:25
#: ../../source/development/rfc/rfc74_sphinx.rst:23
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:22
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:21
msgid "Motivation"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:16
msgid ""
"The OGR data model is currently tied to a single geometry field per "
"feature, feature definition and layer. But a number of data formats "
"support multiple geometry fields. The OGC Simple Feature Specifications "
"also do not limit to one geometry field per layer (e.g. §7.1.4 of `OGC "
"06-104r4 \"OpenGIS® Implementation Standard for Geographic information - "
"Simple feature access -Part 2: SQL option "
"<http://portal.opengeospatial.org/files/?artifact_id=25354>`__)."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:24
msgid ""
"There are workarounds : using geometries of type GEOMETRYCOLLECTION, or "
"advertizing as many layers as there are geometry columns in the layer "
"(like currently done in the PostGIS or SQLite drivers). All those "
"approach are at best workarounds that suffer from limitations :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:29
msgid ""
"GEOMETRYCOLLECTION approach : no way to know the name/semantics of each "
"sub-geometry. All sub-geometries must be expressed in the same SRS. No "
"way of guaranteeing that the GEOMETRYCOLLECTION has always the same "
"number of sub-geometries or that there are of a consistent geometry type."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:34
msgid ""
"one layer per geometry column approach : only appropriate for read-only "
"scenarios. Cannot work in write scenarios."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:37
msgid ""
"The purpose of this RFC is to make support for multiple geometry fields "
"per feature to be properly taken into account in the OGR data model."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:41
msgid "Proposed solution"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:43
msgid ""
"(Note: alternative solutions have also been studied. They are explained "
"in a following section of this RFC.)"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:46
msgid ""
"To sum it up, geometry fields will be treated similarly as attribute "
"fields are handled at the OGRFeatureDefn and OGRFeature levels, but they "
"will be kept separate. Attribute fields and geometry fields will have "
"their own separate indexing in the feature definition."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:51
msgid ""
"This choice has been mainly made to maximize backward compatibility, "
"while offering new capabilities."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:54
msgid ""
"Its involves creating a OGRGeomFieldDefn class, and changes in "
"OGRFieldDefn, OGRFeatureDefn, OGRFeature and OGRLayer classes."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:58
msgid "OGRGeomFieldDefn class"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:60
msgid ""
"The OGRGeomFieldDefn is a new class. Its structure is directly inspired "
"from the OGRFieldDefn class."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:92
msgid ""
"One can notice that the member variables were to be found at OGRLayer "
"level previously."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:95
msgid ""
"The SRS object is ref-counted. The reference count is increased in the "
"constructor and in SetSpatialRef(), and decreased in the destructor."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:98
msgid ""
"GetSpatialRef() is deliberately set virtual, so that lazy evaluation can "
"be implemented (getting SRS can have a noticeable cost in some driver "
"implementations, like reading an extra file, or issuing a SQL request)."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:103
msgid "OGRFeatureDefn class"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:105
msgid "The OGRFeatureDefn class will be extended as the following :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:131
msgid ""
"At instantiation, OGRFeatureDefn would create a default geometry field "
"definition of name \"\" and type wkbUnknown. If SetGeomType() is called, "
"this will be routed on papoGeomFieldDefn[0]. If only one geometry field "
"definition exists, SetGeomType(wkbNone) will remove it."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:136
msgid ""
"GetGeomType() will be routed on papoGeomFieldDefn[0] if it exists. "
"Otherwise it will return wkbNone."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:139
msgid ""
"It is strongly advised that there is name uniqueness among the combined "
"set of regular field names and the geometry field names. Failing to do so"
" will result in unspecified behavior in SQL queries. This advice will not"
" be checked by the code (it is currently not done for regular fields)."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:145
msgid ""
"Another change is to make all the existing methods of OGRFeatureDefn "
"virtual (and change private visibility to protected), so this class can "
"be subclassed if needed. This will enable lazy creation of the object. "
"Justification: establishing the full feature definition can be costly. "
"But applications may want to list all the layers of a datasource, and "
"only present some information that is important, but cheap to establish. "
"In the past, OGRLayer::GetName() and OGRLayer::GetGeomType() have been "
"introduced in order to workaround for that."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:154
msgid ""
"Note also that ReorderGeomFieldDefns() is not foreseen for the moment. It"
" could be added in a later step, should the need arises. "
"DeleteGeomFieldDefn() is mostly there for the own benefit of "
"OGRFeatureDefn itself when calling SetGeomType(wkbNone)."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:160
msgid "OGRFeature class"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:162
msgid "The OGRFeature class will be extended as following :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:188
msgid ""
"Note: before RFC41, SetGeometry() or SetGeometryDirectly() could work on "
"a feature whose feature definition had a GetGeomType() == wkbNone (which "
"was inconsistent). This will be no longer the case since the size of the "
"papoGeometries array is now based on GetGeomFieldCount(), and when "
"GetGeomType() == wkbNone, the geometry field count is 0. The VRT and CSV "
"drivers will be fixed to declare their geometry type consistently."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:196
msgid "OGRLayer class"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:198
msgid "Impact on OGRLayer class :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:200
msgid ""
"Spatial filter: the option considered is to only allow one spatial filter"
" at the time."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:203
msgid ""
"the need for spatial filters applied simultaneously on several geometry "
"fields is not obvious."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:205
msgid ""
"the m_poFilterGeom protected member is used more than 250 times in the "
"OGR code base, so turning it into an array would be a tedious task..."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:209
#: ../../source/development/rfc/rfc49_curve_geometries.rst:415
msgid "Additions:"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:228
msgid ""
"GetGeomType() : unchanged. For other fields, use "
"GetLayerDefn()->GetGeomField(i)->GetType()"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:231
msgid ""
"GetSpatialRef(): Currently the default implementation returns NULL. It "
"will be changed to return "
"GetLayerDefn()->GetGeomField(0)->GetSpatialRef() (if there is at least "
"one geometry field). New drivers are encouraged not to specialize "
"GetSpatialRef() anymore, but to appropriately set the SRS of their first "
"geometry field. For other fields, use "
"GetLayerDefn()->GetGeomField(i)->GetSpatialRef()."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:239
msgid ""
"Caveat: as SRS wasn't previously stored at the OGRFeatureDefn level, all "
"existing drivers, if not updated, will have "
"GetGeomField(0)->GetSpatialRef() returning NULL. The test_ogrsf utility "
"will check and warn about this. Update of existing drivers will be made "
"progressively. In the mean time, using OGRLayer::GetSpatialRef() will be "
"advized to get the SRS of the first geometry field in a reliable way."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:247
#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:258
msgid "add :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:264
msgid ""
"no DeleteGeomField(), ReorderGeomFields() or AlterGeomFieldDefn() for "
"now. Could be added later if the need arises."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:267
msgid ""
"GetGeometryColumn() : unchanged. Routed onto the first geometry field. "
"For other fields, use GetLayerDefn()->GetGeomField(i)->GetNameRef()"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:271
msgid ""
"SetIgnoredFields() : iterate over the geometry fields in addition to "
"regular fields. The special \"OGR_GEOMETRY\" value will only apply to the"
" first geometry field."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:275
msgid ""
"Intersection(), Union(), etc... : unchanged. Later improvements could use"
" the papszOptions parameter to specify an alternate geometry field"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:278
msgid ""
"TestCapability(): add a OLCCreateGeomField capability to inform if "
"CreateGeomField() is implemented."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:282
msgid "OGRDataSource class"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:284
msgid "Impact on OGRDataSource class :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:286
msgid ""
"CreateLayer() : signature will be unchanged. If more than one geometry "
"fields are needed, OGRLayer::CreateGeomField() must be used. If the name "
"of the first geometry field must be specified, for datasources supporting"
" ODsCCreateGeomFieldAfterCreateLayer, using code should call "
"CreateLayer() with eGType = wkbNone and then add all geometry fields with"
" OGRLayer::CreateGeomField()."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:293
msgid ""
"CopyLayer() : adapted to replicate all geometry fields (if supported by "
"target layer)"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:296
msgid ""
"ExecuteSQL() : takes a spatial filter. In the case of the generic OGR SQL"
" implementation, this filter is a facility. It could also as well be "
"applied on the returned layer object. So there is no real need for adding"
" a way of specifying the geometry field at the ExecuteSQL() API level."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:302
msgid ""
"TestCapability(): add a ODsCCreateGeomFieldAfterCreateLayer capability to"
" inform if CreateGeomField() is implemented after layer creation and that"
" CreateLayer() can be safely called with eGType = wkbNone."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:308
msgid "Explored alternative solutions"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:310
msgid ""
"( This paragraph can be skipped if you are totally convinced by the "
"proposed approach detailed above :-) )"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:313
msgid ""
"A possible alternative solution would have been to extend the existing "
"OGRFieldDefn object with information related to the geometry. That would "
"have involved adding a OFTGeometry value in the OGRFieldType enumeration,"
" and adding the OGRwkbGeometryType eGeomType and OGRSpatialReference\\* "
"poSRS members to OGRFieldDefn. At OGRFeature class level, the OGRField "
"union could have been extended with a OGRGeometry\\* field. Similarly at "
"OGRLayer level, CreateField() could have been used to create new geometry"
" fields."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:322
msgid ""
"The main drawback of this approach, which seems the most natural way, is "
"backward compatibility. This would have affected all places in OGR own "
"code or external code where fields are retrieved and geometry is not "
"expected. For example, in code like the following (very common in the "
"CreateFeature() of most drivers, or in user code consuming features "
"returned by GetNextFeature()) :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:338
msgid ""
"This would lead, for legacy code, to geometry being handled as regular "
"field. We could imagine that GetFieldAsString() converts the geometry as "
"WKT, but it is doubtfull that this would really be desired. "
"Fundamentally, the handling of attribute and geometry fields is different"
" in most use cases."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:344
msgid ""
"(On the other side, if we introduce 64bit integer as a OGR type (this is "
"an RFC that is waiting for implementation...), the above code would still"
" produce a meaningful result. The string reprentation of a 64bit integer "
"is not that bad as a default behavior.)"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:349
msgid ""
"GetFieldCount() would also take into account geometry fields, but in most"
" cases, you would need to subtract them."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:352
msgid ""
"A possible way of avoiding the above compatibility issue would be to have"
" 2 sets of API at OGRFeatureDefn and OGRFeature level. The current one, "
"that would ignore the geometry fields, and an \"extended\" one that would"
" take them into account. For example, OGRFeatureDefn::GetFieldCountEx(), "
"OGRFeatureDefn::GetFieldIndexEx(), OGRFeatureDefn::GetFieldDefnEx(), "
"OGRFeature::GetFieldEx(), OGRFeature::SetFieldAsXXXEx() would take into "
"account both attribute and geometry fields. The annoying thing with that "
"approach is the duplication of the ~ 20 methods GetField() and "
"SetFieldXXX() in OGRFeature."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:366
msgid "The following functions are added to the C API :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:420
msgid "OGR SQL engine"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:422
msgid ""
"Currently, \"SELECT fieldname1[, ...fieldnameN] FROM layername\" returns "
"the specified fields, as well as the associated geometry. This behavior "
"is clearly not following the behavior of spatial RDBMS where the geometry"
" field must be explicitly specified."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:427
msgid ""
"The following compromise between backward compatibility and the new "
"capabilities of this RFC is adopted :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:430
msgid ""
"if no geometry field is explicitly specified in the SELECT clause, and "
"there is only one geometry fields associated with the layer, then return "
"it implicitly"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:433
msgid ""
"otherwise, only return the explicitly mentioned geometry fields (or all "
"geometry fields if \"*\" is used)."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:437
#: ../../source/development/rfc/rfc45_virtualmem.rst:1113
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:192
msgid "Limitations"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:439
msgid "Geometries from joined layers will not be fetched, as currently."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:440
msgid ""
"UNION ALL will only handle the default geometry, as currently. (could be "
"extended in later work.)"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:442
msgid ""
"The special fields OGR_GEOMETRY, OGR_GEOM_WKT and OGR_GEOM_AREA will "
"operate on the first geometry field. It does not seem wise to extend this"
" ad-hoc syntax. A better alternative will be the OGR SQLite dialect (with"
" Spatialite support), once it is updated to support multi-geometry (not "
"in the scope of this RFC)"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:452
msgid "Updated drivers in the context of this RFC"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:454
msgid "PostGIS:"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:456
msgid ""
"a ad-hoc form of support already exists. Tables with multiple geometries "
"are reported currently as layers called \"table_name(geometry_col_name)\""
" (as many layers as geometry columns). This behavior will be changed so "
"that the table is reported only once as a OGR layer."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:462
msgid "PGDump:"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:464
msgid "add write support for multi-geometry tables."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:466
msgid "Memory:"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:468
msgid "updated as a simple illustration of the new capabilities."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:470
msgid "Interlis:"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:472
msgid ""
"updated to support multiple geometry fields (as well as other changes "
"unrelated to this RFC)"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:476
msgid "Other candidate drivers (upgrade not originally covered by this RFC)"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:478
msgid ""
"GML driver : currently, only one geometry per feature reported. "
"Possibility of changing this by hand-editing of the .gfs file --> "
"implemented post RFC in GDAL 1.11"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:481
msgid "SQLite driver :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:483
msgid "currently, same behavior as current PostGIS driver."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:484
msgid ""
"both the driver and the SQLite dialect could be updated to support multi-"
"geometry layers. --> implemented post RFC in GDAL 2.0"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:487
msgid ""
"Google Fusion Tables driver : currently, only the first found geometry "
"column used. Possibility of specifying "
"\"table_name(geometry_column_name)\" as the layer name passed to "
"GetLayerByName()."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:491
msgid ""
"VRT : some thoughts needed to find the syntax to support multiple "
"geometries. Impacted XML syntax : . at OGRVRTLayer element level : "
"GeometryType, LayerSRS, GeomField, SrcRegion, ExtentXMin/YMin/XMax/YMax, "
". at OGRVRTWarpedLayer element level : add new element to select the "
"geometry field . at OGRVRTUnionLayer element level : GeometryType, "
"LayerSRS, ExtentXMin/YMin/XMax/YMax --> implemented post RFC in GDAL 1.11"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:498
msgid ""
"CSV : currently, take geometries from column named \"WKT\". To be "
"extended to support multiple geometry columns. Not sure worth the effort."
" Could be done with the extended VRT driver. --> implemented post RFC in "
"GDAL 1.11"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:502
msgid ""
"WFS : currently, only single-geometry layers supported. The standard "
"allows multi-geometry. Would require GML driver support first."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:504
msgid "Other RDBMS based drivers: MySQL ?, MSSQLSpatial ? Oracle Spatial ?"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:510
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:326
msgid "ogrinfo"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:512
msgid ""
"ogrinfo will be updated to report information related to multi-geometry "
"support. Output is expected to be unchanged w.r.t current output in the "
"case of single-geometry datasource."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:516
msgid "Expected output for multi-geometry datasource:"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:580
msgid ""
"A \"-geomfield\" option will be added to specify on which field the -spat"
" option applies."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:584
msgid "ogr2ogr"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:586
msgid "Enhacements :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:588
msgid ""
"will translate multi-geometry layers into multi-geometry layers if "
"supported by output layer (OLCCreateGeomField capability). In case it is "
"not supported, only translates the first geometry."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:591
msgid ""
"\"-select\" option. If only attribute field names are specified, all "
"input geometries will be implicitly selected (backward compatible "
"behavior). If one or several geometry field names are specified, only "
"those ones will be selected."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:595
msgid ""
"add a \"-geomfield\" option to specify on which field the -spat option "
"applies"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:597
msgid ""
"the various geometry transformations (reprojection, clipping, etc.) will "
"be applied on all geometry fields."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:601
msgid "test_ogrsf"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:603
msgid "Will be enhanced with a few consistency checks :"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:605
msgid ""
"OGRLayer::GetSpatialRef() == "
"OGRFeatureDefn::GetGeomField(0)->GetSpatialRef()"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:607
msgid "OGRLayer::GetGeomType() == OGRFeatureDefn::GetGeomField(0)->GetGeomType()"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:609
msgid ""
"OGRLayer::GetGeometryColumn() == "
"OGRFeatureDefn::GetGeomField(0)->GetNameRef()"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:612
msgid "Spatial filtering tests will loop over all geometry fields."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:617
msgid ""
"In addition to function level documentation, the new capability will be "
"documented in the :ref:`vector_data_model` and :ref:`vector_api_tut` "
"documents."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:623
msgid ""
"The new C API will be mapped to SWIG bindings. It will be only tested "
"with the Python bindings. No new typemaps are expected, so this should "
"work with other languages in a straightforward way."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:630
msgid ""
"Changes are only additions to the existing API, and existing behavior "
"should be preserved, so this will be backwards compatible."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:633
msgid "C++ ABI changes"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:635
msgid ""
"Change of behavior in PostGIS driver w.r.t GDAL 1.10 for tables with "
"multiple geometries."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:641
msgid ""
"Even Rouault will implement the above described changes for GDAL 1.11 "
"release, except the upgrade of the Interlis driver that will be done by "
"Pirmin Kalberer."
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:646
msgid "Funding"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:648
msgid ""
"This work is funded by the `Federal Office of Topography (swisstopo), "
"COGIS "
"<http://www.swisstopo.admin.ch/internet/swisstopo/en/home/swisstopo/org/kogis.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc41_multiple_geometry_fields.rst:654
msgid "+1 from EvenR, FrankW, HowardB, DanielM and TamasS"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:5
msgid "RFC 42: OGR Layer laundered field lookup"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:7
msgid "Author: Jürgen Fischer"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:9
msgid "Contact: jef at norbit dot de"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:14
msgid ""
"This (mini)RFC proposes a new method in the OGR layer class (and a C API)"
" to lookup the field index of fields, whose names have been altered by "
"drivers (eg. by LAUNDER in OCI or Pg)."
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:21
msgid ""
"There is already a pull request on github "
"(`https://github.com/OSGeo/gdal/pull/23 "
"<https://github.com/OSGeo/gdal/pull/23>`__) that implements this RFC. It "
"adds the virtual method OGRLayer::FindFieldIndex(), that implements the "
"usual mapping, which can be overloaded by drivers. The OCI driver does "
"this to optionally return the index of the LAUNDERed field in case the "
"original field does not exists. The pull request also modifies ogr2ogr to"
" make use of that method and offers a switch -relaxedFieldNameMatch to "
"enable it."
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:31
#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:19
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:19
msgid "Background"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:33
msgid ""
"This is a particular problem when using NAS as that usually operates on a"
" pre-existing schema. This schema had to be adapted for Oracle as Oracle "
"has a identifier length restrictions that quite a number of identifiers "
"in NAS exceed. Hence ogr2ogr failed to make the mapping between the short"
" names and their long counter parts and leaves those fields empty."
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:43
msgid ""
"`https://github.com/OSGeo/gdal/pull/23 "
"<https://github.com/OSGeo/gdal/pull/23>`__"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:44
msgid ""
"PostgreSQL NAS schema: "
"`http://trac.wheregroup.com/PostNAS/browser/trunk/import/alkis_PostNAS_schema.sql"
" "
"<http://trac.wheregroup.com/PostNAS/browser/trunk/import/alkis_PostNAS_schema.sql>`__"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:46
msgid ""
"Oracle NAS schema: "
"`http://trac.wheregroup.com/PostNAS/browser/trunk/import/alkis_PostNAS_ORACLE_schema.sql"
" "
"<http://trac.wheregroup.com/PostNAS/browser/trunk/import/alkis_PostNAS_ORACLE_schema.sql>`__"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:48
msgid ""
"conversion script from Pg to OCI: "
"`http://trac.wheregroup.com/PostNAS/browser/trunk/import/pg-to-oci.pl "
"<http://trac.wheregroup.com/PostNAS/browser/trunk/import/pg-to-oci.pl>`__"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:54
msgid "+1 from DanielM, EvenR, FrankW, TamasS, JukkaR and jef"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:57
msgid "Commits"
msgstr ""

#: ../../source/development/rfc/rfc42_find_laundered_fields.rst:59
msgid "r26572 & r26573"
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:5
msgid "RFC 43: GDALMajorObject::GetMetadataDomainList"
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:14
msgid ""
"This (mini)RFC proposes a new virtual method, GetMetadataDomainList(), in"
" the GDALMajorObject class (and a C API) to return the list of all "
"available metadata domains."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:21
msgid ""
"GDALMajorObject currently offers the GetMetadata() and GetMetadataItem() "
"methods that both accept a metadata domain argument. But there is no way "
"to auto-discover which metadata domains are valid for a given "
"GDALMajorObject (i.e. a dataset or raster band). This make it impossible "
"to have generic code that can exhaustively discover all metadata in a "
"dataset/raster band."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:31
msgid ""
"The base implementation in GDALMajorObject just calls GetDomainList() on "
"the internal oMDMD member."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:57
msgid ""
"This method is also available in the C API ( char \\*\\* CPL_STDCALL "
"GDALGetMetadataDomainList( GDALMajorObjectH hObject) ) and Swig bindings."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:62
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:314
msgid "Impacted drivers"
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:64
msgid ""
"Drivers that have custom implementations of GetMetadata() and/or "
"GetMetadataItem() will generally have to also implement "
"GetMetadataDomainList(), when they don't modify the oMDMD member."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:68
msgid ""
"To make it easy to implement the specialized GetMetadataDomainList(), "
"GDALMajorObject will offer a protected BuildMetadataDomainList() method "
"that can be used like the following :"
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:87
msgid ""
"The TRUE parameter means that the list of domains that follows are "
"potential domains, and thus BuildMetadataDomainList() will check for each"
" one that GetMetadata() returns a non-NULL value."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:91
msgid ""
"An exhaustive search in GDAL drivers has been made and all drivers that "
"needed to be updated to implement GetMetadataDomainList() have been "
"updated: ADRG, BAG, CEOS2, DIMAP, ECW, ENVISAT, ERS, GeoRaster (cannot "
"check myself that it compiles), GIF, GTiff, HDF4, JPEG, MBTILES, netCDF, "
"NITF, OGDI, PCIDSK, PDF, PNG, PostgisRaster, RasterLite, RS2, VRT, WCS, "
"WebP, WMS."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:98
msgid "A few caveats :"
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:100
msgid ""
"For MBTiles, WMS and VRT, GetMetadataDomainList(), at the band level, "
"will return \"LocationInfo\" as a valid metadata domain (used by the "
"gdallocationinfo utility), even if GetMetadata(\"LocationInfo\") itself "
"does not return metadata : you have to call "
"GetMetadataItem(\"Pixel_someX_someY\", \"LocationInfo\") or "
"GetMetadataItem(\"GeoPixel_someX_someY\", \"LocationInfo\")."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:106
msgid ""
"For CEOS2 and ENVISAT, the list of metadata domains cannot be established"
" easily. GetMetadataDomainList() will return the pattern of accepted "
"domain names."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:111
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:319
msgid "Impacted utilities"
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:113
msgid "The gdalinfo utility is extended to accept :"
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:115
msgid "a \"-listmdd\" option that will print the metadata domains available,"
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:139
msgid "and \"-mdd all\" will display the content of all metadata domains."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:226
msgid ""
"This change has no impact on backward compatibility at the C API/ABI and "
"C++ API levels. But it impacts C++ ABI, so it requires a full rebuild of "
"all GDAL drivers."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:233
msgid ""
"The Python autotest suite will be extended to test the new API in a few "
"drivers."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:239
msgid "Ticket #5275 has been opened to track the progress of this RFC."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:241
msgid ""
"The implementation is available in `an attachment to ticket 5275 "
"<http://trac.osgeo.org/gdal/attachment/ticket/5275/getmetadatadomainlist.patch>`__."
msgstr ""

#: ../../source/development/rfc/rfc43_getmetadatadomainlist.rst:247
msgid "+1 from EvenR, DanielM and JukkaR"
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:5
msgid "RFC 44: Add Parseable Output Formats for ogrinfo and gdalinfo"
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:7
msgid "Authors: Dan \"Ducky\" Little, Faza Mahamood"
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:9
msgid "Contacts: danlittle at yahoo dot com, fazamhd at live dot com"
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:11
msgid "Status: Development. gdalinfo -json implemented in GDAL 2.0"
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:16
msgid "Add XML and JSON output to the ogrinfo and gdalinfo utilities."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:21
msgid ""
"ogrinfo and gdalinfo are incredibly useful metadata gathering tools. "
"Their native text-based output formats, however, are not easily parseable"
" by common external tools. Both XML and JSON are easily parsed and adding"
" those output formats would substantially increase the utility for those "
"looking to add the ogrinfo and gdalinfo utilities to a scripting stack."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:31
msgid ""
"An example implementation can be seen at the following github fork "
"`https://github.com/theduckylittle/gdal/blob/trunk/gdal/apps/ogrinfo.cpp "
"<https://github.com/theduckylittle/gdal/blob/trunk/gdal/apps/ogrinfo.cpp>`__"
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:34
msgid ""
"To add the XML output to each utility will require \"breaking up\" the "
"main loop into contingent chunks. All diagnostic messages will also need "
"to be moved to STDERR to ensure that output on STDOUT is always "
"parseable. The XML representation will be constructed using the MiniXML "
"library built into GDAL."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:41
msgid "Proposed json format for gdalinfo"
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:316
msgid "None."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:321
msgid "gdalinfo"
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:323
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:328
msgid "Adds a \"-xml\" output option."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:324
#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:329
msgid "Adds a \"-json\" output option."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:334
msgid ""
"This change has no impact on backward compatibility at the C API/ABI and "
"C++ API/ABI levels. Default output will remain the same. The new XML "
"output will only effect users who specify \"-xml\" or \"-json\" on the "
"command line."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:342
msgid ""
"The Python autotest suite will be extended to test the new XML/JSON "
"outputs and existing tests will be modified to check STDERR for "
"diagnostic messages."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:349
msgid "No tickets."
msgstr ""

#: ../../source/development/rfc/rfc44_gdalinfoxml.rst:354
msgid "Proposed."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:5
msgid "RFC 45: GDAL datasets and raster bands as virtual memory mappings"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:16
msgid ""
"This document proposes additions to GDAL so that image data of GDAL "
"datasets and raster bands can be seen as virtual memory mappings, for "
"hopefully simpler usage."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:23
msgid ""
"When one wants to read or write image data from/into a GDAL dataset or "
"raster band, one must use the RasterIO() interface for the regions of "
"interest that are read or written. For small images, the most convenient "
"solution is usually to read/write the whole image in a single request "
"where the region of interest is the full raster extent. For larger "
"images, particularly when they do not fit entirely in RAM, this is not "
"possible, and if one wants to operate on the whole image, one must use a "
"windowing strategy to avoid memory issues : typically by proceeding "
"scanline (or group of scanlines) by scanline, or by blocks for tiled "
"images. This can make the writing of algorithms more complicated when "
"they need to access a neighbourhood of pixels around each pixel of "
"interest, since the size of this extra window must be taken into account,"
" leading to overlapping regions of interests. Nothing that cannot be "
"solved, but that requires some additional thinking that distracts from "
"the followed main purpose."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:39
msgid ""
"The proposed addition of this RFC is to make the image data appear as a "
"single array accessed with a pointer, without being limited by the size "
"of RAM with respect to the size of the dataset (excepted limitations "
"imposed by the CPU architecture and the operating system)"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:45
msgid "Technical solution"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:48
msgid "Low-level machinery : cpl_virtualmem.h"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:50
msgid ""
"The low-level machinery to support this new capability is a CPLVirtualMem"
" object that represents an area of virtual memory ( on Linux, an area of "
"virtual memory allocated by the mmap() function ). This virtual memory "
"area is initially just reserved in terms of virtual memory space, but has"
" no actual allocation in physical memory. This reserved virtual memory "
"space is protected with an access permission that cause any attempt to "
"access it to result in an exception - a page fault, that on POSIX systems"
" triggers a SIGSEGV signal (segmentation fault). Fortunately, "
"segmentation faults can be caught by the software with a signal handler. "
"When such a segmentation fault occurs, our specialized signal handler "
"will check if it occurs in a virtual memory region under its "
"responsibility and, if so, it will proceed to fill the part (a \"page\") "
"of the virtual memory area that has been accessed with sensible values "
"(thanks to a user provided callback). It will then set appropriate "
"permissions to the page (read-only or read-write), before attempting "
"again the instruction that triggered the segmentation fault. From the "
"point of view of the user code that accesses the memory mapping, this is "
"completely transparent, and this is equivalent as if the whole virtual "
"memory area had been filled from the start."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:70
msgid ""
"For very large mappings that are larger than RAM, this would still cause "
"disk swapping to occur at a certain point. To avoid that, the "
"segmentation fault handler will evict the least recently used pages, once"
" a threshold defined at the creation of the CPLVirtualMem object has been"
" reached."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:76
msgid ""
"For write support, another callback can be passed. It will be called "
"before a page is evicted so that user code has a chance to flush its "
"content to a more persistent storage."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:80
msgid ""
"We also offer an alternative way of creating a CPLVirtualMem object, by "
"using memory file mapping mechanisms. This may be used by \"raw\" "
"datasets (EHdr driver for example) where the organization of data on disk"
" directly matches the organization of a in-memory array."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:86
msgid "High-level usage"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:88
msgid "Four new API are introduced (detailed in further section):"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:90
msgid ""
"GDALDatasetGetVirtualMem() : takes almost the same arguments as "
"GDALDatasetRasterIO(), with the notable exception of a pData buffer. It "
"returns a CPLVirtualMem\\* object, from which the base address of the "
"virtual memory mapping can be obtained with CPLVirtualMemGetAddr()."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:98
msgid ""
"GDALRasterBandGetVirtualMem(): equivalent of GDALDatasetGetVirtualMem() "
"that operates on a raster band object rather than a dataset object."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:102
msgid ""
"GDALDatasetGetTiledVirtualMem(): this is a rather original API. Instead "
"of presenting a 2D view of the image data (i.e. organized rows by rows), "
"the mapping exposes it as an array of tiles, which is more suitable, "
"performance wise, when the dataset is itself tiled."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:109
msgid ""
"When they are several bands, 3 different organizations of band components"
" are possible. To the best of our knowledge, there is no standard way of "
"calling those organizations, which consequently will be best illustrated "
"by the following schemas :"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:114
msgid "TIP / Tile Interleaved by Pixel"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:119
msgid "BIT / Band Interleaved by Tile"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:124
msgid "BSQ / Band SeQuential organization"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:129
msgid ""
"GDALRasterBandGetTiledVirtualMem(): equivalent of "
"GDALDatasetGetTiledVirtualMem() that operates on a raster band object "
"rather than a dataset object."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:133
msgid ""
"GDALGetVirtualMemAuto(): simplified version of "
"GDALRasterBandGetVirtualMem() where the user only specifies the access "
"mode. The pixel spacing and line spacing are returned by the function. "
"This is implemented as a virtual method at the GDALRasterBand level, so "
"that drivers have a chance of overriding the base implementation. The "
"base implementation justs uses GDALRasterBandGetVirtualMem(). Overridden "
"implementation may use the memory file mapping mechanism instead. Such "
"implementations will be done in the RawRasterBand object and in the "
"GeoTIFF driver."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:144
msgid "Details of new API"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:149
msgid "Implemented by cpl_virtualmem.cpp"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:503
msgid "Implemented by gdalvirtualmem.cpp"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:972
msgid "Implemented by gdalrasterband.cpp"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1045
#: ../../source/development/rfc/rfc8_devguide.rst:20
msgid "Portability"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1047
msgid ""
"The CPLVirtualMem low-level machinery is only implemented for Linux now. "
"It assumes that returning from a SIGSEGV handler is possible, which is a "
"blatant violation of POSIX, but in practice it seems that most POSIX (and"
" non POSIX such as Windows) systems should be able to resume execution "
"after a segmentation fault."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1053
msgid ""
"Porting to other POSIX operating systems such as MacOSX should be doable "
"with moderate effort. Windows has API that offer similar capabilities as "
"POSIX API with VirtualAlloc(), VirtualProtect() and "
"SetUnhandledExceptionFilter(), although the porting would undoubtly "
"require more effort."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1059
msgid ""
"The existence of `libsigsegv <http://www.gnu.org/software/libsigsegv>`__ "
"that run on various OS is an evidence on its capacity of being ported to "
"other platforms."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1063
msgid ""
"The trickiest part is ensuring that things will work reliably when two "
"concurrent threads that try to access the same initially unmapped page. "
"Without special care, one thread could manage to access the page that is "
"being filled by the other thread, before it is completely filled. On "
"Linux this can be easily avoided with the mremap() call. When a page is "
"filled, we don't actually pass the target page to the user callback, but "
"a temporary page. When the callback has finished its job, this temporary "
"page is mremap()'ed to its target location, which is an atomic operation."
" An alternative implementation for POSIX systems that don't have this "
"mremap() call has been tested : any declared threads that can access the "
"memory mapping are paused before the temporary page is memcpy'ed to its "
"target location, and are resumed afterwards. This requires threads to "
"priorly declare their \"interest\" for a memory mapping with "
"CPLVirtualMemDeclareThread(). Pausing a thread is interestingly non-"
"obvious : the solution found to do so is to send it a SIGUSR1 signal and "
"make it wait in a signal handler for this SIGUSR1 signal... It has not "
"been investigated if/how this could be done on Windows. "
"CPLVirtualMemIsAccessThreadSafe() has been introduced for that purpose."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1083
msgid ""
"As far as CPLVirtualMemFileMapNew() is concerned, memory file mapping on "
"POSIX systems with mmap() should be portable. Windows has "
"CreateFileMapping() and MapViewOfFile() API that have similar "
"capabilities as mmap()."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1089
msgid "Performance"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1091
msgid ""
"No miraculous performance gain should be expected from this new "
"capability, when compared to code that carefully uses GDALRasterIO(). "
"Handling segmentation faults has a cost ( the operating system catches a "
"hardware exception, then calls the user program segmentation fault "
"handler, which does the normal GDAL I/O operations, and plays with page "
"mappings and permissions which invalidate some CPU caches, etc... ). "
"However, when a page has been realized, access to it should be really "
"fast, so with appropriate access patterns and cache size, good "
"performance should be expected."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1101
msgid ""
"It should also be noted that in the current implementation, the "
"realization of pages is done in a serialized way, that is to say if 2 "
"threads which use 2 different memory mappings cause a segmentation fault "
"at the same time, they will not be dealt by 2 different threads, but one "
"after the other one."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1107
msgid ""
"The overhead of virtual memory objects returned by GetVirtualMemAuto(), "
"when using the memory file mapping, should be lesser than the manual "
"management of page faults. However, GDAL has no control of the strategy "
"used by the operating system to cache pages."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1115
msgid ""
"The maximum size of the virtual memory space (and thus a virtual memory "
"mapping) depends on the CPU architecture and OS limitations :"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1118
msgid "on Linux AMD64, 128 TB."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1119
msgid "on Linux x86, 2 GB."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1120
msgid "On Windows AMD64 (unsupported by the current implementation), 8 TB."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1121
msgid "On Windows x86 (unsupported by the current implementation), 2 GB."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1123
msgid ""
"Clearly, the main interest of this new functionality is for AMD64 "
"platforms."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1126
msgid ""
"On a Linux AMD64 machine with 4 GB RAM, the Python binding of "
"GDALDatasetGetTiledVirtualMem() has been successfully used to access "
"random points on the new `Europe 3'' DEM dataset "
"<http://www.eea.europa.eu/data-and-maps/data/eu-dem/#tab-original-"
"data>`__, which is a 20 GB compressed GeoTIFF ( and 288000 \\* 180000 \\*"
" 4 = 193 GB uncompressed )"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1134
msgid "Related thoughts"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1136
msgid ""
"Some issues with system calls such as read() or write(), or easier multi-"
"threading could potentially be solved by making a FUSE (File system in "
"USEr space) driver that would expose a GDAL dataset as a file, and the "
"mmap()'ing the file itself. However FUSE drivers are only available on "
"POSIX OS, and need root privilege to be mounted (a FUSE filesystem does "
"not need root privilege to run, but the mounting operation does)."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1145
msgid "Open questions"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1147
msgid ""
"Due to the fact that it currently only works on Linux, should we mark the"
" API as experimental for now ?"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1151
msgid "Backward compatibility issues"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1153
msgid ""
"C/C++ API --> compatible (new API). C ABI --> compatible (new API). C++ "
"ABI --> incompatibility because GDALRasterBand has a new virtual method."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1157
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:37
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:56
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:54
msgid "Updated drivers"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1159
msgid ""
"The RawRasterBand object and GeoTIFF drivers will be updated to implement"
" GetVirtualMemAuto() and offer memory file mapping when possible (see "
"above documented restrictions on when this is possible)."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1163
msgid ""
"In future steps, other drivers such as the VRT driver (for "
"VRTRawRasterBand) could also offer a specialized implementation of "
"GetVirtualMemAuto()."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1170
msgid ""
"The high level API (dataset and raster band) API is available in Python "
"bindings."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1173
msgid ""
"GDALDatasetGetVirtualMem() is mapped as Dataset.GetVirtualArray(), which "
"returns a NumPy array."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1192
msgid "Similarly for GDALDatasetGetTiledVirtualMem() :"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1213
msgid "And the Band object has the following 3 methods :"
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1242
msgid ""
"Note: dataset/Band.GetVirtualMem()/GetTiledVirtualMem() methods are also "
"available. They return a VirtualMem python object that has a GetAddr() "
"method that returns a Python memoryview object (Python 2.7 or later "
"required). However, using such object does not seem practical for non-"
"Byte data types."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1251
msgid ""
"The autotest suite will be extended to test the Python API of this RFC. "
"It will also test the specialized implementations of GetVirtualMemAuto() "
"in RawRasterBand and the GeoTIFF drivers. In autotest/cpp, a "
"test_virtualmem.cpp file tests concurrent access to the same pages by 2 "
"threads."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1260
msgid ""
"Implementation will be done by Even Rouault in GDAL/OGR trunk. The "
"proposed implementation is attached as a `patch "
"<http://trac.osgeo.org/gdal/attachment/wiki/rfc45_virtualmem/virtualmem.patch>`__."
msgstr ""

#: ../../source/development/rfc/rfc45_virtualmem.rst:1267
msgid "+1 from EvenR, FrankW, DanielM and JukkaR"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:5
msgid "RFC 46: GDAL/OGR unification"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:16
msgid ""
"In the 1.X series of GDAL/OGR, the GDAL/raster and OGR/vector sides are "
"quite different on some aspects even where there is no strong reason for "
"them to be different, particularly in the structure of drivers. This RFC "
"aims at unifying the OGR driver structure with the GDAL driver structure."
" The main advantages of using the GDAL driver structure are :"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:22
msgid ""
"metadata capabilities : description of driver, extensions, creation "
"options, virtual IO capability ..."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:24
msgid "efficient driver identification and opening."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:26
msgid ""
"Similarly, OGR datasource and layer classes lack the metadata mechanisms "
"offered by the corresponding GDAL dataset and raster band classes."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:29
msgid ""
"Another aspect is that the separation between GDAL \"datasets\" and OGR "
"\"datasources\" is sometimes artificial. Various data containers can "
"accept both data types. The list of drivers that have a GDAL side and OGR"
" side is : SDTS, PDS, GRASS, KML, Spatialite/Rasterlite, GeoPackage "
"(raster side not yet implemented), PostGIS/PostGIS Raster, PDF, PCIDSK, "
"FileGDB (raster side not yet implemented). For applications that are "
"interested in both, this currently means to open the file twice with "
"different API. And for update mode, for file-based drivers, the updates "
"must be done sequentially to avoid opening a file twice simultaneously in"
" update mode and making conflicting changes."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:41
#: ../../source/development/rfc/rfc68_cplusplus11.rst:249
msgid "Related RFCs"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:43
msgid ""
"There are a few related past RFCs that have never been adopted but "
"strongly relate to RFC 46 :"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:46
msgid ""
"`RFC 10: OGR Open Parameters <./rfc10_ogropen>`__. All the functionality "
"described in RFC 10 is included in RFC 46, mainly the GDALOpenEx() new "
"API"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:49
msgid ""
"`RFC 25: Fast Open <./rfc25_fast_open>`__. RFC 25 mentions avoiding to "
"systematically listing the sibling files to the file being opened. This "
"can now achieved in RFC 46 by lazy loading with "
"GDALOpenInfo::GetSiblingFiles(). At least Identify() should not trigger "
"GetSiblingFiles()."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:54
msgid ""
"`RFC 36: Allow specification of intended on GDALOpen "
"<./rfc36_open_by_drivername>`__. The new GDALOpenEx() accepts a list of a"
" subset drivers that must be probed, as suggested by RFC36. The "
"specification of the drivers on the command line of utilities could be "
"easily done through a new option, but that's not in the scope of RFC 46."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:60
msgid ""
"`RFC 38: OGR Faster Open <./rfc38_ogr_faster_open>`__ is completely "
"included in RFC 46 through the possibility of using Open(GDALOpenInfo*) "
"in OGR drivers"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:65
#: ../../source/development/rfc/rfc68_cplusplus11.rst:162
msgid "Self-assigned development constraints"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:67
#: ../../source/development/rfc/rfc68_cplusplus11.rst:164
msgid ""
"The changes should have moderate impact on the existing GDAL/OGR code "
"base, and particularly on most of its code, that lies in drivers. "
"Existing users of the GDAL/OGR API should also be moderately impacted by "
"the changes, if they do not need to use the new offered capabilities."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:73
#: ../../source/development/rfc/rfc68_cplusplus11.rst:174
msgid "Core changes: summary"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:75
msgid "OGRSFDriver extends GDALDriver."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:76
msgid "Vector drivers can be implemented as GDALDriver."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:77
msgid ""
"OGRSFDriverRegistrar is a compatibility wrapper around GDALDriverManager "
"for legacy OGRSFDriver."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:79
msgid "OGRDataSource extends GDALDataSource."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:80
msgid "GDALOpenEx() API is added to be able to open \"mixed\" datasets."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:81
msgid "OGRLayer extends GDALMajorObject, thus adding metadata capability."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:82
msgid ""
"The methods of OGRDataSource related to layers are moved to GDALDataset, "
"making it both a raster and vector capable container."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:84
msgid "Performance improvements in GDALOpenInfo() mechanism."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:85
msgid ""
"New driver metadata item to describe open options (i.e. deprecate the use"
" of configuration option)."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:87
msgid "New driver metadata item to describe layer creation options."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:90
msgid "Core changes: details"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:93
msgid "Drivers and driver registration"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:95
msgid ""
"The OGRSFDriver now extends GDALDriver and is meant as being a legacy way"
" of implementing a vector driver. It is kept mainbly because, in the "
"current implementation, not all drivers have been migrated to being "
"\"pure\" GDALDriver. The CopyDataSource() virtual method has been removed"
" since no in-tree drivers implement it. The inheritance to GDALDriver "
"make it possible to manage vector drivers by the GDALDriverManager, and "
"to be able to attach metadata to them, to document driver long name, link"
" to documentation, file extension, datasource creation options with the "
"existing GDAL\\_DMD\\_\\* metadata items."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:106
msgid ""
"Drivers directly inheriting from GDALDriver (to be opposed to those "
"inheriting from OGRSFDriver) should : - declare SetMetadataItem( "
"GDAL_DCAP_VECTOR, \"YES\" ). - implement pfnOpen() for dataset opening - "
"optionally, implement pfnCreate() for dataset creation. For vector "
"drivers, the nBands parameter of Create() is supposed to be passed to 0. "
"- optionally, implement pfnDelete() for dataset deletion"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:113
msgid ""
"The *C* OGR Driver API will still work with drivers that have been "
"converted as \"pure\" GDALDrivers (this is not true of the C++ OGR Driver"
" API). For example OGR_Dr_GetName() calls GDALDriver::GetDescription(), "
"OGR_Dr_CreateDatasource() calls GDALDriver::Create(), etc..."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:119
msgid ""
"The C++ definition of GDALDriver is extended with the following function "
"pointers so that it can work with legacy OGRSFDriver."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:140
msgid "GDALDriver::Create() can accept nBands == 0 for a vector capable driver."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:143
msgid ""
"GDALDriver::DefaultCreateCopy() can accept a dataset with 0 bands for a "
"vector capable driver, and if the output dataset has layer creation "
"capability and the source dataset has layers, it copies the layers from "
"the source dataset into the target dataset."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:148
msgid ""
"GDALDriver::Identify() now iterates over all kinds of drivers. It has "
"been modified to do a first pass on drivers that have an implementation "
"of Identify(). If no match is found, it does a second pass on all drivers"
" and use the potentially slower Open() as the identification method."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:154
msgid ""
"Related to the above point, the implementations of "
"GDALDriver::pfnIdentify function pointer used to return a boolean value "
"to indicate if the passed GDALOpenInfo was a match for the driver. For "
"some drivers, this was too restrictive so that they were able to "
"implement Identify(). For example where the detection logic can return "
"\"yes, I definitely recognize that file\", \"no, it is not for me\" or "
"\"I have not enough elements in GDALOpenInfo to be able to tell\". That "
"last state can now be advertized with a negative return value."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:164
msgid ""
"The OGRSFDriverRegistrar is trimmed down to be mostly a wrapper around "
"GDALDriverManager. In particular, it does not contain any longer a list "
"of drivers. The Open(), OpenShared(), ReleaseDataSource(), "
"DeregisterDriver() and AutoLoadDrivers() methods are removed from the "
"class. This change can have impact on C++ code. A few adaptations in OGR "
"utilities have been done to accommodate for those changes. The "
"RegisterDriver() API has been kept for legacy OGR drivers and it "
"automatically sets SetMetadataItem( GDAL_DCAP_VECTOR, \"YES\" ). The "
"GetDriverCount(), GetDriver() and GetDriverByName() methods delegate to "
"GDALDriverManager and make sure to only take into account drivers that "
"have the GDAL_DCAP_VECTOR capability. In the case a driver has the same "
"name as GDAL and OGR driver, the OGR variant is internally prefixed with "
"OGR\\_, and GetDriverByName() will first try the OGR\\_ variant. The "
"GetOpenDSCount() and GetOpenDS() have now a dummy implementation "
"returning 0/NULL. For reference, neither MapServer nor QGIS use those "
"functions."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:181
msgid ""
"OGRRegisterAll() is now an alias of GDALAllRegister(). The past "
"OGRRegisterAll() is now renamed OGRRegisterAllInternal() and called by "
"GDALAllRegister(). So, GDALAllRegister() and OGRRegisterAll() are now "
"equivalent and register all drivers."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:186
msgid "GDALDriverManager has received a few changes :"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:188
msgid ""
"use of a map from driver name to driver object to speed-up "
"GetDriverByName()"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:190
msgid ""
"accept OGR_SKIP and OGR_DRIVER_PATH configuration options for backward "
"compatibility."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:192
msgid ""
"The recommended separator for driver names in GDAL_SKIP is now comma "
"instead of space (similarly to what OGR_SKIP does). This is to make it "
"possible to define OGR driver names in GDAL_SKIP that have spaces in "
"their names like \"ESRI Shapefile\" or \"MapInfo File\". If there is no "
"comma in the GDAL_SKIP value, then space separator is assumed (backward "
"compatibility)."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:198
msgid ""
"removal of GetHome()/SetHome() methods whose purpose seemed to define an "
"alternate path for the search directory of plugins. Those methods only "
"existed at the C++ level, and are redundant with GDAL_DRIVER_PATH "
"configuration option"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:203
msgid ""
"Raster-capable drivers should declare SetMetadataItem( GDAL_DCAP_RASTER, "
"\"YES\" ). All in-tree GDAL drivers have been patched to declare it. But "
"the registration code detects if a driver does not declare any of "
"GDAL_DCAP_RASTER nor GDAL_DCAP_VECTOR, in which case it declares "
"GDAL_DCAP_RASTER on behalf of the un-patched driver, with a debug message"
" inviting to explicitly set it."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:210
msgid "New metadata items :"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:212
msgid ""
"GDAL_DCAP_RASTER=YES / GDAL_DCAP_VECTOR=YES at driver level. To declare "
"that a driver has raster/vector capabilities. A driver can declare both."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:215
msgid ""
"GDAL_DMD_EXTENSIONS (with a final S) at driver level. This is a small "
"evolution of GDAL_DMD_EXTENSION where one can specify several extensions "
"in the value string. The extensions are space-separated. For example "
"\"shp dbf\", \"tab mif mid\", etc... For ease of use, "
"GDALDriver::SetMetadataItem(GDAL_DMD_EXTENSION) also sets the passed "
"value as GDAL_DMD_EXTENSIONS, if it is not already set. So new code can "
"always use GDAL_DMD_EXTENSIONS."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:222
msgid ""
"GDAL_DMD_OPENOPTIONLIST at driver level. The value of this item is an XML"
" snippet with a format similar to creation options. GDALOpenEx(), once it"
" has identified with Identify() that a driver accepts the file, will "
"validate the passed open option list with the authorized open option "
"list. Below an example of such an authorized open option list in the S57 "
"driver"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:295
msgid "Datasets / Datasources"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:297
msgid "The main methods from OGRDataSource have been moved to GDALDataset :"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:376
msgid ""
"OGRDataSource::SyncToDisk() has been removed. The equivalent "
"functionality should be implemented in existing FlushCache(). "
"GDALDataset::FlushCache() nows does the job of the previous generic "
"implementation of OGRDataSource::SyncToDisk(), i.e. iterate over all "
"layers and call SyncToDisk() on them."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:382
msgid "GDALDataset has now a protected ICreateLayer() method."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:402
msgid ""
"GDALOpenEx() is added to be able to open raster-only, vector-only, or "
"raster-vector datasets. It accepts read-only/update mode, shared/non-"
"shared mode. A list of potential candidate drivers can be passed. If "
"NULL, all drivers are probed. A list of open options (NAME=VALUE syntax) "
"can be passed. If the list of sibling files has already been established,"
" it can also be passed. Otherwise GDALOpenInfo will establish it."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:457
msgid "GDALOpenInfo class. The following changes are done :"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:459
msgid ""
"the second argument of the constructor is now nOpenFlags instead of "
"GDALAccess, with same semantics as GDALOpenEx(). GDALOpenInfo uses the "
"read-only/update bit to \"compute\" the eAccess flag that is heavily used"
" in existing drivers. Drivers with both raster and vector capabilities "
"can use the GDAL_OF_VECTOR/GDAL_OF_RASTER bits to determine the intent of"
" the caller. For example if a caller opens with GDAL_OF_RASTER only and "
"the dataset only contains vector data, the driver might decide to not "
"open the dataset (if it is a read-only driver. If it is a driver with "
"update capability, it should do that only if the opening is done in read-"
"only mode)."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:470
msgid ""
"the open options passed to GDALOpenEx() are stored into a "
"papszOpenOptions member of GDALOpenInfo, so that drivers can use them."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:473
msgid ""
"the \"FILE\\* fp\" member is transformed into \"VSILFILE\\* fpL\". This "
"change is motivated by the fact that most popular drivers now use the VSI"
" Virtual File API, so they can now directly use the fpL member instead of"
" re-opening again the file. A global pass on all in-tree GDAL drivers "
"that used fp has been made."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:478
msgid ""
"A VSIStatExL() was done previously to determine the nature of the file "
"passed. Now, we optimistically begin with a VSIFOpenL(), assuming that in"
" most use cases the passed filename is a file. If the opening fails, "
"VSIStatExL() is done to determine the nature of the filename."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:483
msgid ""
"If the requested access mode is update, the opening of the file with "
"VSIFOpenL() is done with \"rb+\" permissions to be directly usable."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:486
msgid ""
"The papszSiblingFiles member is now private. It is accessed by a "
"GetSiblingFiles() method that does the ReadDir() on demand. This can "
"speed up the Identify() method that generally does not require to know "
"sibling files."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:490
msgid ""
"A new method, TryToIngest(), is added to read more than the first 1024 "
"bytes of a file. This is useful for a few vector drivers, like GML or "
"NAS, that must fetch a bit more bytes to be able to identify the file."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:496
msgid "Layer"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:498
msgid ""
"OGRLayer extends GDALMajorObject. Drivers can now define layer metadata "
"items that can be retrieved with the usual "
"GetMetadata()/GetMetadateItem() API."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:502
msgid ""
"The GetInfo() method has been removed. It has never been implemented in "
"any in-tree drivers and has been deprecated for a long time."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:508
msgid ""
"The deprecated and unused GDALProjDefH and GDALOptionDefinition types "
"have been removed from gdal.h"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:511
msgid ""
"GDALGeneralCmdLineProcessor() now interprets the nOptions (combination of"
" GDAL_OF_RASTER and GDAL_OF_RASTER) argument as the type of drivers that "
"should be displayed with the --formats option. If set to 0, "
"GDAL_OF_RASTER is assumed."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:516
msgid ""
"the --formats option of GDAL utilities outputs whether drivers have "
"raster and/or vector capabilities"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:519
msgid ""
"the --format option of GDAL utilities outputs GDAL_DMD_EXTENSIONS, "
"GDAL_DMD_OPENOPTIONLIST, GDAL_DS_LAYER_CREATIONOPTIONLIST."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:522
msgid ""
"OGRGeneralCmdLineProcessor() use GDALGeneralCmdLineProcessor() "
"implementation, restricting --formats to vector capable drivers."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:526
#: ../../source/development/rfc/rfc49_curve_geometries.rst:438
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:96
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:185
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:113
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:87
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:304
msgid "Changes in drivers"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:528
msgid "OGR PCIDSK driver has been merged into GDAL PCIDSK driver."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:530
msgid "OGR PDF driver has been merged into GDAL PDF driver."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:532
msgid ""
"A global pass has been made to in-tree OGR drivers that have to open a "
"file to determine if they recognize it. They have been converted to "
"GDALDriver to accept a GDALOpenInfo argument and they now use its "
"pabyHeader field to examine the first bytes of files. The number of "
"system calls realated to file access (open/stat), in order to determine "
"that a file is not recognized by any OGR driver, has now dropped from 46 "
"in GDAL 1.11 to 1. The converted drivers are : AeronavFAA, ArcGEN, "
"AVCBin, AVCE00, BNA, CSV, DGN, EDIGEO, ESRI Shapefile, GeoJSON, GeoRSS, "
"GML, GPKG, GPSBabel, GPX, GTM, HTF, ILI1, ILI2, KML, LIBKML, MapInfo "
"File, MySQL, NAS, NTF, OpenAIR, OSM, PDS, REC, S57, SDTS, SEGUKOOA, SEGY,"
" SOSI, SQLite, SUA, SVG, TIGER, VFK, VRT, WFS"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:545
msgid "Long driver descrption is set for most OGR drivers."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:547
msgid ""
"All classes deriving from OGRLayer have been modified to call "
"SetDescription() with the value of GetName()/poFeatureDefn->GetName(). "
"test_ogrsf tests that it is properly set."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:552
msgid ""
"Following drivers are kept as OGRSFDriver, but their Open() method does "
"early extension/prefix testing to avoid datasource object to be "
"instantiated : CartoDB, CouchDB, DXF, EDIGEO, GeoConcept, GFT, GME, "
"IDRISI, OGDI, PCIDSK, PG, XPlane."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:557
msgid ""
"Identify() has been implemented for CSV, DGN, DXF, EDIGEO, GeoJSON, GML, "
"KML, LIBKML, MapInfo File, NAS, OpenFileGDB, OSM, S57, Shape, SQLite, "
"VFK, VRT."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:561
msgid ""
"GDAL_DMD_EXTENSION/GDAL_DMD_EXTENSIONS set for following drivers: AVCE00,"
" BNA, CSV, DGN, DWG, DXF, EDIGEO, FileGDB, Geoconcept, GeoJSON, Geomedia,"
" GML, GMT, GPKG, GPX, GPSTrackMaker, IDRISI Vector, Interlis 1, Interlis "
"2, KML, LIBKML, MDB, MapInfo File, NAS, ODS, OpenFileGDB, OSM, PGDump, "
"PGeo, REC, S57, ESRI Shapefile, SQLite, SVG, WaSP, XLS, XLSX, XPlane."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:568
msgid ""
"Document dataset and layer creation options of BNA, DGN, FileGDB, "
"GeoConccept, GeoJSON, GeoRSS, GML, GPKG, KML, LIBKML, PG, PGDump and ESRI"
" Shapefile drivers as GDAL_DMD_CREATIONOPTIONLIST / "
"GDAL_DS_LAYER_CREATIONOPTIONLIST."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:573
msgid "Add open options AAIGRID, PDF, S57 and ESRI Shapefile drivers."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:575
msgid "GetFileList() implemented in OpenFileGDB, Shapefile and OGR VRT drivers."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:578
msgid ""
"Rename datasource SyncToDisk() as FlushCache() for LIBKML, OCI, ODS, XLSX"
" drivers."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:581
msgid ""
"Use poOpenInfo->fpL to avoid useless file re-opening in GTiff, PNG, JPEG,"
" GIF, VRT, NITF, DTED."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:584
msgid "HTTP driver: declared as GDAL_DCAP_RASTER and GDAL_DCAP_VECTOR driver."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:587
msgid "RIK: implement Identify()"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:589
msgid ""
"Note: the compilation and good working of the following OGR drivers "
"(mostly proprietary) could not be tested: ArcObjects, DWG, DODS, SDE, "
"FME, GRASS, IDB, OCI, MSSQLSpatial(compilation OK, but not runtime "
"tested)"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:595
#: ../../source/development/rfc/rfc49_curve_geometries.rst:503
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:112
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:201
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:93
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:413
msgid "Changes in utilities"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:597
msgid "gdalinfo accepts a -oo option to define open options"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:598
msgid "ogrinfo accepts a -oo option to define open options"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:599
msgid ""
"ogr2ogr accepts a -oo option to define input dataset open options, and "
"-doo to define destination dataset open options"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:603
#: ../../source/development/rfc/rfc49_curve_geometries.rst:518
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:136
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:211
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:132
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:98
#: ../../source/development/rfc/rfc68_cplusplus11.rst:191
#: ../../source/development/rfc/rfc70_output_format_guess.rst:77
msgid "Changes in SWIG bindings"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:605
msgid "Python and Java bindings:"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:607
msgid ""
"add new GDALDataset methods taken from OGRDataSource : CreateLayer(), "
"CopyLayer(), DeleteLayer(), GetLayerCount(), GetLayerByIndex(), "
"GetLayerByName(), TestCapability(), ExecuteSQL(), ReleaseResultSet(), "
"GetStyleTable() and SetStyleTable()."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:612
msgid "make OGR Driver, DataSource and Layer objects derive from MajorObject"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:615
msgid ""
"Perl and CSharp: make sure that it still compiles but some work would "
"have to be done by their mainteners to be able to use the new "
"capabilities"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:620
#: ../../source/development/rfc/rfc68_cplusplus11.rst:197
msgid "Potential changes that are *NOT* included in this RFC"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:622
msgid "\"Natural\" evolutions of current RFC :"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:624
msgid "Unifying the GDAL MEM and OGR Memory drivers."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:625
msgid "Unifying the GDAL VRT and OGR VRT drivers."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:627
msgid "Further unification steps :"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:629
msgid ""
"Source tree changes to move OGR drivers from ogr/ogrsf_frmts/ to frmts/ ,"
" to move ogr/ogrsf_frmts/generic/\\* to gcore/\\*, etc..."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:631
msgid "Documentation unification (pages with list of drivers, etc...)"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:632
msgid "Renaming to remove traces of OGR namespace : OGRLayer -> GDALLayer, etc..."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:634
msgid ""
"Kill --without-ogr compilation option ? It has been preserved in a "
"working state even if it embeds now ogr/ogrsf_frmts/generic and "
"ogr/ogrsf_frmts/mitab for conveniency."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:637
msgid ""
"Unification of some utilities : \"gdal info XXX\", \"gdal convert XXX\" "
"that would work on all kind of datasets."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:641
#: ../../source/development/rfc/rfc49_curve_geometries.rst:551
#: ../../source/development/rfc/rfc68_cplusplus11.rst:221
#: ../../source/development/rfc/rfc70_output_format_guess.rst:99
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:471
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:205
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:428
msgid "Backward compatibility"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:643
msgid ""
"GDALDriverManager::GetDriverCount(), GetDriver() now returns OGR drivers,"
" as well as GDAL drivers"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:646
msgid ""
"The reference counting in GDAL datasets and GDAL 1.X OGR datasources was "
"a bit different. It starts at 1 for GDAL datasets, and started at 0 for "
"OGR datasources. Now that OGRDataSource is basically a GDALDataset, it "
"starts at 1 for both cases. Hopefully there are very few users of the "
"OGR_DS_GetRefCount() API. If it was deemed necessary we could restore the"
" previous behavior at the C API, but that would not be possible at the "
"C++ level. For reference, neither MapServer nor QGIS use "
"OGR_DS_GetRefCount()."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:658
msgid ""
"A pass should be made on the documentation to check that all new methods "
"are properly documented. The OGR general documentation (especially C++ "
"API Read/Write tutorial, Driver implementation tutorial and OGR "
"architecture) should be updated to reflect the changes."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:666
msgid ""
"Very few changes have been made so that the existing autotest suite still"
" passes. Additions have been made to test the GDALOpenEx() API and the "
"methods \"imported\" from OGRDataSource into GDALDataset."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:671
#: ../../source/development/rfc/rfc68_cplusplus11.rst:235
msgid "Version numbering"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:673
msgid ""
"Although the above describes changes should have very few impact on "
"existing applications of the C API, some behavior changes, C++ level "
"changes and the conceptual changes are thought to deserve a 2.0 version "
"number."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:681
msgid "Implementation will be done by Even Rouault."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:683
msgid ""
"The proposed implementation lies in the \"unification\" branch of the "
"`https://github.com/rouault/gdal2/tree/unification "
"<https://github.com/rouault/gdal2/tree/unification>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:687
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/unification "
"<https://github.com/rouault/gdal2/compare/unification>`__"
msgstr ""

#: ../../source/development/rfc/rfc46_gdal_ogr_unification.rst:693
msgid "+1 from JukkaR, FrankW, DanielM, TamasS and EvenR."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:5
msgid ""
"RFC 47: Per Dataset Caching and GDALRasterBand Multithreading (not "
"implemented)"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:7
msgid "Author: Blake Thompson"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:9
msgid "Contact: flippmoke at gmail dot com"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:16
msgid ""
"When utilizing GDAL in multithread code, it was found that often the "
"limiting portion of the code was often the LRU block cache within GDAL. "
"This is an attempt to make the LRU cache more efficient in multithreaded "
"situations by making it possible to have multiple LRU per dataset and "
"optimizing when locking occurs. Additionally, the changes outlined "
"attempt to find an efficient manner to manage data within the cache."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:23
msgid "*This change attempts to:*"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:25
msgid "Make the caching system within raster datasets:"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:27
msgid "Thread Safe"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:28
msgid "Provide performance more linearly with an increasing number of threads"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:31
msgid "Reduce the scope of the current cache locking."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:32
msgid "Optionally enable a per dataset cache (rather then a global cache)"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:33
msgid "Make Mem datasets READ thread safe per dataset."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:34
msgid ""
"Lay the ground work for future development to increase thread safety in "
"drivers."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:37
msgid "*This change does NOT attempt to:*"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:39
msgid "Make all drivers thread safe"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:40
msgid "Make datasets thread safe"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:43
msgid "Two Different Solutions"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:45
msgid ""
"Two different ways for solving this problem are being proposed and both "
"have been coded up (test code for each still to be written). However, "
"both share some common solutions. First I will go over the common changes"
" for the two different methods, then the ways in which the two solutions "
"differ."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:52
msgid "Pull Requests"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:54
msgid ""
"`Pull Request #1 <https://github.com/OSGeo/gdal/pull/38>`__ - SOLUTION 1 "
"(Dataset RW Locking)"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:56
msgid ""
"`Pull Request #2 <https://github.com/OSGeo/gdal/pull/39>`__ - SOLUTION 2 "
"(Block RW Locking)"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:60
msgid "Common Solution"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:63
msgid "Dataset Caching"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:65
msgid ""
"The static global mutex that is limiting performance is located within "
"gcore/gdalrasterblock.cpp. This mutex is there to protect the setting of "
"the maximum cache, the LRU cache itself itself, and the current size of "
"the cache. The current scope of this mutex makes it lock for extended "
"periods once the cache is full, and new memory is being initialized in "
"GDALRasterBlock::Internalize()."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:72
msgid ""
"In order to remove the need for this LRU cache to be locked more often a "
"new global config option is introducted \"GDAL_DATASET_CACHING\". This "
"causes the LRU cache to be per dataset when set to \"YES\", rather then a"
" global cache (\"NO\" Default). Doing this will also allow threaded "
"applications to flush only the cache for a single dataset, improving "
"performance in some situations for two reasons. First a cache of a more "
"commonly used dataset, might be set separately from other datasets, "
"meaning that it is more likely to remain cached. The second is that the "
"lack of a common global mutex will result in a less likely situation of "
"two threads locking the same mutex if operations are being performed on "
"different datasets."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:84
msgid ""
"In order to have management of the different caches, a "
"GDALRasterBlockManager class is introduced. This class is responsible for"
" the management of the cache in the global or per dataset situations."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:89
msgid "GDALRasterBlockManager"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:118
msgid ""
"Many of the operations originally done by statistics:* within "
"GDALRasterBlock are now moved into the GDALRasterBlockManager."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:124
msgid "Every GDALDataset now has a:"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:130
msgid "This is set at initialization of the dataset via:"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:149
msgid ""
"In order to make caching safer and more efficient, a mutex as also "
"introduced in GDALRasterBand as well. The job of this mutex is to protect"
" the RasterBlock array per band (papoBlocks)."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:154
msgid "Thread Safety and the Two Solutions"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:156
msgid ""
"The multithreading of GDAL is a complicated thing, while these changes do"
" seek to *improve* threading within GDAL. It does not *solve* threading "
"problems within GDAL and make it truly thread safe. The goal of this "
"change is simply to make the cache thread safe, in order to achieve this "
"three mutexes are utilized. Where these three mutexes are located is "
"different between the two solutions proposed."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:166
msgid "Solution 1 (RW Mutex in GDALDataset )"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:169
#: ../../source/development/rfc/rfc47_dataset_caching.rst:234
msgid "Mutexes"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:171
msgid "For solution 1 the three mutexes are:"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:173
msgid "Dataset RW Mutex (per GDALDataset)"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:174
#: ../../source/development/rfc/rfc47_dataset_caching.rst:238
msgid "Band Mutex (per GDALRasterBand)"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:175
#: ../../source/development/rfc/rfc47_dataset_caching.rst:240
msgid "RBM Mutex (per GDALRasterBlockManager)"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:177
msgid ""
"In order to prevent deadlocks, a priority of the mutexes is established "
"in the order they are listed. For example if you have the Band Mutex, you"
" may not obtain the Dataset RW Mutex, unless it was obtained prior to the"
" Band Mutex being obtained. However, the goal should always be to never "
"have more then mutex at a time!"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:184
msgid "Dataset RW Mutex"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:186
msgid ""
"The objective of the Dataset RW Mutex is to protect the data stored "
"within the the GDALRasterBlocks associated with a dataset, and lock "
"during large Read or Write operations. This prevents two different "
"threads from using memcpy on the same GDALRasterBlock at the same time. "
"This mutex normally lies within the GDALDataset, but in the case of a "
"standalone GDALRasterBand, it utilizes a new mutex on the Band."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:194
#: ../../source/development/rfc/rfc47_dataset_caching.rst:251
msgid "Band Mutex"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:196
#: ../../source/development/rfc/rfc47_dataset_caching.rst:253
msgid ""
"The objective of the Band Mutex is to manage the control of the array of "
"blocks in the GDALRasterBand, and manages the locking of the "
"GDALRasterBlocks. This is a per GDALRasterBand Mutex."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:201
#: ../../source/development/rfc/rfc47_dataset_caching.rst:260
msgid "RBM Mutex"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:203
#: ../../source/development/rfc/rfc47_dataset_caching.rst:262
msgid ""
"The objective of the RBM Mutex is to manage control of the LRU cache. "
"This mutex is responsible for the control of the management of the "
"cache's linked list and total amount of data stored in the cache."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:208
#: ../../source/development/rfc/rfc47_dataset_caching.rst:278
msgid "Pros"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:210
msgid ""
"This is a much more simple solution of the two different possible "
"solutions. Since the protection of the Blocks are done at the Dataset "
"level, it prevents the problem of some drivers such as geotiff where more"
" then one band might be accessed in the reading or writing of one band. "
"Therefore with out this protection here it could cause issues if locking "
"was just at a band level per block's data."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:218
#: ../../source/development/rfc/rfc47_dataset_caching.rst:294
msgid "Cons"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:220
msgid ""
"This solution is not perhaps the most optimal way to lock because the "
"protection of the IReadBlock, IWriteBlock, and IRasterIO routines is over"
" the entire dataset. This is very limiting when you are reading the same "
"dataset in a threaded environment, because it is not possible to read "
"more then one block at a time."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:229
msgid "Solution 2 (RW Mutex in GDALRasterBlock )"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:236
msgid "For solution 2 the three mutexes are:"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:241
msgid "Block RW Mutex (per GDALRasterBlock)"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:243
msgid ""
"In order to prevent deadlocks the band mutex has priority. This means "
"that you can not get the Band Mutex if you have the RBM or Blow RW Mutex,"
" unless you already had the Band Mutex prior to this. You may not obtain "
"the Block mutex and the RBM mutex at the same time."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:267
msgid "Block RW Mutex"
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:269
msgid ""
"The objective of the Block RW Mutex is to protect the data stored within "
"the the GDALRasterBlocks associated with a dataset, and lock during large"
" Read or Write operations. This prevents two different threads from using"
" memcpy on the same GDALRasterBlock at the same time. It is created on a "
"per block basis."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:280
msgid ""
"This is probably the most complete solution to making an intensive and "
"fast threaded solution for the blocking. This is because the IReadWrite, "
"IWriteBlock, and IRasterIO now are able to possibly pass a mutex with "
"their calls, as a void pointer pointer. A change was made to the mutex as"
" well such that a void pointer pointer that is NULL passed to "
"CPLMutexHolderD, will not result in any pointer being created or any "
"locking to occur. This means much of the behavior of the existing code "
"can be maintained by simply passing a NULL value for the mutex. All of "
"these changes allow the drivers to maintain much more control over the "
"way that locking occurs when protecting the data inside a block."
msgstr ""

#: ../../source/development/rfc/rfc47_dataset_caching.rst:296
msgid ""
"Obviously, this is a much more complex solution and therefore is harder "
"to manage. It means that writing a driver is not as trivial as before and"
" care must be taken in how locking is done within the driver in order to "
"prevent deadlocks and maintain thread safety. The other issue that might "
"arise from this is a slight slow down in non-threaded code because of the"
" extra cycles spent locking data that will not be accessed in a threaded "
"manner. Additionally, it might have issues in windows if too many mutexes"
" are created (as there are quite a few more since it is a per "
"GDALRasterBlock mutex). (Note: Not sure how I will be able to test this "
"properly?)"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:5
msgid "RFC 48: Geographical networks support"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:7
msgid "Author: Mikhail Gusev, Dmitry Baryshnikov"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:9
msgid "Contact: gusevmihs at gmail dot com, polimax@mail.ru"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:11
msgid "Status: adopted, implemented in GDAL 2.1"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:14
msgid "Introduction"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:16
msgid ""
"This document proposes the integration of the results of GSoC 2014 "
"project “GDAL/OGR Geography Network support” into GDAL library. GNM "
"(Geographical Network Model) intends to bring the capabilities to create,"
" manage and analyse networks built over spatial data in GDAL."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:21
msgid ""
"GSoC project description: "
"`http://trac.osgeo.org/gdal/wiki/geography_network_support "
"<http://trac.osgeo.org/gdal/wiki/geography_network_support>`__"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:24
msgid ""
"GDAL fork with all changes in trunk: `https://github.com/MikhanGusev/gdal"
" <https://github.com/MikhanGusev/gdal>`__"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:27
msgid ""
"GSoC blog: `http://gsoc2014gnm.blogspot.ru/ "
"<http://gsoc2014gnm.blogspot.ru/>`__"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:31
msgid "Purpose and description"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:33
msgid ""
"There is a need to have an instrument in GDAL which on the one hand "
"provides an abstraction for different existed network formats (pgRouting,"
" OSRM, GraphHopper, SpatiaLite networks, etc.), like GDAL (previously "
"OGR) provides one for spatial vector formats, and on the other hand "
"provides a network functionality to those spatial formats which does not "
"have it at all (Shapefiles)."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:40
msgid ""
"Such instrument is implemented as a separate set of C++ classes, called "
"GNM. The two main of them represent an abstract network (GNMNetwork "
"class) and the network of ”GDAL-native” or generic format "
"(GNMGenericNetwork class). An abstract network is used by user as a "
"common interface to manage his network data. The list of underlying "
"format-specific classes can be extended anytime like a list of GDAL "
"drivers to support more network formats. The ”GDAL-native” format "
"implements the abstract network and is used to provide the network "
"functionality to the spatial formats which are already supported by GDAL."
" All the network data of this format is stored in the special set of "
"layers along with spatial data in a spatial dataset (internally "
"GDALDataset and OGRLayer are widely used)."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:53
msgid "What does the interface of working with networks include:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:64
msgid ""
"See the class architecture document (gdal/gnm/gnm_arch.dox) for more "
"details and how this set of classes internally works."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:68
#: ../../source/development/rfc/rfc62_raster_algebra.rst:107
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:236
msgid "Bindings"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:70
msgid ""
"The C API wrapper functions are declared in gdal/gnm/gnm_api.h. All "
"current python bindings are implemented in a swig interface file and use "
"these C functions."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:75
msgid "Set of applications"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:77
msgid ""
"It is proposed to include the two following apps which use the GNM into "
"GDAL source tree:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:85
msgid ""
"See the description of these applications in according documentation for "
"more details."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:91
msgid ""
"There is already a pull request on github "
"(`https://github.com/OSGeo/gdal/pull/60 "
"<https://github.com/OSGeo/gdal/pull/60>`__) that implements this RFC."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:96
msgid "Building GDAL with GNM support"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:98
msgid ""
"By default the building of GNM support is disabled. To build GNM support "
"one have to add --with-gnm key to configure or uncomment the appropriate "
"line in nmake.opt."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:103
msgid "Set of tests"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:105
msgid ""
"All public methods of GNMNetwork tested in autotest gnm tests. The "
"several tests for GNMGenericNetwork added. The console applications "
"(gnmmanage and gnmanalyse) tested in autotest/utilities."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:109
msgid ""
"All tests were implemented according to the general rules: they are "
"written on Python and situated in /autotest folder:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:118
msgid "Documentation structure"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:120
msgid ""
"All new methods and GNM classes are documented. GDAL documentation is "
"updated when necessary."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:123
msgid ""
"The following new Doxyfiles in /gnm and /apps directories will be "
"automatically built into the main auto-generated html into the “Related "
"pages” section. All them are similar to OGR docs:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:136
msgid "Source code tree organization"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:138
msgid "*What is being added:*"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:140
msgid ""
"The integration will cause the *addition* of new folders with header, "
"source, make and doc files:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:152
msgid "*What is being modified:*"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:154
msgid "The *changing* of the existed GDAL files *will be insignificant*:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:166
msgid "Future ideas"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:168
msgid "I see many useful and interesting ways of GNM expending in future:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:170
msgid ""
"More formats support. The important thing, which must be firstly "
"implemented in future, while the GNM intends to work with as many network"
" formats as possible. It includes not only the support of GNMGdalNetwork "
"formats – i.e. the testing to work with other GDAL spatial formats "
"(currently tested only for Shapefiles and PostGIS). For example:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:177
msgid "GNMPGRoutingNetwork. Works with pgRouting tables. Some ideas:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:179
msgid ""
"GNMPGRoutingNetwork::ConnectFeatures() will add to \"source\" and "
"\"target\" columns according values via OGRFeature::setField()"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:181
msgid ""
"GNMPGRoutingNetwork::AutoConnect() will internally call "
"pgr_createTopology method"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:184
msgid ""
"GNMSQLiteNetwork. Works with SpatiaLite VirtualNetwork networks. Some "
"ideas:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:187
msgid ""
"write all network data to the Roads_net_data table and to corresponding "
"NodeFrom and NodeTo columns"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:190
msgid "GNMGMLNetwork. Works with the GML topology. Some ideas:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:192
msgid ""
"write network data to the `gml::TopoComplex <gml::TopoComplex>`__, "
"`gml::Node <gml::Node>`__ and `gml::Edge <gml::Edge>`__ directly"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:197
msgid ""
"More effective algorithm of topology building in GDAL-networks. The "
"current one is implemented as the default for any network format and can "
"connect any amount of line and point layers but is not so efficient – the"
" large networks are being connected too long. GNMGenericNetwork can have "
"more effective default algorithm."
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:203
msgid ""
"More rules in GDAL-networks, i.e. more complex syntax describing the "
"following:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:206
msgid "costs extracted from geometrical lengths of lines"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:207
msgid "turn restriction roles of features"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:208
msgid ""
"more complex connection rules: set the limit of features can be connected"
" and more complex expressions"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:211
msgid ""
"Applications. May be one of the most useful application which can be "
"build with GNM is *network2network*, which converts the network and "
"spatial data of the dataset from the one format to another (for example "
"from pgRouting to Oracle Spatial networks);"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:216
msgid ""
"Analysis. The support of different graph types and the algorithms working"
" with them, for different routing and even engineering purposes. For "
"example:"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:220
msgid "Boost library"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:221
msgid "Contraction Hierarchies technology (for large graphs)"
msgstr ""

#: ../../source/development/rfc/rfc48_geographical_networks_support.rst:226
msgid "+1 from JukkaR, TamasS and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:5
msgid "RFC 49: Curve geometries"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:9
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:9
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:9
#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:9
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:9
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:9
msgid "Contact: even dot rouault at spatialys dot com"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:16
msgid ""
"The current geometry model in GDAL 1.X makes use of points, lines, "
"polygons and aggregations of them (multipoints, multilines, multipolygons"
" and geometry collections). It was modeled from the geometry class "
"hierarchy of the \"OpenGIS Simple Feature Access Part 1 : Common "
"Architecture\" (in its 1.1.0 version)."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:22
msgid ""
"This RFC covers the addition of new geometry types that have been added "
"in ISO/IEC 13249 Part 3 Spatial (abbreviated as ISO SQL/MM Part 3):"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:25
msgid ""
"circular string: a circular arc, or a sequence of connected circular "
"arcs, each of them describe by 3 points: the first point of the arc, an "
"intermediate point and the final point"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:28
msgid ""
"compound curve: a sequence of connected curves, either line strings or "
"circular strings"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:30
msgid ""
"curve polygon: polygon consisting of one outer ring, and zero or more "
"inner ring. Each ring can be one of the curve implementations: line "
"strings, circular strings, compound curves."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:33
msgid ""
"multicurve: a collection of curves (line strings, circular strings, "
"compound curves)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:35
msgid "multisurface: a collection of surfaces (polygons, curve polygons)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:37
msgid "The scope of this RFC consists in :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:39
msgid ""
"adding the new geometry classes to the existing geometry class hierarchy,"
" with the corresponding importer and exporter of WKT (Well Known Text) "
"and WKB (Well Known Binary) encodings"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:42
msgid ""
"adding methods to convert those curve geometries into their approximated "
"linear version, and to do the reverse operation"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:44
msgid ""
"upgrading some of the drivers that can support such geometries : GML (and"
" indirectly NAS, WFS), PostGIS/PGDump, GeoPackage, SQLite, CSV, VRT."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:49
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:36
msgid "Reference documents"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:51
msgid "The following documents have been used for the implementation :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:53
msgid ""
"`Old draft version of ISO/IEC 13249 Part 3 Spatial, dating from "
"2004-05-09 <http://jtc1sc32.org/doc/N1101-1150/32N1107-WD13249-3--"
"spatial.pdf>`__, a.k.a SQL/MM Part 3 : Caution the WKB codes given at "
"page 137 and following are not the latest ones used. Refer to SFA 1.2.1"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:58
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:38
msgid ""
"`OpenGIS Simple Feature Access Part 1 : Common Architecture,v 1.2.1 "
"<http://portal.opengeospatial.org/files/?artifact_id=25355>`__, a.k.a. "
"SFA 1.2.1"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:62
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:41
msgid ""
"`BNF of WKT encoding <https://github.com/postgis/postgis/blob/svn-"
"trunk/doc/bnf-wkt.txt>`__: extracted from SQL/MM Part 3"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:66
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:44
msgid ""
"`BNF of WKB encoding <https://github.com/postgis/postgis/blob/svn-"
"trunk/doc/bnf-wkb.txt>`__: extracted from SQL/MM Part 3"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:71
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:24
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:22
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:24
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:26
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:49
msgid "Core changes"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:74
msgid "New cass hierarchy"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:76
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:51
msgid ""
"The new class hierarchy is the following and is mostly consistent with "
"SQL/MM Part 3"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:81
msgid "The only exceptions are :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:83
msgid ""
"OGRLinearRing: this class present in GDAL 1.X is kept for backward "
"compatibility and also because it is still present in SFA 1.2.1, even if "
"absent from SQL/MM Part 3"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:86
msgid ""
"OGRSimpleCurve: this abstract class is an implementation detail in OGR "
"that simplifies the implementation of OGRCircularString, by sharing code "
"with what was in OGRLineString only."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:91
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:279
msgid "Geometry types"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:93
msgid ""
"The OGRwkbGeometryType enumeration has been extended with the following "
"values :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:113
msgid ""
"The codes have been taken from SFA 1.2.1, and are consistent with the "
"PostGIS 2 implementation. Note that ISO SQL/MM Part 3 allows alternates "
"values for wkbCircularString (8 or 1000001) : see Table 15 in the above "
"mentioned draft. The values in the range 10000XX probably date back from "
"an earlier draft version. OGR will import them, but will use the values "
"from SFA 1.2.1 when exporting WKB."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:120
msgid ""
"It has been considered if it would worth to modify the enumeration values"
" of the existing 2.5D geometries (wkbPoint25D, etc...) to conform with "
"the WKB codes of ISO SQL/MM Part 3 / SFA 1.2.1, but there was not a clear"
" advantage in doing so, with respect to the impact on existing users of "
"OGR API."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:126
msgid ""
"Note: the mix of different ways of expression the Z dimension (wkb25DBit "
"bit for \"old\" geometry types, and +1000 for \"new\" geometry types) has"
" no direct impact on the export of geometries as WKB. There is no direct "
"coupling between the values of OGRwkbGeometryType and what goes to WKB "
"geometries. The exportToWkb() method of OGRGeometry takes a wkbVariant "
"parameter to select the variant of WKB that is wished."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:133
msgid ""
"The use of the wkb25DBit value (0x8000000) that was sometimes used to "
"test if a geometry type was 3D is now clearly deprecated since it will "
"not work for the new geometry type. The wkbHasZ() and wkbSetZ() have been"
" added to respectively test if a geometry type is 3D, or modify a "
"geometry type to be 3D. The wkb25DBit constant is now disabled for all "
"code in GDAL (but still accessible by user code) and all drivers have "
"been converted to use the new macros."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:141
msgid "A new family of functions have been used to operate on geometry types :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:189
msgid ""
"The existing wkbFlatten() is an alias of OGR_GT_Flatten(), the new "
"wkbHasZ() an alias of OGR_GT_HasZ() and wkbSetZ() an alias of "
"OGR_GT_SetZ()."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:196
msgid "In OGRGeometry class :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:261
msgid "In OGRGeometryFactory class :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:364
msgid "Implementation of existing OGRGeometry methods"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:366
msgid ""
"As GEOS does not support curve geometries for now, all GEOS related "
"operations, the ones returning a boolean value such as Intersects(), or "
"the ones returning a new geometry such as Intersection(), have been "
"adapted so that non-linear geometries are first converted to their linear"
" approximation (this might be revisited if GEOS supports curve geometries"
" in the future) When GEOS returns a geometry, and that one of the input "
"parameters was a non-linear geometry, the reverse operation is done to "
"attempt retrieving as much as possible of the curve geometry. Of course, "
"the result will not generally perfect, but it is better than nothing."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:377
msgid "Simple example doing the union of 2 half-circles that are contiguous:"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:386
msgid ""
"Or using GetCurveGeometry() explicitly on the result of a buffer "
"operation:"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:396
msgid ""
"The Length() operation on OGRCircularString (and thus OGRCompoundCurve) "
"uses circle geometry to compute the exact length, without falling back to"
" linear approximation. The Area() operation on OGRCurvePolygon will "
"generally need to go to linear approximation. When operating on a full "
"circle, or a curve polygon that is convex, an optimization is done to "
"avoid this (by computing the area of the polygon formed with all the "
"vertex including in the circular parts of the description, and adding the"
" area of the `circular segments "
"<http://en.wikipedia.org/wiki/Circular_segment>`__)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:407
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:72
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:159
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:99
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:53
msgid "C API changes"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:409
msgid "Deprecation:"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:411
msgid ""
"wkb25DBit still present, but deprecated since incompatible with the new "
"geometry type. Use the wkbFlatten(), wkbHasZ(), wkbSetZ() macros instead"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:417
msgid "OGR_GT_xxxx (for Geometry Type): described above"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:418
msgid ""
"OGRErr OGR_G_ExportToIsoWkb( OGRGeometryH, OGRwkbByteOrder, unsigned "
"char*) : Export geometry as WKB conforming to ISO SQL/MM Part 3."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:420
msgid ""
"OGRErr OGR_G_ExportToIsoWkt( OGRGeometryH, char \\*\\* ) : Export "
"geometry as WKT conforming to ISO SQL/MM Part 3, i.e. 2.5D geometries "
"names are suffixed by \" Z\", e.g. \"POINT Z (1 2 3)\"."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:423
msgid ""
"OGRGeometryH OGR_G_Value( OGRGeometryH, double dfDistance ) : mapping of "
"existing OGRGeometry::Value()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:425
msgid ""
"int OGR_G_HasCurveGeometry( OGRGeometryH, int bLookForNonLinear ) : "
"mapping of OGRGeometry::hasCurveGeometry()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:427
msgid ""
"OGRGeometryH OGR_G_GetLinearGeometry( OGRGeometryH hGeom, double "
"dfMaxAngleStepSizeDegrees, char*\\* papszOptions) : mapping of "
"OGRGeometry::hasCurveGeometry()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:430
msgid ""
"OGRGeometryH OGR_G_GetCurveGeometry( OGRGeometryH hGeom, char*\\* "
"papszOptions ) : mapping of OGRGeometry::hasCurveGeometry()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:432
msgid ""
"void OGRSetNonLinearGeometriesEnabledFlag(int bFlag) : discussed in "
"Backward compatibility section"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:434
msgid ""
"int OGRGetNonLinearGeometriesEnabledFlag() : discussed in Backward "
"compatibility section"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:440
msgid ""
"GML geometry importer: Arc, ArcString, ArcByBulge, ArcByCenterPoint, "
"Circle and CircleByCenterPoints GML elements will be returned as circular"
" string OGR geometries. If they are included in other GML elements such "
"as CurveComposite, MultiCurve, Surface, corresponding non-linear OGR "
"geometries will be returned as well. When reading geometries that are "
"made of or consist of Surface, MultiSurface, Curve, MultiCurve, an effort"
" is made to return the OGR geometry class of a linear type as much as "
"possible, i.e. OGRCurvePolygon, OGRCompoundCurve, etc... will only be "
"returned if there's a circular string in the geometry."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:451
msgid ""
"GML geometry exporter: can generate ArcString and Circle GML elements "
"when passed a geometry with circular string in it."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:454
msgid ""
"GML driver: Can read/write all the new geometry types. When reading GML3 "
"application schemas, declarations of geometry fields such as "
"CurvePropertyType, SurfacePropertyType, MultiCurvePropertyType or "
"MultiSurfacePropertyType will be also interpreted as being potential non-"
"linear geometries, and corresponding OGR geometry type will be used for "
"the layer geometry type, and the geometries of the feature will also "
"follow that layer geometry type. This can affect the WFS drivers."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:463
msgid ""
"NAS driver: Can return the new geometry types. NAS layers will use the "
"new geometry types only if the NAS file contains arcs."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:466
msgid ""
"PG/PostGIS: Can read/write all the new geometry types for both PostGIS "
"2.X and PostGIS 1.X. For PostGIS 1.X compatibility, special processing "
"must be done in the importFromWkb()/exportToWkb() to deal with the non "
"standard codes used by PostGIS 1.X for curvepolygon, multicurve and "
"multisurface. This is done with a wkbVariantPostGIS1 value added to "
"OGRwkbVariant enumeration used by those methods."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:473
msgid ""
"PGDump: Can write all new geometry types. Above remark related to the "
"differences among version make it important to specify correctly the "
"POSTGIS_VERSION dataset creation option."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:477
msgid ""
"GeoPackage: Can read/write all the new geometry types. Note: this isn't "
"in the core of the GeoPackage specification, but it is still a registered"
" extension."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:481
msgid ""
"SQLite: Can read/write all the new geometry types for databases that are "
"NOT Spatialite databases, since Spatialite does no support curve geometry"
" types. However an attempt (well a hack) is done so that the SQLite SQL "
"dialect can still be used. Basically when converting a OGR geometry to "
"Spatialite, if it is of one of the curve geometry type, the resulting "
"blob will first contain the spatialite compatible blob of the linear "
"geometry, and afterwards the WKB of the curve geometry. Spatialite "
"functions, if called with a ST\\_ function for example, will ignore the "
"later one. When reading a blob from sqlite, if the added WKB of the curve"
" geometry is still there, it will be used. Otherwise the spatialite "
"geometry blob will be used. So SELECT statement just selecting the "
"geometry column without doing any operation on it should preserve curve "
"geometries."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:495
msgid "MEM: Can read/write all the new geometry types."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:497
msgid "CSV: Can read/write all the new geometry types."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:499
msgid ""
"VRT: Declared as compatible with all the new geometry types. Actual "
"capability will depend on the underlying layers wrapped by the VRT."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:505
msgid ""
"ogr2ogr: the new geometry names (CIRCULARSTRING, etc...) are supported in"
" the -nlt option. \"-nlt CONVERT_TO_LINEAR\" can also be used to ask "
"curve geometries to be converted into their linear approximation ( what "
"is used to do that is forceTo(xxx, OGR_GT_GetLinear()) ). Note: this "
"isn't strictly necessary as all drivers should be able to deal with the "
"non-linear geometry types with the compatibility mechanism described in "
"Backward compatibility. But this might be useful to produce a PostGIS "
"table or GeoPackage database with linear geometry types even if the "
"source contains non-linear geometries. \"-nlt CONVERT_TO_LINEAR\" can be "
"combined with \"-nlt PROMOTE_TO_MULTI\"."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:520
#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:138
msgid "Addition of :"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:522
msgid "the new geometry types as ogr.wkbXXXXX"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:523
msgid "ogr.ForceTo()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:524
msgid "Geometry.ExportToIsoWkt()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:525
msgid "Geometry.ExportToIsoWkb()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:526
msgid "Geometry.HasCurveGeometry(int bLookForCircular = FALSE)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:527
msgid ""
"Geometry.GetLinearGeometry(double dfMaxAngleStepSizeDegrees = "
"0.0,char*\\* options = NULL)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:529
msgid "Geometry.GetCurveGeometry(char*\\* options = NULL)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:530
msgid "ogr.SetNonLinearGeometriesEnabledFlag(int bFlag)"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:531
msgid "ogr.GetNonLinearGeometriesEnabledFlag()"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:532
msgid "ogr.GT_xxxxx functions"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:534
msgid "Using ogr.wkb25DBit will issue a deprecation warning"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:537
msgid "Related changes that are *NOT* included in this RFC"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:539
msgid ""
"Support for other ISO SQL/MM geometries such as Polyhedral Surface, "
"Triangulated Irregular Network (TIN), Triangle."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:541
msgid "Support for the M (Measure) dimension of geometries."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:542
msgid ""
"Upgrade of other drivers that could make use of curve geometries : MSSQL "
"Spatial, Oracle Spatial, DXF, DWG, ..."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:544
msgid ""
"Support for arbitrary new geometry types: Conceptually one could hope "
"that a new class extending OGRCurve (Bezier or Spline curve) for example "
"could be added without touching OGR core. This isn't currently possible: "
"changes in OGRGeometryFactory and the OGR_GT\\_ functions would be needed"
" to remove a few hardcoded assumptions."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:554
msgid "Regarding code using GDAL"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:556
msgid ""
"Many applications will not be able to properly deal with the new geometry"
" types that may now be returned by some drivers. If they don't want to "
"test the geometry type and explicitly calling the conversion function, "
"they can call OGRSetNonLinearGeometriesEnabledFlag(FALSE) (the default "
"value is TRUE, i.e. non-linear geometries can be returned). In which "
"case, they will be transformed into their closest linear geometry, by "
"doing linear approximation, with OGR_G_ForceTo()."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:564
msgid ""
"This flag has only an effect on the OGR_F_GetGeometryRef(), "
"OGR_F_GetGeomFieldRef(), OGR_L_GetGeomType(), OGR_GFld_GetType() and "
"OGR_FD_GetGeomType() C API, and corresponding methods in the SWIG "
"bindings."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:569
msgid ""
"Libraries should generally *not* use that method, since that could "
"interfere with other libraries or applications."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:572
msgid ""
"Note that it does *not* affect the behavior of the C++ API. It has been "
"deemed dangerous/complicated to try doing that at the C++ level as it "
"could confuse drivers since they might call GetGeomType() for example."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:577
msgid "Regarding OGR drivers"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:579
msgid ""
"Drivers that can deal with the new geometry types SHOULD declare the new "
"dataset level ODsCCurveGeometries AND layer level OLCCurveGeometries "
"capabilities. The virtual methods CreateFeature() and SetFeature() "
"implemented by drivers have been renamed ICreateFeature() and "
"ISetFeature(). OGRLayer has now a non-virtual CreateFeature() and "
"SetFeature() that checks if the layer has curve geometry capability. If "
"it has not, and that the passed feature has non-linear geometries, they "
"will be transparently converted to their linear approximation before "
"calling the driver ICreateFeature()/ISetFeature() method. Similarly the "
"CreateLayer() method at datasource level will convert the passed geometry"
" type to a non-linear corresponding type if necessary."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:591
msgid ""
"All in-tree drivers have been converted to switch from CreateFeature() to"
" ICreateFeature() and SetFeature() to ISetFeature(). Out-of-tree drivers "
"will have to be adapted similarly otherwise those methods will fails (the"
" now non-virtual methods in OGRLayer class will try to create the default"
" implementation of the same class, which will fail)."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:600
msgid ""
"All new methods and OGR geometry classes are documented. Driver "
"documentation is updated when necessary. MIGRATION_GUIDE.TXT is updated "
"with a summary of the text of this RFC."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:607
msgid ""
"Very few changes have been made so that the existing autotest suite still"
" passes. Very comprehensive testing of new geometry classes and "
"conversion methods has been added to ogr_geom.py and ogr_gml_geom.py. "
"Updated drivers have received new tests also."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:615
msgid ""
"Implementation will be done by Even Rouault. Coordinated with Sourcepole "
"(see `QGIS Enhancement 8: Geometry redesign <https://github.com/mhugent"
"/QGIS-Enhancement-Proposals/blob/master/QEP-8-geometry_redesign.rst>`__),"
" sponsored by Swiss QGIS User Group."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:620
msgid ""
"The proposed implementation lies in the \"curve_geometries\" branch of "
"the `https://github.com/rouault/gdal2/tree/curve_geometries "
"<https://github.com/rouault/gdal2/tree/curve_geometries>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:624
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/curve_geometries "
"<https://github.com/rouault/gdal2/compare/curve_geometries>`__"
msgstr ""

#: ../../source/development/rfc/rfc49_curve_geometries.rst:630
msgid "+1 from TamasS, JukkaR and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:5
msgid "RFC 4: Geolocation Arrays"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:16
msgid ""
"It is proposed that GDAL support an additional mechanism for geolocation "
"of imagery based on large arrays of points associating pixels and lines "
"with geolocation coordinates. These arrays would be represented as raster"
" bands themselves."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:21
msgid ""
"It is common in AVHRR, Envisat, HDF and netCDF data products to "
"distribute geolocation for raw or projected data in this manner, and "
"current approaches to representing this as very large numbers of GCPs, or"
" greatly subsampling the geolocation information to provide more "
"reasonable numbers of GCPs are inadequate for many applications."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:28
msgid "Geolocation Domain Metadata"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:30
msgid ""
"Datasets with geolocation information will include the following dataset "
"level metadata items in the \"GEOLOCATION\" domain to identify the "
"geolocation arrays, and the details of the coordinate system and "
"relationship back to the original pixels and lines."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:35
msgid "SRS: wkt encoding of spatial reference system."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:36
msgid "X_DATASET: dataset name (defaults to same dataset if not specified)"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:37
msgid "X_BAND: band number within X_DATASET."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:38
msgid "Y_DATASET: dataset name (defaults to same dataset if not specified)"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:39
msgid "Y_BAND: band number within Y_DATASET."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:40
msgid "Z_DATASET: dataset name (defaults to same dataset if not specified)"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:41
msgid "Z_BAND: band number within Z_DATASET. (optional)"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:42
msgid "PIXEL_OFFSET: pixel offset into geo-located data of left geolocation pixel"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:44
msgid "LINE_OFFSET: line offset into geo-located data of top geolocation pixel"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:46
msgid "PIXEL_STEP: each geolocation pixel represents this many geolocated pixels."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:48
msgid "LINE_STEP: each geolocation pixel represents this many geolocated lines."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:51
msgid ""
"In the common case where two of the bands of a dataset are actually "
"latitude and longitude, and so the geolocation arrays are the same size "
"as the base image, the metadata might look like:"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:65
msgid ""
"For AVHRR datasets, there are only 11 points (note, the more recent NOAA "
"AVHRR datasets have 51 points), but for every line. So the result for a "
"LAC dataset might look like:"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:81
msgid ""
"This assumes the L1B driver is modified to support the special access to "
"GCPs as bands using the L1BGCPS: prefix."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:85
msgid "Updating Drivers"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:87
msgid ""
"HDF4: Client needs mandate immediate incorporation of geolocation array "
"support in the HDF4 driver (specifically for swath products). (complete)"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:90
msgid ""
"HDF5: Some HDF5 products include geolocation information that should be "
"handled as arrays. No timetable for update."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:92
msgid ""
"AVHRR: Has 11/51 known locations per-scanline. These are currently "
"substantially downsampled and returned as GCPs, but this format would be "
"an excellent candidate for treating as geolocation arrays. Planned in "
"near future."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:96
msgid ""
"Envisat: Envisat raw products use geolocation information currently "
"subsampled as GCPs, good candidate for upgrade. No timetable for update."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:99
msgid ""
"netCDF: NetCDF files can have differently varying maps in x and y "
"directions, which are represented as geolocation arrays when they are "
"encoded as CF conventions \"two-dimensional coordinate variables\". See "
"the netcdf driver page for details."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:103
msgid ""
"OPeNDAP: Can have differently varying maps in x and y directions which "
"could be represented as geolocation arrays when they are irregular. No "
"timetable for update."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:108
msgid "Changes to Warp API and gdalwarp"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:110
msgid ""
"Introduce a new geolocation array based transformation method, following "
"the existing GDALTransformer mechanism. A geolocation array transformer "
"will be created with the following function call. The \"char \\**\" array"
" is the list of metadata from the GEOLOCATION metadata domain."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:121
msgid ""
"This transformer is currently partially implemented, but in a manner that"
" potentially uses a great deal of memory (twice the memory needed for the"
" geolocation arrays), and with still dubious correctness, but once "
"approved this will be fixup up to at least be correct, though likely not "
"efficient for the time being."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:127
msgid ""
"The GDALGenImgProjTransformer will be upgraded to instantiate the GeoLoc "
"transformer (instead of an affine, gcp, or rpc transformer) if only "
"geolocation information is available (done). However, the current "
"GDALCreateGenImgProjTransformer() function does not provide a mechanism "
"to select which transformation mechanism is used. So, for instance, if an"
" affine transform is available it will be used in preference to "
"geolocation data. If bGCPUseOK is TRUE, gcps will be used in preference "
"to geolocation data."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:136
msgid ""
"The gdalwarp program currently always sets bGCPUseOK to TRUE so there is "
"no means for gdalwarp users select use of geolocation data in preference "
"to gcps. Some modification to gdalwarp may be needed in the future in "
"this regard."
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:146
msgid ""
"''How do we preserve access to geolocation information when translating a"
" dataset? Do applications like gdal_translate need special handling?"
msgstr ""

#: ../../source/development/rfc/rfc4_geolocate.rst:148
msgid ""
"Placement of the geolocation data in a special metadata domain means it "
"won't be transferred in default translations.''"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:5
msgid "RFC 50: OGR field subtypes"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:16
msgid ""
"This RFC aims at adding the capability of specifying sub-types to OGR "
"fields, like boolean, 16 bit integers or 32 bit floating point values. "
"The sub-type of a field definition is an additional attribute that "
"specifies a hint or a restriction to the main type. The subtype can be "
"used by applications and drivers that know how to handle it, and can "
"generally be safely ignored by applications and drivers that do not."
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:27
msgid "Field subtypes"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:29
msgid "The OGRFieldSubType enumeration is added :"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:55
msgid "New attributes and methods"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:57
msgid "In OGRFieldDefn class :"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:67
msgid ""
"OGRFeature::SetField() will check that the passed value is in the "
"accepted range for boolean and int16 subtypes. If not, it will emit a "
"warning and correct/clamp the value to fit the subtype."
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:74
#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:161
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:101
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:55
msgid "Only additions :"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:85
msgid "Changes in OGR SQL"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:87
msgid ""
"Subtypes are preserved when a field name (or \\*) is specified in the "
"list of fields of a SELECT"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:89
msgid "CAST(xxx AS BOOLEAN) and CAST(xxx AS SMALLINT) are now supported."
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:90
msgid ""
"The field list of a SELECT can now accept boolean expressions, such as "
"\"SELECT x IS NULL, x >= 5 FROM foo\""
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:92
msgid ""
"The WHERE clause of a SELECT can now accept boolean fields, such as "
"\"SELECT \\* FROM foo WHERE a_boolean_field\""
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:98
msgid "GeoJSON: can read/write OFSTBoolean"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:99
msgid "GML: can read/write OFSTBoolean, OFSTInt16 and OFSTFloat32"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:100
msgid ""
"CSV: can read/write OFSTBoolean (explicitly with CSVT or with "
"autodetection), OFSTInt16 and OFSTFloat32 (explicitly with CSVT)"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:102
msgid "PG: can read/write OFSTBoolean, OFSTInt16 and OFSTFloat32"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:103
msgid "PGDump: can write OFSTBoolean, OFSTInt16 and OFSTFloat32"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:104
msgid "GeoPackage: can read/write OFSTBoolean, OFSTInt16 and OFSTFloat32"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:105
msgid "SQLite: can read/write OFSTBoolean and OFSTInt16"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:106
msgid "SQLite dialect: can read/write OFSTBoolean, OFSTInt16 and OFSTFloat32"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:107
msgid "FileGDB: can read/write OFSTInt16 and OFSTFloat32"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:108
msgid "OpenFileGDB: can read OFSTInt16 and OFSTFloat32"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:109
msgid "VRT: 'subtype' property added to be able to handle any subtype."
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:114
msgid ""
"ogrinfo: the output of ogrinfo is slightly modified in presence of a "
"subtype. A field with a non-default subtype will be described as "
"\"field_type(field_subtype)\". For example"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:140
msgid "ogr.OFSTNone, ogr.OFSTBoolean, ogr.OFSTInt16 and ogr.OFSTFloat32"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:141
msgid "ogr.GetFieldSubTypeName()"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:142
msgid "FieldDefn.GetSubType()"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:143
msgid "FieldDefn.SetSubType()"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:148
msgid ""
"This should have no impact on read-only operations done by applications. "
"Update operations could be impacted if an out-of-range value for the "
"subtype is written (but such a behavior probably already caused issues, "
"either ignored or notified by the backend)"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:156
msgid ""
"All new methods are documented. Driver documentation is updated when "
"necessary."
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:162
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:161
msgid "The various aspects of this RFC are tested:"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:164
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:163
msgid "core changes"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:165
msgid "OGR SQL changes"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:166
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:164
msgid "driver changes"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:171
msgid ""
"Implementation will be done by Even Rouault (`Spatialys "
"<http://spatialys.com>`__), and sponsored by `CartoDB "
"<https://cartodb.com>`__."
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:175
msgid ""
"The proposed implementation lies in the \"ogr_field_subtype\" branch of "
"the `https://github.com/rouault/gdal2/tree/ogr_field_subtype "
"<https://github.com/rouault/gdal2/tree/ogr_field_subtype>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:180
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/ogr_field_subtype "
"<https://github.com/rouault/gdal2/compare/ogr_field_subtype>`__"
msgstr ""

#: ../../source/development/rfc/rfc50_ogr_field_subtype.rst:186
msgid "+1 JukkaR, TamasS, FrankW and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:5
msgid "RFC 51: RasterIO() improvements : resampling and progress callback"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:16
msgid ""
"This RFC aims at extending the RasterIO() API to allow specifying a "
"resampling algorithm when doing requests involving subsampling or "
"oversampling. A progress callback can also be specified to be notified of"
" progression and allow the user to interrupt the operation."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:25
msgid "Addition of GDALRasterIOExtraArg structure"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:27
msgid "A new structure GDALRasterIOExtraArg is added to contain the new options."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:75
msgid ""
"There are several reasons to prefer a structure rather than new "
"parameters to the RasterIO() methods :"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:78
msgid "code readability (GDALDataset::IRasterIO() has already 14 parameters...)"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:80
msgid "allow future extensions without changing the prototype in all drivers"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:81
msgid ""
"to a lesser extent, efficiency: it is common for RasterIO() calls to be "
"chained between generic/specific and/or dataset/rasterband "
"implementations. Passing just the pointer is more efficient."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:85
msgid ""
"The structure is versioned. In the future if further options are added, "
"the new members will be added at the end of the structure and the version"
" number will be incremented. Code in GDAL core&drivers can check the "
"version number to determine which options are available."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:91
msgid "Addition of GDALRIOResampleAlg structure"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:93
msgid "The following resampling algorithms are available :"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:113
msgid ""
"Those new resampling methods can be used by the "
"GDALRasterBand::IRasterIO() default implementation when the size of the "
"buffer (nBufXSize x nBufYSize) is different from the size of the area of "
"interest (nXSize x nYSize). The code heavily relies on the algorithms "
"used for overview computation, with adjustments to be also able to deal "
"with oversampling. Bilinear, CubicSpline and Lanczos are now available in"
" overview computation as well, and rely on the generic infrastructure for"
" convolution computation introduced lately for improved cubic overviews. "
"Some algorithms are not available on raster bands with color palette. A "
"warning will be emitted if an attempt of doing so is done, and nearest "
"neighbour will be used as a fallback."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:125
msgid ""
"The GDAL_RASTERIO_RESAMPLING configuration option can be set as an "
"alternate way of specifying the resampling algorithm. Mainly useful for "
"tests with applications that do not yet use the new API."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:129
msgid ""
"Currently, the new resampling methods are only available for GF_Read "
"operations. The use case for GF_Write operations isn't obvious, but could"
" be added without API changes if needed."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:134
msgid "C++ changes"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:136
msgid ""
"GDALDataset and GDALRasterBand (non virtual) RasterIO() and (virtual) "
"IRasterIO() methods have a new final argument psExtraArg of type "
"GDALRasterIOExtraArg*. This extra argument defaults to NULL for code "
"using GDAL, but is required for all in-tree code, so as to avoid that in-"
"tree code forgets to forwards psExtraArg it might have returned from a "
"caller."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:143
msgid ""
"GDALDataset::RasterIO() and GDALRasterBand::RasterIO() can accept a NULL "
"pointer for that argument in which case they will instantiate a default "
"GDALRasterIOExtraArg structure to be passed to IRasterIO(). Any other "
"code that calls IRasterIO() directly (a few IReadBlock() implementations)"
" should make sure of doing so, so that IRasterIO() can assume that its "
"psExtraArg is not NULL."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:150
msgid ""
"As a provision to be able to deal with very large requests with buffers "
"larger than several gigabytes, the nPixelSpace, nLineSpace and nBandSpace"
" parameters have been promoted from the int datatype to the new GSpacing "
"datatype, which is an alias of a signed 64 bit integer."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:155
msgid ""
"GDALRasterBand::IRasterIO() and GDALDataset::BlockBasedRasterIO() now use"
" the progress callback when available."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:180
msgid ""
"Those are the same as the existing functions with a final "
"GDALRasterIOExtraArg\\* psExtraArg argument, and the spacing parameters "
"promoted to GSpacing."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:187
msgid ""
"All in-tree drivers that implemented or used RasterIO have been edited to"
" accept the GDALRasterIOExtraArg\\* psExtraArg parameter, and forward it "
"when needed. Those who had a custom RasterIO() implementation now use the"
" progress callback when available."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:191
msgid ""
"VRT: the and elements can accept a 'resampling' attribute. The VRT driver"
" will also set the dfXOff, dfYOff, dfXSize and dfYSize fields of "
"GDALRasterIOExtraArg\\* to have source sub-pixel accuracy, so that "
"GDALRasterBand::IRasterIO() leads to consistent results when operating on"
" a small area of interest or the whole raster. If that was not done, "
"chunking done in GDALDatasetCopyWholeRaster() or other algorithms could "
"lead to repeated lines due to integer rounding issues."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:203
msgid ""
"gdal_translate: accept a -r parameter to specify the resampling "
"algorithm. Defaults to NEAR. Can be set to bilinear, cubic, cubicspline, "
"lanczos, average or mode. (Under the hood, this sets the new resampling "
"property at the VRT source level.)"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:207
msgid ""
"gdaladdo: -r parameter now accepts bilinear, cubicspline and lanczos as "
"additional algorithms to the existing ones."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:213
msgid ""
"For Python and Perl bindings: Band.ReadRaster(), Dataset.ReadRaster() now"
" accept optional resample_alg, callback and callback_data arguments. "
"(untested for Perl, but the existing tests pass)"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:216
msgid ""
"For Python bindings, Band.ReadAsArray() and Dataset.ReadAsArray() now "
"accept optional resample_alg, callback and callback_data arguments."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:222
msgid "C API/ABI preserved."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:224
msgid ""
"C++ users of the GDALRasterBand::RasterIO() and GDALDataset::RasterIO() "
"API do not need to change their code, since the new "
"GDALRasterIOExtraArg\\* psExtraArg argument is optional for out-of-tree "
"code."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:229
msgid ""
"Out-of-tree drivers that implement IRasterIO() must be changed to accept "
"the new GDALRasterIOExtraArg\\* psExtraArg argument. Note: failing to do "
"so will be undetected at compile time (due to how C++ virtual method "
"overloading work)."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:234
msgid "Both issues will be mentioned in MIGRATION_GUIDE.TXT"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:239
msgid "All new methods are documented."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:244
msgid "The various aspects of this RFC are tested in the Python bindings:"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:246
msgid ""
"use of the new options of Band.ReadRaster(), Dataset.ReadRaster(), "
"Band.ReadAsArray() and Dataset.ReadAsArray()."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:248
msgid "resampling algorithms in subsampling and oversampling RasterIO() requests."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:250
msgid "\"-r\" option of gdal_translate"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:255
msgid ""
"Implementation will be done by Even Rouault (`Spatialys "
"<http://spatialys.com>`__), and sponsored by `R3 GIS "
"<http://r3-gis.com>`__."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:259
msgid ""
"The proposed implementation lies in the \"rasterio\" branch of the "
"`https://github.com/rouault/gdal2/tree/rasterio "
"<https://github.com/rouault/gdal2/tree/rasterio>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:263
msgid ""
"The list of changes : `https://github.com/rouault/gdal2/compare/rasterio "
"<https://github.com/rouault/gdal2/compare/rasterio>`__"
msgstr ""

#: ../../source/development/rfc/rfc51_rasterio_resampling_progress.rst:269
msgid "+1 from FrankW, JukkaR, HowardB, DanielM, TamasS and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:5
msgid "RFC 52: Strict OGR SQL quoting"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:11
msgid "Status: adopted, implemented in GDAL 2.0"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:16
msgid ""
"This RFC proposes that OGR SQL enforces strict quoting rules for SQL "
"literals and identifiers"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:22
msgid ""
"Currently the OGR SQL engine deals indifferently with single quote "
"characters (') and double quote characters (\"), although they can be "
"used in 2 different contexts :"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:26
msgid "to specify string literals"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:27
msgid "to specify column or table names (when they need quoting)"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:29
msgid ""
"SQL 92 mandates that string literals are surrounded with single quote "
"characters whereas quoted identifiers (column, table names) are "
"surrounded with double quote characters."
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:33
msgid ""
"From `http://savage.net.au/SQL/sql-92.bnf.html "
"<http://savage.net.au/SQL/sql-92.bnf.html>`__:"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:41
msgid ""
"Current OGR behavior is generally fine, except in some situations when "
"specifying columns in a SELECT statement or in a WHERE expression. The "
"OGR SQL engine tries to determine the intent with the following rule : if"
" the quoted string matches a column name, then it is assumed to be a "
"column identifier, otherwise a string litteral. But sometimes (see "
"`http://trac.osgeo.org/gdal/ticket/5428 "
"<http://trac.osgeo.org/gdal/ticket/5428>`__), there are situations where "
"filters such as \"MyField\" = 'MYFIELD' are needed, and currently they "
"always evaluate to TRUE."
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:50
msgid ""
"To avoid any ambiguities and more conformant to SQL, string literals "
"should be single-quoted, and identifiers (column/table names) unquoted or"
" surrounded by double-quote character if conflicting with reserved "
"keywords."
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:58
#: ../../source/development/rfc/rfc56_millisecond_precision.rst:169
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:135
msgid ""
"Implementation will be done by Even Rouault (`Spatialys "
"<http://spatialys.com>`__)."
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:61
msgid ""
"The proposed implementation lies in the \"rfc52_stricter_sql\" branch of "
"the `https://github.com/rouault/gdal2/tree/rfc52_stricter_sql "
"<https://github.com/rouault/gdal2/tree/rfc52_stricter_sql>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:66
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/rfc52_stricter_sql "
"<https://github.com/rouault/gdal2/compare/rfc52_stricter_sql>`__"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:72
msgid ""
"This change affects compatibility in the sense that users that relied on "
"the current permissive behavior will have to adapt their SQL expressions."
" This might be quite tricky to detect as it will not always cause obvious"
" runtime failures. For example \" SELECT "
"'i_thought_this_would_be_interpreted_as_a_column_name_but_now_it_is_a_string_litteral'"
" FROM atable \" will run without error but not produce the previously "
"expected result. So applications will have to review how they build SQL "
"filters ( SetAttributeFilter() ) and expressions ( ExecuteSQL() )"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:81
msgid ""
"Expressions fixed to be compliant with stricter rules will also work with"
" older GDAL versions."
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:84
msgid ""
"A prominent warning should also be put on the OGR SQL documentation page "
"to advertise the change of behavior"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:88
msgid "Discussion"
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:90
msgid ""
"Tests done with SQLite show that it is sometimes tolerant to misuse of "
"quote characters, but in the reverse way as current OGR. So it will "
"accept SELECT \"non_existing_column\" FROM 'atable' and interpret it as "
"SELECT 'non_existing_column' FROM \"atable\". On the contrary, PostgreSQL"
" will not accept it. I'd be rather inclined to follow PostgreSQL stricter"
" approach to keep things simple and understandable: \"string literals "
"should be single-quoted, and identifiers (column/table names) unquoted or"
" surrounded by double-quote character\""
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:102
msgid "The Python autotest suite will be fixed to still pass."
msgstr ""

#: ../../source/development/rfc/rfc52_strict_sql_quoting.rst:107
#: ../../source/development/rfc/rfc70_output_format_guess.rst:131
msgid "+1 from JukkaR, TamasS, DanielM and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:5
msgid "RFC 53: OGR not-null constraints and default values"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:16
msgid ""
"This RFC addresses handling of NOT NULL constraints and DEFAULT values "
"for OGR fields. NOT NULL constraints are useful to maintain basic data "
"integrity and are handled by most (all?) drivers that have SQL "
"capabilities. Default fields values may be used complementary or "
"independently of NOT NULL constraints to specify the value a field must "
"be assigned to if it is not provided when inserting a feature into the "
"layer."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:25
msgid "NOT NULL constraint"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:27
msgid ""
"Up to now, OGR fields did not have NOT NULL constraints, i.e. fields in "
"layers/tables were created with the possibility for a field of a "
"feature/record to be unset (i.e. having a NULL value). This will still be"
" the default, i.e. fields are assumed to be nullable. The OGRFieldDefn "
"class is extended with a boolean attribute bNullable that defaults to "
"TRUE and can be set to FALSE to express a NOT NULL constraint (bNullable "
"has been preferred over bNotNullable to avoid confusion with double "
"negation). Drivers that can translate NOT NULL constraints in their "
"storage will use that attribute to determine if the field definition must"
" include a NOT NULL constraint. When opening a datasource, their metadata"
" will be inspected to set the nullable attribute properly, so that round-"
"tripping works."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:40
msgid "The following methods are added to the OGRFieldDefn class"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:79
msgid ""
"As this holds true for geometry fields, those 2 methods are also add to "
"the OGRGeometryFieldDefn class."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:82
msgid ""
"Note that adding a field with a NOT NULL constraint on a non-empty layer "
"is generally impossible, unless a DEFAULT value is associated with it."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:85
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:292
msgid "The following method is added to the OGRFeature class :"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:111
msgid "where nValidateFlags is a combination of :"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:148
msgid ""
"Validation of NOT NULL constraints is generally let to the driver low-"
"level layer, so OGRFeature::Validate() is only useful on a few cases (one"
" of such case is the GML driver)"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:152
msgid ""
"A new flag ALTER_NULLABLE_FLAG = 0x8 is added to be passed to "
"OGRLayer::AlterFieldDefn() so as to set or drop NULL / NOT-NULL "
"constraints (for drivers that implement it)."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:156
msgid ""
"Drivers that handle NOT NULL constraint for regular attribute fields "
"should advertise the new GDAL_DCAP_NOTNULL_FIELDS and/or "
"GDAL_DCAP_NOTNULL_GEOMFIELDS driver metadata items."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:160
msgid ""
"Drivers that do not implement the OGRLayer::CreateGeomField() interface "
"(i.e. the ones that support single geometry field), but can create a "
"layer with a NOT NULL constraint on the geometry field can expose a "
"GEOMETRY_NULLABLE=YES/NO layer creation option."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:165
msgid ""
"Note: due to the way they are commonly written, the CreateField() "
"implementations of drivers that do not support NOT NULL constraint will "
"generally copy the value of the nullable flag, which may be a bit "
"misleading if querying the field definition just after having adding it "
"(the same holds true for width/precision as well)."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:171
#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:328
msgid "All above methods are mapped into the C API :"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:184
msgid "Default field values"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:186
msgid ""
"Fields with NOT NULL constraints are sometimes accompanied with a DEFAULT"
" clause so as to be able to create a new feature without filling all "
"fields, while maintaining integrity. DEFAULT values can also be set on "
"nullable fields but for reasons exposed later it is recommended to avoid "
"that."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:192
msgid ""
"Drivers that can translate DEFAULT values in their storage will use that "
"attribute to determine if the field definition must include a DEFAULT "
"value. When opening a datasource, their metadata will be inspected to set"
" the default value attribute properly, so that round-tripping works."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:197
msgid ""
"There was an embryonic support for default values in GDAL 1.X but that "
"never got implemented beyond the getter/setter methods on OGRFieldDefn. "
"It relied on a \"OGRField uDefault\" member. The choice of OGRField "
"restricts the default values to be expressed with the type of the field, "
"but in some situations we want to be able to assign expressions or "
"special keywords for non-string fields. For example the SQL standard "
"defines CURRENT_TIMESTAMP for DateTime fields. So as to be general, we "
"have remove this uDefault member and replaced it with a \"char\\* "
"pszDefault\" string."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:207
msgid "The values that can be set as default values are :"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:209
msgid ""
"literal string values enclosed in single-quote characters and properly "
"escaped like: ``'Nice weather. Isn''t it ?'``"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:211
msgid "numeric values (unquoted)"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:212
msgid ""
"reserved keywords (unquoted): CURRENT_TIMESTAMP, CURRENT_DATE, "
"CURRENT_TIME, NULL"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:214
msgid ""
"datetime literal values enclosed in single-quote characters with the "
"following defined format: 'YYYY/MM/DD HH:MM:SS[.sss]'"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:216
#, python-format
msgid ""
"any other driver specific expression. e.g. for SQLite: "
"(strftime('%Y-%m-%dT%H:%M:%fZ','now'))"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:219
msgid "The following methods are added/modified to the OGRFieldDefn class"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:281
msgid ""
"SetDefault() validates that a string litteral beginning with ' is "
"properly escaped."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:284
msgid ""
"IsDefaultDriverSpecific() returns TRUE if the value set does not belong "
"to one of the 4 bullets in the above enumeration. This is used by drivers"
" to determine if they can handle or not a default value."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:288
msgid ""
"Drivers should do some effort to interpret and reformat default values in"
" the above 4 standard formats so as to be able to propagate default "
"values from one driver to another one."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:309
msgid ""
"It will replace unset fields of a feature with their default values, but "
"should rarely be used as most drivers will do that substitution "
"automatically in their low-level layer. CreateFeature() cannot be trusted"
" to automatically modify the passed OGRFeature object to set unset fields"
" to their default values. For that, an explicit GetFeature() call should "
"be issued to retrieve the record as stored in the database."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:316
msgid ""
"A new flag ALTER_DEFAULT_FLAG = 0x8 is added to be passed to "
"OGRLayer::AlterFieldDefn() so as to set, drop or modify default values "
"(for drivers that implement it)"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:320
msgid ""
"Drivers that handle default values should advertise the new "
"GDAL_DCAP_DEFAULT_FIELDS driver metadata items."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:323
msgid ""
"Note: due to the way they are commonly written, the CreateField() "
"implementations of drivers that do not support default values will "
"generally copy the value of the default value string, which may be a bit "
"misleading if querying the field definition just after having adding it."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:341
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:518
#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:55
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:74
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:156
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:64
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:204
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:293
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:59
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:214
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:111
msgid "SWIG bindings (Python / Java / C# / Perl) changes"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:343
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:520
msgid "The following additions have been done :"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:345
msgid "SetNullable(), IsNullable() added on FieldDefn class"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:346
msgid "SetNullable(), IsNullable() added on GeomFieldDefn class"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:347
msgid "Validate() added on Feature class"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:348
msgid ""
"SetDefault(), GetDefault(), IsDefaultDriverSpecific() available on "
"FieldDefn class"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:350
msgid "FillUnsetWithDefault() added on Feature class"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:355
msgid ""
"ogrinfo has been updated to expose NOT NULL constraints and DEFAULT "
"values. e.g."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:370
msgid "2 news options have been added to ogr2ogr :"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:372
msgid ""
"-forceNullable to remove NOT NULL constraint (NOT NULL constraints are "
"propagated by default from source to target layer)"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:374
msgid ""
"-unsetDefault to remove DEFAULT values (DEFAULT values are propagated by "
"default from source to target layer)"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:377
msgid ""
"Unless it is explicitly specified, ogr2ogr will also automatically set "
"the GEOMETRY_NULLABLE=NO creation option to target layers that support "
"it, if the source layer has its first geometry field with a NOT NULL "
"constraint."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:385
msgid "New/modified API are documented."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:390
msgid "The following OGR drivers have been updated to support the new interfaces."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:393
msgid ""
"PG: supports NOT NULL (for attribute and multiple geometry fields) and "
"DEFAULT on creation/read. AlterFieldDefn() implementation modified to "
"support ALTER_NULLABLE_FLAG and ALTER_DEFAULT_FLAG."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:396
msgid ""
"PGDump: supports NOT NULL (for attribute and multiple geometry fields) "
"and DEFAULT on creation."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:398
msgid ""
"CartoDB: supports NOT NULL (for attribute and single geometry fields) and"
" DEFAULT on creation. Supported also on read with authenticated login "
"only (relies on queries on PostgreSQL system tables)"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:401
msgid ""
"GPKG: supports NOT NULL (for attribute and its single geometry field) and"
" DEFAULT on creation/read. GEOMETRY_NULLABLE layer creation added."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:403
msgid ""
"SQLite: supports NOT NULL (for attribute and multiple geometry fields. "
"Support for multiple geometry fields has been added recently per #5494) "
"and DEFAULT on creation/read. AlterFieldDefn() implementation modified to"
" support ALTER_NULLABLE_FLAG and ALTER_DEFAULT_FLAG."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:408
msgid ""
"MySQL: supports NOT NULL (for attribute fields only) and DEFAULT on "
"creation/read."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:410
msgid ""
"OCI: supports NOT NULL (for attribute and its single geometry field) and "
"DEFAULT on creation/read. GEOMETRY_NULLABLE layer creation added."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:412
msgid ""
"VRT: supports NOT NULL (for attribute and multiple geometry fields) and "
"DEFAULT on read, through new attributes \"nullable\" and \"default\" "
"(driver documentation and data/ogrvrt.xsd updated)"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:415
msgid ""
"GML: supports NOT NULL (for attribute and multiple geometry field) on "
"creation/read. DEFAULT not trully supported (no way to express it in .xsd"
" AFAIK), but on creation, unset fields with a NOT NULL constraint and "
"DEFAULT values will be filled by using FillUnsetWithDefault() so as to "
"generate valid XML."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:420
msgid "WFS: supports NOT NULL (for attribute fields only) on read"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:421
msgid ""
"FileGDB: supports NOT NULL (for attribute and its single geometry field) "
"on read/write. GEOMETRY_NULLABLE layer creation added. DEFAULT supported "
"for String,Integer and Real fieds on creation/read (with some bugs/weird "
"behavior seen in FileGDB SDK and E$RI tools, workarounded by using the "
"OpenFileGDB driver in problematic cases...). DEFAULT supported for "
"DateTime on read, but unsupported on creation to bug in FileGDB SDK."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:428
msgid ""
"OpenFileGDB: supports NOT NULL (for attribute and its single geometry "
"field) and DEFAULT on read"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:431
msgid ""
"MSSQLSpatial could probably support NOT NULL / DEFAULT, but has not been "
"updated as part of this work."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:437
msgid "The test suite is extended to test:"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:439
msgid ""
"all new methods of OGRFieldDefn, OGRGeomFieldDefn and OGRFeature in "
"ogr_feature.py"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:441
msgid ""
"updated drivers: PG, PGDump, CartoDB, GPKG, SQLite, MySQL, OCI, VRT, GML,"
" FileGDB, OpenFileGDB"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:443
msgid ""
"new options of ogr2ogr, and default behavior with NOT NULL / DEFAULT "
"propagation"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:449
msgid "This RFC should cause few compatibility issues."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:451
msgid ""
"Regarding API, the existing OGRFieldDefn::SetDefault() has been changed "
"and GetDefaultRef() has been removed. Impact should be low as this wasn't"
" used in any drivers, was documented as being prone to be removed in the "
"future, and so was unlikely to be used in applications either (there was "
"no C binding)"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:457
msgid ""
"When not using the new API, behavior should remain unchanged w.r.t GDAL "
"1.X when operating on layers created by GDAL. If reading layers created "
"by other tools, then NOT NULL and/or DEFAULT can be read, and propagated."
" We cannot exclude that propagation of NOT NULL / DEFAULT can cause "
"problems in some situations. In which case the new options of ogr2ogr "
"will revert to a behavior that was the one of the GDAL 1.X era."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:467
msgid ""
"There might be an ambiguity between a field that has not been set and a "
"field that is set to NULL. Both concepts are not distinguished in OGR "
"currently, but most RDBMS are able to make such a distinction."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:471
msgid "Consider the 2 following statements :"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:478
msgid "They are not equivalent when COL2 has a default value."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:480
msgid ""
"The behavior of the modified drivers by this RFC is to *NOT* emit NULL at"
" CreateFeature() time when a field is unset, so that the low-level layer "
"of the driver can replace it with its default value if it exists. This is"
" generally the wished behavior."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:485
msgid ""
"If explicit NULL insertion is wanted, then using SetFeature() afterwards "
"might be needed, if supported by the drivers (some drivers will likely "
"not force unset OGR fields to be NULL when composing an UPDATE "
"statement), otherwise with a direct SQL UPDATE statement."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:490
msgid ""
"In fact, this confusion between unset or NULL hurts only in the case of "
"fields that are nullable and have a DEFAULT value. If making sure to "
"always associate DEFAULT with NOT NULL, then it becomes a non-issue as "
"the database would refuse explicit NULL values."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:495
msgid ""
"Solving the confusion would require to add a new state to an instantiated"
" field within a feature to distinguish explicit NULL from unset, but this"
" would have deep impact in drivers and application code."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:506
msgid ""
"The proposed implementation lies in the \"rfc53_ogr_notnull_default\" "
"branch of the "
"`https://github.com/rouault/gdal2/tree/rfc53_ogr_notnull_default "
"<https://github.com/rouault/gdal2/tree/rfc53_ogr_notnull_default>`__ "
"repository."
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:511
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/rfc53_ogr_notnull_default "
"<https://github.com/rouault/gdal2/compare/rfc53_ogr_notnull_default>`__"
msgstr ""

#: ../../source/development/rfc/rfc53_ogr_notnull_default.rst:517
msgid "+1 from JukkaR, DanielM and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:5
msgid "RFC 54: Dataset transactions"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:16
msgid ""
"This RFC introduces an API to offer a transaction mechanism at dataset "
"level and uses it in the PostgreSQL, SQLite and GPKG drivers. It also "
"reworks significantly how transactions are handled in the PostgreSQL "
"driver. It also introduces a generic mechanism to implement an emulation "
"of transactions for datasources that would not natively support it, and "
"uses it in the FileGDB driver."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:26
msgid ""
"The current abstraction offers a transaction API at the layer level. "
"However, this is generally misleading since, when it is implemented in "
"DBMS with BEGIN/COMMIT/ROLLBACK sql statements (PostgreSQL, SQLite, GPKG,"
" PGDump, MSSQLSpatial), the semantics is really a transaction at database"
" level that spans over all layers/tables. So even if calling "
"StartTransaction() on a layer, it also extends on the changes done on "
"other layers. In a very few drivers "
"StartTransaction()/CommitTransaction() is sometimes used as a mechanism "
"to do bulk insertion. This is for example the case of WFS, CartoDB, GFT, "
"GME. For some of them, it could rather be at dataset level too since "
"potentially multiple layer modifications could be stacked together."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:38
msgid ""
"Furthermode some use cases require updating several layers consistently, "
"hence the need for a real database level transaction abstraction."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:41
msgid ""
"The current situation of various drivers is the following (some of the "
"below observations resulting from the analysis are kept mainly for the "
"benefit of developers that would need to work in the drivers) :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:46
msgid "PostgreSQL"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:48
msgid "A few facts about cursors used to run GetNextFeature() requests:"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:50
msgid ""
"Cursors are needed for retrieval of huge amount of data without being "
"memory bound."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:52
msgid "Cursors need transactions to run."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:53
msgid ""
"Default cursors (WITHOUT HOLD) cannot be used outside of the transaction "
"that created tem"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:55
msgid ""
"You cannot modify the structure of a table while the transaction (yes, "
"the transaction, not the cursor) is still active and if you do that on "
"another connection, it hangs until the other connection commits or "
"rollbacks)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:59
msgid ""
"Within a transaction, deleted/modified rows are only visible if they are "
"done before declaring the cursor."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:61
msgid ""
"Cursors WITH HOLD: may be used outside of transaction but cause a copy of"
" the table to be done --> bad for performance"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:64
msgid "Current flaws are :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:66
msgid ""
"one cannot do interleaved layer reading (beyond the first 500 features "
"fetched, can be easily seen with OGR_PG_CURSOR_PAGE=1) due to the "
"underlying implicit transaction created to read layer A being closed when"
" the reading of layer B starts."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:70
msgid ""
"GetFeature() flushes the current transaction and starts a new one to do a"
" cursor SELECT. Which is unnecessary since we retrieve only one record"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:73
msgid ""
"SetAttributeFilter() issues a ResetReading() which currently "
"FlushSoftTransaction() the ongoing transaction. Can be annoying in a "
"scenario with long update where you need transactional guarantee"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:77
msgid "What works :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:79
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:90
msgid "Transaction support at the layer level forwarded to datasource."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:80
msgid "Interleaved writing works (even with copy mode)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:83
msgid "SQLite/GPKG"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:85
msgid ""
"Mechanisms used to read table content (sqlite3_prepare() / "
"sqlite3_step()) do not need transactions."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:87
msgid ""
"Step sees structure modifications (e.g. column addition) if run after "
"prepared statement but before first step."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:89
msgid "Step sees row modifications/additions as soon as they occur."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:93
msgid "MySQL"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:95
msgid ""
"Cannot do interleaved layer reading (reading in one layer resets the "
"other reading) because of the use of mysql_use_result() that can work "
"with one single request at a time. mysql_store_result() would be a "
"solution but requires ingesting the whole result set into memory, which "
"is inpractical for big layers."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:100
msgid ""
"step does not set row changes once the query has started (if done through"
" another connection, because if done through ExecuteSQL() the long "
"transaction is interrupted)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:103
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:110
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:117
msgid "No transaction support"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:108
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:115
msgid "Interleaved layer reading works"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:109
#: ../../source/development/rfc/rfc54_dataset_transactions.rst:116
msgid "Changes done after SELECT seem not to be seen."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:120
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:38
msgid "Proposed changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:123
msgid "GDALDataset changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:125
msgid ""
"The following methods are added to GDALDataset (and usable by "
"OGRDataSource which inherits from GDALDataset)."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:218
msgid ""
"Note: in the GDALDataset class itself, those methods have an empty "
"implementation that returns OGRERR_UNSUPPORTED_OPERATION."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:221
msgid "Those 3 methods are mapped at the C level as :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:229
msgid "Two news dataset capabilities are added :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:231
msgid ""
"ODsCTransactions: True if this datasource supports (efficient) "
"transactions."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:233
msgid ""
"ODsCEmulatedTransactions: True if this datasource supports transactions "
"through emulation."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:237
msgid "Emulated transactions"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:239
msgid ""
"A new function OGRCreateEmulatedTransactionDataSourceWrapper() is added "
"for used by drivers that do not natively support transactions but want an"
" emulation of them. It could potentially be adopted by any datasource "
"whose data is supported by files/directories."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:279
msgid "The definition of the IOGRTransactionBehaviour interface is the following:"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:343
msgid "OPGRLayer changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:345
msgid ""
"At the OGRLayer level, the documentation of GetNextFeature() receives the"
" following additional information to clarify its semantics :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:359
msgid "PG driver changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:361
msgid ""
"Dataset level transactions have been implemented, and use of implicitly "
"created transactions reworked."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:364
msgid "Interleaved layer reading is now possible."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:366
msgid ""
"GetFeature() has been modified to run without a cursor or a transaction, "
"and all other calls to transactions have been checked/modified to not "
"reset accidentally a transaction initiated by the user."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:370
msgid ""
"Below the new behavior as described in the updated drv_pg_advanced.html "
"help page :"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:493
msgid ""
"It is recommended to do operations within explicit transactions for ease "
"of mind (some troubles fixing ogr_pg.py, but which does admittedly weird "
"things like reopening connections, which does not fly very well with "
"'implicit' transactions)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:499
msgid "GPKG and SQLite driver changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:501
msgid ""
"Dataset level transactions have been implemented. A few fixes made here "
"and there to avoid resetting accidentally a transaction initiated by the "
"user."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:506
msgid "FileGDB driver changes"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:508
msgid ""
"The FileGDB driver uses the above described emulation to offer a "
"transaction mechanism. This works by backing up the current state of a "
"geodatabase when StartTransaction(force=TRUE) is called. If the "
"transaction is committed, the backup copy is destroyed. If the "
"transaction is rolled back, the backup copy is restored. So this might be"
" costly when operating on huge geodatabases. Note that this emulation has"
" an unspecified behavior in case of concurrent updates (with different "
"connections in the same or another process)."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:522
msgid "Dataset.StartTransaction(int force=FALSE)"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:523
msgid "Dataset.CommitTransaction()"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:524
msgid "Dataset.RollbackTransaction()"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:525
msgid "ogr.ODsCTransactions constant"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:526
msgid "ogr.ODsCEmulatedTransactions constant"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:531
msgid ""
"ogr2ogr now uses dataset transactions (instead of layer transactions) if "
"ODsCTransactions is advertized."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:537
msgid ""
"New/modified API are documented. MIGRATION_GUIDE.TXT updated with mention"
" to below compatibility issues."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:543
msgid "The test suite is extended to test"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:545
msgid "updated drivers: PG, GPKG, SQLite, FileGDB"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:546
msgid "use of database transactions by ogr2ogr"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:551
msgid ""
"As described above, subtle behavior changes can be observed with the PG "
"driver, related to implicit transactions that were flushed before and are"
" no longer now, but this should hopefully be restricted to non-typical "
"use cases. So some cases that \"worked\" before might no longer work, but"
" the new behavior should hopefully be more understandable."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:558
msgid ""
"The PG and SQLite drivers could accept apparently nested calls to "
"StartTransaction() (at the layer level). This is no longer possible since"
" they are now redirected to dataset transactions, that explicitly do not "
"support it."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:564
msgid "Out of scope"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:566
msgid ""
"The following drivers that implement BEGIN/COMMIT/ROLLBACK could be later"
" enhanced to support dataset transactions: OCI, MySQL, MSSQLSpatial."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:570
msgid "GFT, CartoDB, WFS could also benefit for dataset transactions."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:572
msgid ""
"VRT currently supports layer transactions (if the underlying dataset "
"support it, and excluding union layers). If dataset transaction were to "
"be implemented, should it consist in forwarding dataset transaction to "
"source dataset(s) ? Implementation might be complicated in case the same "
"dataset is used by multiple sources, but more fundamentally one cannot "
"guarantee ACID on multiple datasets."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:582
msgid ""
"A proposed revision on how transactions are implemented in the PG driver "
"was proposed a long time ago (`https://trac.osgeo.org/gdal/ticket/1265 "
"<https://trac.osgeo.org/gdal/ticket/1265>`__) to solve some of the above "
"issues. The patch no longer applies but it is expected that the changes "
"done for this RFC cover the issues that the ticket wanted to address."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:596
msgid ""
"The proposed implementation lies in the \"rfc54_dataset_transactions\" "
"branch of the "
"`https://github.com/rouault/gdal2/tree/rfc54_dataset_transactions "
"<https://github.com/rouault/gdal2/tree/rfc54_dataset_transactions>`__ "
"repository."
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:601
msgid ""
"The list of changes: "
"`https://github.com/rouault/gdal2/compare/rfc54_dataset_transactions "
"<https://github.com/rouault/gdal2/compare/rfc54_dataset_transactions>`__"
msgstr ""

#: ../../source/development/rfc/rfc54_dataset_transactions.rst:607
msgid "+1 from JukkaR, HowardB and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:5
msgid "RFC 55: Refined SetFeature() and DeleteFeature() semantics"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:16
msgid ""
"This RFC refines the semantics of SetFeature() and DeleteFeature() so as "
"to be able to distinguish nominal case, attempts of updating/deleting "
"non-existing features, from failures to update/delete existing features."
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:23
msgid ""
"Currently, depending on the drivers, calling SetFeature() or "
"DeleteFeature() on a non-existing feature may succeed, or fail. It is "
"generally not desirable that those functions return the OGRERR_NONE code,"
" as in most situations, it might be a sign of invalid input. Therefore "
"the OGRERR_NON_EXISTING_FEATURE return code is introduced so that drivers"
" can inform the calling code that it has attempted to update or delete a "
"non-existing feature."
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:32
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:49
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:31
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:29
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:130
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:33
#: ../../source/development/rfc/rfc62_raster_algebra.rst:99
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:177
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:40
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:55
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:44
msgid "Changes"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:34
msgid "#define OGRERR_NON_EXISTING_FEATURE 9 is added to ogr_core.h"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:39
msgid ""
"The following drivers are updated to implement the new semantics: "
"PostgreSQL, CartoDB, SQLite, GPKG, MySQL, OCI, FileGDB, Shape, MITAB"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:42
msgid "Note: MSSQL could also likely be updated"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:45
msgid "Caveats"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:47
msgid ""
"The behavior of the shapefile driver is a bit particular, in that, its "
"SetFeature() implementation accepts to recreate a feature that had been "
"deleted (and its CreateFeature() implementation ignores any set FID on "
"the passed feature to append a new feature). So "
"OGRERR_NON_EXISTING_FEATURE will effictively been returned only if the "
"FID is negative or greater or equal to the maximum feature count."
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:57
msgid ""
"OGRERR_NON_EXISTING_FEATURE is added. All OGRERR_xxxx constants are "
"exposed to the Python bindings"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:63
msgid "No impact"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:68
msgid ""
"Documentation of SetFeature() and DeleteFeature() mentions the new error "
"code. MIGRATION_GUIDE.TXT updated with mention to below compatibility "
"issues."
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:75
msgid ""
"The test suite is extended to test the modified drivers. test_ogrsf also "
"tests the behavior of drivers updating/deleting non-existing features."
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:81
msgid ""
"Code that expected update or deleting of non-existing features to succeed"
" will have to be updated."
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:91
msgid ""
"The proposed implementation lies in the "
"\"rfc55_refined_setfeature_deletefeature_semantics\" branch of the "
"`https://github.com/rouault/gdal2/tree/rfc55_refined_setfeature_deletefeature_semantics"
" "
"<https://github.com/rouault/gdal2/tree/rfc55_refined_setfeature_deletefeature_semantics>`__"
" repository."
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:96
msgid ""
"The list of changes: "
"`https://github.com/rouault/gdal2/compare/rfc55_refined_setfeature_deletefeature_semantics"
" "
"<https://github.com/rouault/gdal2/compare/rfc55_refined_setfeature_deletefeature_semantics>`__"
msgstr ""

#: ../../source/development/rfc/rfc55_refined_setfeature_deletefeature_semantics.rst:102
msgid "+1 from from DanielM, HowardB, JukkaR and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:5
msgid "RFC 56: OFTTime/OFTDateTime millisecond accuracy"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:13
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:13
msgid "Version: 2.0"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:18
msgid ""
"This RFC aims at adding millisecond accuracy to OFTTime and OFTDateTime "
"fields, as a number of formats support it explicitly or implicitly : "
"MapInfo, GPX, Atom (GeoRSS driver), GeoPackage, SQLite, PostgreSQL, CSV, "
"GeoJSON, ODS, XLSX, KML (potentially GML too)..."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:26
msgid "The OGRField enumeration is modified as such :"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:46
msgid ""
"So the \"GByte Second\" field is removed and replaced by a padding Byte "
"reserved for potential later uses. A \"float Second\" field is added."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:49
msgid ""
"On 32 bit builds, the size of OGRField is now 12 bytes instead of 8 "
"bytes. On 64 bit builds, the size of OGRField remains 16 bytes."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:53
msgid "New/modified methods"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:55
msgid ""
"OGRFeature::SetFieldAsDateTime() methods that took a int nSecond now take"
" a float fSecond parameter. The GetFieldAsDateTime() method that took a "
"int\\* pnSecond is kept, and a new GetFieldAsDateTime() method that takes"
" a float\\* pfSecond is added."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:60
msgid "In OGRFeature class :"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:80
msgid ""
"OGRFeature::GetFieldAsString() is modified to output milliseconds if the "
"Second member of OGRField.Date is not integral"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:83
msgid "OGRParseDate() is modified to parse second as floating point number."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:85
msgid ""
"The following utility functions have their signature modified to take a "
"OGRField (instead of the full year, month, day, hour, minute, second, "
"TZFlag decomposition) and accept decimal seconds as input/output :"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:115
msgid "The following drivers now accept milliseconds as input/output :"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:117
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:56
msgid "GeoJSON"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:118
msgid "CSV"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:119
msgid "PG"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:120
msgid "PGDump (output only)"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:121
msgid "CartoDB"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:122
#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:434
msgid "GeoPackage"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:123
msgid "SQLite"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:124
msgid "MapInfo .tab and .mif"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:125
msgid "LIBKML"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:126
msgid "ODS"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:127
msgid "XLSX"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:128
msgid "GeoRSS (Atom format)"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:129
msgid "GPX"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:134
msgid ""
"Feature.GetFieldAsDateTime() and Feature.SetFieldAsDateTime() now "
"takes/returns a floating point number for seconds"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:140
msgid "This modifies the C/C++ API and ABI."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:142
msgid ""
"Output of above mentioned drivers will now include milliseconds if a "
"DateTime/Time field has such precision."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:146
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:116
#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:100
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:779
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:199
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:280
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:85
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:187
msgid "Related ticket"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:148
msgid ""
"The need came from `http://trac.osgeo.org/gdal/ticket/2680 "
"<http://trac.osgeo.org/gdal/ticket/2680>`__ for MapInfo driver."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:155
msgid ""
"All new/modified methods are documented. MIGRATION_GUIDE.TXT is updated "
"with a new section for this RFC."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:172
msgid ""
"The proposed implementation lies in the \"subsecond_accuracy\" branch of "
"the `https://github.com/rouault/gdal2/tree/subsecond_accuracy "
"<https://github.com/rouault/gdal2/tree/subsecond_accuracy>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:177
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/subsecond_accuracy "
"<https://github.com/rouault/gdal2/compare/subsecond_accuracy>`__"
msgstr ""

#: ../../source/development/rfc/rfc56_millisecond_precision.rst:183
#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:148
msgid "+1 from DanielM, JukkaR and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:5
msgid "RFC 57: 64-bit bucket counts for histograms"
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:18
msgid ""
"This RFC modifies the GDALRasterBand GetHistogram(), "
"GetDefaultHistogram() and SetDefaultHistogram() methods to accept arrays "
"of 64-bit integer instead of the current arrays of 32-bit integer for "
"bucket counts. It also changes GetRasterSampleOverview() to take a 64-bit"
" integer. This will fix issues when operating on large rasters that have "
"more than 2 billion pixels."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:28
msgid ""
"The following methods of GDALRasterBand class are modified to take a "
"GUIntBig\\* argument for GetHistogram() and SetDefaultHistograph(), "
"GUIntBig*\\* for GetDefaultHistogram() and GUIntBig for "
"GetRasterSampleOverview()"
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:50
msgid "PAM serialization/deserialization is also updated."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:80
msgid ""
"The existing methods GDALGetRasterHistogram(), GDALGetDefaultHistogram() "
"and GDALSetDefaultHistogram() are marked deprecated. They internally call"
" the 64-bit methods, and, for GDALGetRasterHistogram() and "
"GDALGetDefaultHistogram(), warn if a 32-bit overflow would occur, in "
"which case the bucket count is set to INT_MAX."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:89
msgid ""
"All in-tree drivers that use/implement the C++ histogram methods are "
"modified: ECW, VRT, MEM and HFA."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:95
msgid "gdalinfo and gdalenhance are modified to use the modified methods."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:100
msgid ""
"For Python bindings only, RasterBand.GetHistogram(), "
"GetDefaultHistogram() and SetDefaultHistogram() use the new 64-bit C "
"functions."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:104
msgid ""
"Other bindings could be updated, but likely need new typemaps for (int, "
"GUIntBig*). In the meantime, they still use the 32-bit C functions."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:110
msgid "This modifies the C++ API and ABI."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:112
msgid ""
"Out-of-tree drivers must make sure to take into account the updated C++ "
"API if they implement some of the 4 modified virtual methods."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:118
msgid "#5159"
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:123
msgid ""
"All new/modified methods/functions are documented. MIGRATION_GUIDE.TXT is"
" updated with a new section for this RFC."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:129
msgid "Setting/getting 64 bit values is tested in gcore/pam.y and gdrivers/mem.py"
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:138
msgid ""
"The proposed implementation lies in the \"histogram_64bit_count\" branch "
"of the `https://github.com/rouault/gdal2/tree/histogram_64bit_count "
"<https://github.com/rouault/gdal2/tree/histogram_64bit_count>`__."
msgstr ""

#: ../../source/development/rfc/rfc57_histogram_64bit_count.rst:142
msgid ""
"The list of changes : "
"`https://github.com/rouault/gdal2/compare/histogram_64bit_count "
"<https://github.com/rouault/gdal2/compare/histogram_64bit_count>`__"
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:5
msgid "RFC 58: Removing Dataset Nodata Value"
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:7
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:7
msgid "Authors: Sean Gillies"
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:9
#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:9
msgid "Contact: sean at mapbox.com"
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:13
#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:13
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:13
msgid "Implementation version: 2.1"
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:18
msgid ""
"This RFC concerns addition of a ``DeleteNoDataValue()`` function to the "
"C++ GDALRasterBand API. This function removes the nodata value of a "
"raster band. When it succeeds, the raster band will have no nodata value."
" When it fails, the nodata value will be unchanged."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:26
msgid ""
"The nodata value has accessors ``GetNoDataValue()`` and "
"``SetNoDataValue()``. For GeoTIFFs, the value is stored in a "
"TIFFTAG_GDAL_NODATA TIFF tag. Newly created GeoTIFF files can have no "
"nodata value (no tag), but once a nodata value is set and stored it can "
"only be given new values, it can not be removed. Nor can it be set to a "
"value outside the range of the data type; for 8-bit data passing ``nan``,"
" ``-inf``, or ``256`` to ``GDALSetNoDataValue()`` has the same effect as "
"passing 0."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:35
msgid "The problem with un-removable nodata values is this:"
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:37
msgid ""
"Nodata masks (see GDAL RFC 15) can cover up a nodata value but if the "
".msk file gets lost (and this is ever the problem with sidecar files), "
"the nodata value you were hiding is exposed again."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:40
msgid ""
"Nodata masks are not available everywhere in GDAL, nodata values are the "
"only definition of valid data in some parts of GDAL."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:43
msgid ""
"The current recommended practice for removing a nodata value is to copy "
"the GeoTIFF using gdal_translate, specifying that the nodata tag not be "
"copied over along with the data. By making the nodata value fully "
"editable and removable we could avoid copying unnecessarily."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:51
msgid ""
"The ``virtual CPLErr DeleteNoDataValue()`` method will be added to the "
"GDALRasterBand method in gdal_priv.h (C++ API), and ``CPLErr "
"GDALDeleteRasterNoDataValue()`` to gdal.h (C API)"
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:58
msgid "The following drivers will be updated: GTiff, MEM, VRT and KEA."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:60
msgid ""
"For GTiff, the TIFFTAG_GDAL_NODATA TIFF tag is unset if GDAL is built "
"against libtiff 4.X, which is the appropriate behavior. For libtiff 3.X "
"where TIFFUnsetField() does not exist, the tag is set to the empty string"
" : GDAL 2.0 will detect that as the absence of a nodata value, older "
"versions will parse it as 0."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:66
msgid ""
"The ``GDALPamRasterBand`` class will also be updated (for drivers that "
"have no built-in mechanism nodata mechanism and rely on .aux.xml "
"sidecars). Note that this only removes the tag from the .aux.xml, so in "
"the situation where a driver would have a internal way of storing nodata,"
" but would be opened in read-only mode (so defaulting to PAM), "
"DeleteNoData() would have no effect."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:76
msgid "The DeleteNoDataValue() method is added to the RasterBand object."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:81
msgid "The gdal_edit.py script is enhanced with a -unsetnodata option."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:86
msgid "The new method and function are documented."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:91
msgid "The tests of the updated drivers test the effect of the new method."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:96
msgid ""
"None for the C API. ABI change for the C++ API because of introduction of"
" a new virtual method."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:102
msgid "#2020 mentions the issue."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:107
msgid "Implementation will be done by Even Rouault and be sponsored by Mapbox."
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:109
msgid ""
"A proposed implementation is available in "
"`https://github.com/OSGeo/gdal/compare/trunk...rouault:rfc58_removing_nodata_value"
" "
"<https://github.com/OSGeo/gdal/compare/trunk...rouault:rfc58_removing_nodata_value>`__"
msgstr ""

#: ../../source/development/rfc/rfc58_removing_dataset_nodata_value.rst:115
msgid "+1 from EvenR, HowardB, DanielM and JukkaR"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:5
msgid "RFC 59.1 : GDAL/OGR utilities as a library"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:7
msgid "Authors: Faza Mahamood, Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:9
msgid "Contact: fazamhd at gmail dot com, even.rouault at spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:18
msgid ""
"This RFC defines how to expose GDAL/OGR C/C++ utilities as C callable "
"functions. The utility code is modified to call the new function. This "
"RFC gives a general frame and principles, demonstrated with a few "
"utilities, but aimed at being extended with other utilities."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:26
msgid ""
"There is a need for calling GDAL utilities from code without involving "
"system calls, to be able to work on in-memory datasets and use "
"progress/cancellation callback functions."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:33
msgid ""
"A public header file gdal_utils.h is created which contains the public "
"declarations of GDAL utilities. The current header(still in progress) can"
" be found `here "
"<https://github.com/rouault/gdal2/blob/rfc59.1/gdal/apps/gdal_utils.h>`__."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:38
msgid ""
"Each utility has a function (XXXXOptionsNew) to create an option "
"structure from arguments specified as an array of strings. This function "
"also accepts as argument an extra semi-private structure used to "
"cooperate with the code of the command line utility itself."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:43
msgid "For GDALInfo():"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:83
msgid "Similarly for GDALTranslate():"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:105
msgid "Similarly for GDALWarp():"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:130
msgid "Similarly for GDALVectorTranslate() (equivalent of ogr2ogr):"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:152
msgid ""
"For other utilities, see `gdal_utils.h "
"<http://svn.osgeo.org/gdal/trunk/gdal/apps/gdal_utils.h>`__"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:159
msgid "All bindings"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:161
msgid "For all bindings, the above functions are mapped to SWIG with :"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:276
msgid ""
"For other utilities, see `gdal.i "
"<http://svn.osgeo.org/gdal/trunk/gdal/swig/python/gdal.i>`__"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:280
msgid "Python bindings"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:282
msgid ""
"For Python bindings, convenience wrappers are created to allow specifying"
" options in a more user friendly way."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:306
msgid ""
"gdal.Info() can be used either with setting the attributes of "
"gdal.InfoOptions() or inlined arguments of gdal.Info(). Arguments can be "
"specified as array of strings, command line syntax or dedeicated "
"keywords. So various combinations are possible :"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:734
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:153
msgid "Utilities are modified to call the respective function."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:739
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:158
#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:266
#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:341
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:252
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:156
msgid "All new methods/functions are documented."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:744
msgid ""
"gdal.Info method is tested in `test_gdalinfo_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_gdalinfo_lib.py>`__."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:747
msgid ""
"gdal.Translate method is tested in `test_gdal_translate_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_gdal_translate_lib.py>`__"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:750
msgid ""
"gdal.Warp method is tested in `test_gdalwarp_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_gdalwarp_lib.py>`__"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:753
msgid ""
"gdal.VectorTranslate method is tested in `test_ogr2ogr_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_ogr2ogr_lib.py>`__"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:756
msgid ""
"gdal.DEMProcessing method is tested in `test_gdaldem_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_gdaldem_lib.py>`__"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:759
msgid ""
"gdal.Nearblack method is tested in `test_nearblack_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_nearblack_lib.py>`__"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:762
msgid ""
"gdal.Grid method is tested in `test_gdal_grid_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_gdal_grid_lib.py>`__"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:765
msgid ""
"gdal.Rasterize method is tested in `test_gdal_rasterize_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_gdal_rasterize_lib.py>`__."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:768
msgid ""
"gdal.BuildVRT method is tested in `test_gdalbuildvrt_lib.py "
"<http://svn.osgeo.org/gdal/trunk/autotest/utilities/test_gdalbuildvrt_lib.py>`__."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:774
#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:171
msgid ""
"None expected. Command line utilities will keep the same interface. It "
"will be checked by ensuring their tests in autotest/utilities still pass."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:784
msgid "Implementation will be done by Faza Mahamood and Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:786
msgid ""
"The proposed implementation for gdalinfo and gdal_translate lies in the "
"\"rfc59.1\" branch of the `https://github.com/rouault/gdal2/tree/rfc59.1 "
"<https://github.com/rouault/gdal2/tree/rfc59.1>`__."
msgstr ""

#: ../../source/development/rfc/rfc59.1_utilities_as_a_library.rst:793
msgid "+1 from DanielM and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:5
msgid "RFC 59 : GDAL/OGR utilities as a library"
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:7
msgid "Authors: Faza Mahamood"
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:9
msgid "Contact: fazamhd at gmail dot com"
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:11
msgid "Status: Retracted in favor of :ref:`rfc-59.1`"
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:16
msgid ""
"This RFC defines new function for each GDAL utility. The new utility "
"functions can be used to work on in-memory datasets. The utility code is "
"modified to call the new function. This RFC gives a general frame and "
"principles, demonstrated with gdalinfo, but aimed at being extended with "
"other utilities."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:25
msgid ""
"There is need for calling GDAL utilities from the code. But this involves"
" using system calls and cannot work on in-memory datasets."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:31
msgid ""
"New library libgdalutils is created. Both Unix and Windows build have "
"been modified to take into account the new lib. The GDAL utilities are "
"modified to use the new functions. New header file gdal_utils.h is "
"created which contains the public declarations of GDAL utilities. The "
"current header(still in progress) can be found `here "
"<https://github.com/fazam/gdal/blob/gdalinfo/gdal/apps/gdal_utils.h>`__."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:66
msgid ""
"For Python bindings only, new functions Info(), Translate() and Warp() "
"are added in the gdal module which uses the new GDALInfo(), "
"GDALTranslate() and GDALWarp() function respectively. Translate() is "
"added in the ogr module which uses the new OGR2OGR() function."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:71
msgid ""
"gdal.Info() can be used either with setting the attributes of "
"gdal.InfoOptions() or inlined arguments of gdal.Info()."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:163
msgid ""
"gdal.Info method is tested in test_gdalinfo_lib.py. gdal.Translate method"
" is tested in test_gdal_translate_lib.py. gdal.Warp method is tested in "
"test_gdalwarp_lib.py. ogr.Translate method is tested in "
"test_ogr2ogr_lib.py."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:176
msgid "Open question"
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:178
msgid ""
"What name should be given for librarified ogr2ogr? OGR2OGR() or "
"OGRTranslate() ?"
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:181
msgid ""
"The order of arguments in GDALTranslate(), GDALWarp() and OGR2OGR() is "
"currently dest then source(s)."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:194
msgid ""
"It is similar to GDALCreateCopy(const char\\* pszDestFilename, "
"GDALDatasetH hSrcDS, ....), so at least there's a form of consistency at "
"the API level. Any comments?"
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:204
msgid "Implementation will be done by Faza Mahamood."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:206
msgid ""
"The proposed implementation lies in the \"gdalinfo\" branch of the "
"`https://github.com/fazam/gdal/tree/gdalinfo "
"<https://github.com/fazam/gdal/tree/gdalinfo>`__."
msgstr ""

#: ../../source/development/rfc/rfc59_utilities_as_a_library.rst:209
msgid ""
"The list of changes : `https://github.com/fazam/gdal/compare/gdalinfo "
"<https://github.com/fazam/gdal/compare/gdalinfo>`__"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:5
msgid "RFC 5: Unicode support in GDAL"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:16
msgid ""
"This document contains proposal on how to make GDAL core locale "
"independent preserving support for native character sets."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:24
msgid ""
"Users work in localized environment using their native languages. That "
"means we can not assume ASCII character set when working with string data"
" passed to GDAL."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:27
msgid "GDAL uses UTF-8 encoding internally when working with strings."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:28
msgid "GDAL uses Unicode version of third-party APIs when it is possible."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:30
msgid ""
"So all strings, used in GDAL, are in UTF-8, not in plain ASCII. That "
"means we should convert user's input from the local encoding to UTF-8 "
"during interactive sessions. The opposite should be done for GDAL output."
" For example, when user passes a filename as a command-line parameter to "
"GDAL utilities, that filename should be immediately converted to UTF-8 "
"and only afetrwards passed to functions like GDALOpen() or OGROpen(). All"
" functions, which take character strings as parameters, assume UTF-8 "
"(with except of several ones, which will do the conversion between "
"different encodings, see Implementation). The same is valid for output "
"functions. Output functions (CPLError/CPLDebug), embedded in GDAL, should"
" convert all strings from UTF-8 to local encoding just before printing "
"them. Custom error handlers should be aware of UTF-8 issue and do the "
"proper transformation of strings passed to them."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:45
msgid ""
"The string encoding pops up again when GDAL needs to call the third-party"
" API. UTF-8 should be converted to encoding suitable for that API. In "
"particular, that means we should convert UTF-8 to UTF-16 before calling "
"CreateFile() function in Windows implementation of VSIFOpenL(). Another "
"example is a PostgreSQL API. PostgreSQL stores strings in UTF-8 encoding "
"internally, so we should notify server that passed string is already in "
"UTF-8 and it will be stored as is without any conversions and losses."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:54
msgid ""
"For file format drivers the string representation should be worked out on"
" per-driver basis. Not all file formats support non-ASCII characters. For"
" example, various .HDR labeled rasters are just 7-bit ASCII text files "
"and it is not a good idea to write 8-bit strings in such a files. When we"
" need to pass strings, extracted from such file outside the driver (e.g.,"
" in SetMetadata() call), we should convert them to UTF-8. If you just "
"want to use extracted strings internally in driver, there is no need in "
"any conversions."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:63
msgid ""
"In some cases the file encoding can differ from the local system encoding"
" and we do not have a way to know the file encoding other than ask a user"
" (for example, imagine a case when someone added a 8-bit non-ASCII string"
" field to mentioned above plain text .HDR file). That means we can't use "
"conversion form the local encoding to UTF-8, but from the file encoding "
"to UTF-8. So we need a way to get file encoding in some way on per "
"datasource basis. The natural solution of the problem is to introduce "
"optional open parameter \"ENCODING\" to GDALOpen/OGROpen functions. "
"Unfortunately, those functions do not accept options. That should be "
"introduced in another RFC. Fortunately, tehre is no need to add encoding "
"parameter immediately, because it is independent from the general i18n "
"process. We can add UTF-8 support as it is defined in this RFC and add "
"support for forcing per-datasource encoding later, when the open options "
"will be introduced."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:81
msgid ""
"New character conversion functions will be introduced in CPLString class."
" Objects of that class always contain UTF-8 string internally."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:106
msgid ""
"In order to use non-ASCII characters in user input every application "
"should call setlocale(LC_ALL, \"\") function right after the entry point."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:110
msgid ""
"Code example. Let's look how the gdal utilities and core code should be "
"changed in regard to Unicode."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:113
msgid "For input instead of"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:121
#: ../../source/development/rfc/rfc5_unicode.rst:136
msgid "we should do"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:129
msgid "For output instead of"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:145
msgid ""
"The filename passed to GDALOpen() in UTF-8 encoding in the code snippet "
"above will be further processed in the GDAL core. On Windows instead of"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:155
msgid "we do"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:167
msgid ""
"The actual implementation of the character conversion functions does not "
"specified in this document yet. It needs additional discussion. The main "
"problem is that we need not only local<->UTF-8 encoding conversions, but "
"*arbitrary*\\ <->UTF-8 ones. That requires significant support on "
"software part."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:176
msgid ""
"The GDAL/OGR backward compatibility will be broken by this new "
"functionality in the way how 8-bit characters handled. Before users may "
"rely on that all 8-bit character strings will be passed throgh the "
"GDAL/OGR without change and will contain exact the same data all the way."
" Now it is only true for 7-bit ASCII and 8-bit UTF-8 encoded strings. "
"Note, that if you used only ASCII subset with GDAL, you are not affected "
"by these changes."
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:184
msgid "From The Unicode Standard, chapter 5:"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:186
msgid ""
"*The width of wchar_t is compiler-specific and can be as small as 8 bits."
" Consequently, programs that need to be portable across any C or C++ "
"compiler should not use wchar_t for storing Unicode text.*"
msgstr ""

#: ../../source/development/rfc/rfc5_unicode.rst:202
msgid "Filenames also covered in [[wiki:rfc30_utf8_filenames]]"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:5
msgid "RFC 60 : Improved round-tripping in OGR"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:9
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:9
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:9
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:9
msgid "Contact: even.rouault at spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:18
msgid ""
"This RFC defines how to improve better round-tripping in conversion of "
"vector formats, in particular for GeoJSON extensions."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:24
msgid ""
"Some formats have concepts that are not well modeled by the OGR "
"abstraction, but that are desirable to be preserved in transformation "
"scenarios involving reprojection, spatial/attribute filtering, clipping, "
"etc... where the target format is the source format."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:29
msgid ""
"Various extensions exist above the core GeoJSON specification: at the "
"FeatureCollection, Feature or Geometry levels."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:32
msgid ""
"See `https://github.com/mapbox/carmen/blob/master/carmen-geojson.md "
"<https://github.com/mapbox/carmen/blob/master/carmen-geojson.md>`__,"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:72
msgid ""
"`https://github.com/geocoders/geocodejson-"
"spec/blob/master/draft/README.md <https://github.com/geocoders"
"/geocodejson-spec/blob/master/draft/README.md>`__:"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:108
msgid ""
"or `https://github.com/geojson/draft-"
"geojson/issues/80#issuecomment-138037554 <https://github.com/geojson"
"/draft-geojson/issues/80#issuecomment-138037554>`__ for a few examples."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:133
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:72
msgid "OGRFeature"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:135
msgid ""
"Two new members will be added to the OGRFeature class, m_pszNativeData "
"(string) and m_pszNativeMediaType (string). m_pszNativeData will contain "
"the representation (or part of the representation) of the original "
"feature, and m_pszNativeMediaType the `media type "
"<https://en.wikipedia.org/wiki/Media_type>`__"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:141
msgid "The following methods will be added to OGRFeature class:"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:151
msgid ""
"Thus, in the GeoJSON case, nativeData would contain the full "
"serialization of a GeoJSON Feature. m_pszNativeMediaType would be set to "
"\"application/vnd.geo+json\" The writer side of the GeoJSON driver would "
"start from the nativeData if present (and if nativeMediaType = "
"\"application/vnd.geo+json\", replace its properties member with the "
"content of the OGR fields and patch its geometry to include additional "
"JSON objects."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:159
msgid ""
"The OGRFeature::Clone() and ::SetFrom() methods will propagate nativeData"
" and nativeMediaType."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:163
msgid "OGRLayer"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:165
msgid ""
"A dedicated metadata domain \"NATIVE_DATA\" in which there would be a "
"\"NATIVE_DATA\" and \"NATIVE_MEDIA_TYPE\" items would be used. In the "
"GeoJSON case, this would contain JSON members at the FeatureCollection "
"level (excluding the features array of course)."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:171
msgid "Driver open options and layer creation options"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:173
msgid ""
"Drivers that support nativeData on read should expose a NATIVE_DATA "
"boolean open option, and disable it by default so as not to impact "
"performance. ogr2ogr will by default turn this option on."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:177
msgid ""
"Drivers that support nativeData on write at the layer level should expose"
" a NATIVE_DATA string and NATIVE_MEDIA_TYPE string layer creation "
"options, so that ogr2ogr can fill them with the content of the "
"NATIVE_DATA metadata domain of the source layer(s)."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:185
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:89
msgid "The following functions will be added:"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:195
msgid "SQL result layers"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:197
msgid ""
"Both OGR SQL and SQLite SQL dialect implementations have been modified to"
" propagate the content of the NATIVE_DATA metadata domain of the source "
"layer (the one of the FROM table) to the target layer, and NativeData and"
" NativeMediaType from source features are copied into target features."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:206
msgid ""
"The new functions will mapped to SWIG as GetNativeData(), "
"SetNativeData(), GetNativeMediaType() and SetNativeMediaType()"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:212
msgid ""
"The GeoJSON driver will be modified to implement this RFC, in read and "
"write, and thus will\\* :"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:215
msgid ""
"declare a NATIVE_DATA open option to enable storing layer and feature "
"native data."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:217
msgid ""
"and NATIVE_DATA & NATIVE_MEDIA_TYPE layer creation options so as to be "
"able to write native data at FeatureCollection levels"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:219
msgid "use OGRFeature nativeData on write."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:221
msgid ""
"The effect of this is that ogr2ogr will be able to preserve the members "
"marked between ``***`` in the below snippet:"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:246
msgid ""
"Other drivers like ElasticSearch and MongoDB drivers, that use a \\_json "
"OGR field for round-tripping could potentially be upgraded to benefit "
"from the mechanism of this RFC."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:253
msgid ""
"ogr2ogr will be modified to automatically copy nativeData at layer and "
"feature level. A -noNativeData flag will be added to avoid doing so, when"
" this is not desirable."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:257
msgid ""
"By default, ogr2ogr will open datasources with the NATIVE_DATA=YES open "
"option so that drivers that can store nativeData do so. And if the output"
" datasource supports the NATIVE_DATA and NATIVE_MEDIA_TYPE layer creation"
" options, it will feel them with the content of the source layer "
"NATIVE_DATA metadata domain."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:271
msgid "The GeoJSON and ogr2ogr related tests will be extended"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:276
msgid ""
"Nothing severe expected. Potentially existing scripts might need to add "
"-noNativeData to get previous behavior."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:282
msgid ""
"`https://trac.osgeo.org/gdal/ticket/5310 "
"<https://trac.osgeo.org/gdal/ticket/5310>`__"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:287
msgid ""
"The implementation will be done by Even Rouault (Spatialys) and be "
"sponsored by Mapbox."
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:290
msgid ""
"The proposed implementation lies in the \"rfc60_native_data\" branch of "
"the ​\\ `https://github.com/rouault/gdal2/tree/rfc60_native_data "
"<https://github.com/rouault/gdal2/tree/rfc60_native_data>`__, in pull "
"request `https://github.com/OSGeo/gdal/pull/75 "
"<https://github.com/OSGeo/gdal/pull/75>`__"
msgstr ""

#: ../../source/development/rfc/rfc60_improved_roundtripping_in_ogr.rst:299
msgid "+1 from HowardB, KurtS, TamasS, JukkaR and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:5
msgid "RFC 61 : Support for measured geometries"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:9
#: ../../source/development/rfc/rfc62_raster_algebra.rst:9
msgid "Contact: ari.jolma at gmail.com"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:13
msgid "Implementation in version: 2.1"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:18
msgid ""
"This RFC defines how to implement measured geometries (geometries, where "
"the points have M coordinate, i.e., they are XYM or XYZM)."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:24
msgid ""
"An M coordinate, which is also known as \"measure\", is an additional "
"value that can be stored for each point of a geometry (IBM Technical "
"Note, `https://www-304.ibm.com/support/docview.wss?uid=swg21054384 "
"<https://www-304.ibm.com/support/docview.wss?uid=swg21054384>`__)."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:29
msgid ""
"M coordinate is in the OGC simple feature model and it is used in many "
"vector data formats."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:35
msgid ""
"Changes are required into the C++ API and the C API needs to be enhanced."
" Several drivers need to be changed to take advantage of this enhancement"
" but also due to the changes in the C++ API."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:40
msgid "Common API"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:42
msgid ""
"New OGRwkbGeometryType values are needed. SFSQL 1.2 and ISO SQL/MM Part 3"
" will be used, i.e., 2D type + 2000 for M and 2D type + 3000 for ZM. "
"(Also types such as Tin, PolyhedralSurface and Triangle types can be "
"added for completeness, even if unimplemented currently). wkbCurve and "
"wkbSurface have been moved from #define to the OGRwkbGeometryType "
"enumerations, and their Z/M/ZM variants have been added as well (per "
"#6401)"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:50
msgid ""
"On a more general note, there could (should?) be a path to using a clean "
"set of values and have legacy support as an exception."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:53
msgid "Abstract types are defined and not part of the enum."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:115
#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:41
#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:58
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:56
msgid "C++ API"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:117
msgid ""
"The property int nCoordinateDimension in class OGRGeometry will be "
"replaced by int flags. It may have the following flags:"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:127
msgid ""
"The \"ignore\" flag is needed internally for backwards compatibility. The"
" flag OGR_G_NOT_EMPTY_POINT is used only to denote the emptiness of an "
"OGRPoint object."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:131
msgid ""
"Currently a hack to set nCoordDimension negative is used to denote an "
"empty point."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:134
msgid ""
"The removal of nCoordinateDimension may imply changes to drivers etc. "
"which get or set it."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:137
msgid "The tests are"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:144
msgid "The setters and getters are implemented with \\|= and &=."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:146
msgid ""
"When any of these flags is set or unset, the corresponding data becomes "
"invalid and may be discarded."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:149
msgid ""
"Keep the following methods with original semantics, i.e., coordinate "
"dimension is 2 or 3, but deprecate. There is some discrepancy in "
"documentation. Their documentation says that they may return zero for "
"empty points while in ogrpoint.cpp it says that negative nCoordDimension "
"values are used for empty points and the getCoordinateDimension method of"
" point returns absolute value of nCoordDimension - thus not zero. A fix "
"to the doc is probably enough."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:163
msgid ""
"It is proposed to possibly add a new method to replace "
"getCoordinateDimension. set3D and setMeasured would replace "
"setCoordinateDimension and flattenTo2D. See below."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:167
msgid "class OGRGeometry:"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:190
msgid ""
"int CoordinateDimension() should have the new semantics. The method name "
"in simple features documents actually is without prefix get."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:193
msgid ""
"Whether set3D and setMeasured should affect the children geometries in a "
"collection is an issue. Currently doc for setCoordinateDimension says "
"\"Setting the dimension of a geometry collection will affect the children"
" geometries.\", thus we have already committed to maintaining dimensions "
"of children in collections. It is proposed that set3D and setMeasured "
"either add or strip Z or M values to or from the geometry (including "
"possible children). In general the strategy should be to follow the "
"existing strategy regarding Z (i.e., to strip or add)."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:202
msgid ""
"Add property double m to class OGRPoint. Add constructor, getters, and "
"setters for it."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:205
msgid ""
"Add property double \\*padfM to class OGRSimpleCurve. Add constructor, "
"getters, and setters for it. New setters with postfix M are needed for "
"XYM data since the object may be upgraded to XYZ from XY in setters. Add "
"also methods RemoveM() and AddM() with similar semantics as Make3D and "
"Make2D."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:211
msgid ""
"Override methods set3D and setMeasured in those classes where "
"setCoordinateDimension is overridden."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:214
msgid ""
"Change the semantics of methods whose name begins with \\_ and have a "
"parameter \"int b3D\". The parameter will be \"int coordinates\", i.e., a"
" flags like int, which tells about Z and M."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:221
msgid "ogr_core.h:"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:228
msgid ""
"The current behavior is that calling SetPoint on a geometry with "
"coordinate dimension 2 upgrades the coordinate dimension 3. To keep 2D "
"points 2D SetPoint_2D must be used. Thus we need separate functions for M"
" and ZM geometries. The proposal is to use postfixes M and ZM, i.e., "
"SetPointM, SetPointZM. Similarly for AddPoint."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:234
msgid ""
"Currently there is no SetPoints_2D function. The doc at pabyZ param at "
"SetPoints comments that \"defaults to NULL for 2D objects\" but that does"
" not seem to be the case. See #6344. If that is fixed as written there, "
"then only SetPointsZM is needed."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:239
msgid ""
"GetPoint and GetPoints do not have a 2D version, so only \\*ZM version is"
" needed."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:242
msgid "ogr_api.h:"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:254
msgid "ogr_p.h (This is public header, so new functions are needed)"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:267
msgid "pggeometry.h is internal, so we can change the function prototype"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:280
msgid "Use of padfM requires changes to openfilegdb driver."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:283
msgid "GEOS, filters, and other issues"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:285
msgid ""
"When a geometry with measures is sent to GEOS or used as a filter the M "
"coordinate is ignored."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:288
msgid ""
"LocateAlong and LocateBetween are the only standard methods, which use M "
"but there could be others, which for example get the extent of M. Such "
"are not intended to be added now but they can be added later."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:295
msgid ""
"The new C API functions need to be exposed through swig. Further changes "
"depend on whether the language bindings are aware of coordinates. At "
"least Python and Perl are."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:299
msgid "The new geometry types will be included into the i files."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:301
msgid ""
"Some new setters and getters are needed for M. Is3D, IsMeasured, Set3D "
"and SetMeasured methods should be added. Also OGR_GT_HasM."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:307
msgid ""
"Drivers that are probably affected by the C++ changes are at least (these"
" use the CoordinateDimension API) pg, mssqlspatial, sqlite, db2, mysql, "
"gml, pgdump, geojson, libkml, gpkg, wasp, gpx, filegdb, vfk, bna, dxf."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:312
msgid ""
"The now deprecated CoordinateDimension API is proposed to be replaced "
"with calls to \\*3D and \\*Measured."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:315
msgid ""
"Once the support for M coordinates is in place the driver will advertise "
"the support."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:318
msgid ""
"Within the work of this RFC the support is built into memory, shape and "
"pg drivers. Support for other drivers are left for further work."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:324
msgid "There is a minimum requirement and new possibilities."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:326
msgid "ogrinfo: report measured geom type, report measures"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:328
msgid "ogr2ogr: support measured geom types"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:330
msgid "ogrlineref: seems to deal specifically with measures, needs more thought"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:332
msgid "gdal_rasterize: measure could be used for the burn-in value"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:334
msgid "gdal_contour: measure could be used as the \"elevation\" value"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:336
msgid "gdal_grid: measure could be used as the \"Z\" value"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:346
msgid ""
"At least the initial tests will be done with Perl unit tests "
"(swi/perl/t/measures-\\*.t). Later autotest suite will be extended. "
"Existing tests should not fail."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:353
msgid ""
"Many drivers (actually datasets and layers) which support measures need "
"to have the support added. Support should be advertised using"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:361
msgid ""
"The entry point for a creating a layer is CreateLayer method in "
"GDALDataset. If the dataset does not support measured geometries it will "
"strip the measured flag from the geometry type it gets as a parameter. "
"This is in line with current behavior non linear geometry types and "
"datasets not supporting them."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:367
msgid ""
"ICreateLayer, which all drivers that have create layer capability "
"implement, have geometry type as an argument. The method should call "
"CPLError() with CPLE_NotSupported and return NULL if the driver does not "
"support measures. Similarly for ICreateFeature and ISetFeature."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:372
msgid ""
"The user-oriented API functions (CreateLayer, CreateFeature, and "
"SetFeature) should (silently) strip out the measures before continuing to"
" the I\\* methods in drivers that do not support measures. This (side "
"effect) may not be what is wanted in some usage scenarios but it would "
"follow the pattern of what is already done with nonlinear geometries. "
"This should be documented."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:379
msgid ""
"An alternative would be to store M value(s) (or WKT or WKB) as attribute "
"(scalar or vector, depending on the geometry type)."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:382
msgid "Needs a decision."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:384
msgid ""
"Some incompatibilities will necessarily be introduced. For example when "
"the current XYM-as-XYZ hack in shape will be replaced by proper XYM."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:390
msgid ""
"`https://trac.osgeo.org/gdal/ticket/6063 "
"<https://trac.osgeo.org/gdal/ticket/6063>`__ "
"`https://trac.osgeo.org/gdal/ticket/6331 "
"<https://trac.osgeo.org/gdal/ticket/6331>`__"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:396
msgid "The implementation will be done by Ari Jolma."
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:398
msgid ""
"The proposed implementation will be in `https://github.com/ajolma/GDAL-"
"XYZM <https://github.com/ajolma/GDAL-XYZM>`__"
msgstr ""

#: ../../source/development/rfc/rfc61_support_for_measured_geometries.rst:404
msgid "+1 from Even, Tamas, Jukka and Daniel"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:5
msgid "RFC 62 : Raster algebra"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:13
msgid "Implementation in version:"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:18
msgid ""
"It is proposed that a set of functions or methods are written for raster "
"band objects to support \"raster algebra\", i.e., a set of operations, "
"which modify bands or compute values from bands. An example of a "
"modification is adding a value to all the cells of the band. An example "
"of a computation is the maximum cell value in the band. Operations may or"
" may not take arguments, in addition to the band itself, and if they "
"take, the argument may be a numeric value, a data structure, or another "
"band. Similarly, the computed value may be a simple numeric value, a data"
" structure, or another band."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:31
msgid ""
"Raster algebra is a well known branch of geospatial science and "
"technology and an often needed tool. Currently GDAL does not have "
"comprehensive support for raster algebra in core."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:36
msgid "Related work"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:38
msgid ""
"Python bindings: raster bands or parts of raster bands can be read into /"
" written from numpy array objects. Huge rasters can be iterated block by "
"block. numpy methods allow efficient implementation of many raster "
"algebra methods using python. There is some support for parallel "
"processing using numpy."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:44
msgid ""
"Perl bindings: raster bands or parts of raster bands can be read into / "
"written from PDL objects. Huge rasters can be iterated block by block. "
"PDL methods allow efficient implementation of many raster algebra methods"
" using perl. There is some support for parallel processing using PDL."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:50
msgid ""
"QGIS raster calculator: raster calculation string is parsed into an "
"expression tree and output band is computed row by row from the inputs. "
"All computations are done with double precision floating point numbers. "
"The calculation does not support parallel processing."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:55
msgid "PostGIS raster: raster algebra is supported by callback functions."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:57
msgid "There is existing research, which may be exploited:"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:59
msgid ""
"Parallel Priority-Flood depression filling for trillion cell digital "
"elevation models on desktops or clusters "
"`http://www.sciencedirect.com/science/article/pii/S0098300416301704 "
"<http://www.sciencedirect.com/science/article/pii/S0098300416301704>`__"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:63
msgid ""
"Parallel Non-divergent Flow Accumulation For Trillion Cell Digital "
"Elevation Models On Desktops Or Clusters "
"`https://arxiv.org/abs/1608.04431 <https://arxiv.org/abs/1608.04431>`__"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:68
msgid "Requirements (Goals)"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:70
msgid ""
"The implementation should be data type aware. This may mean code written "
"with templates."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:73
msgid "The implementation should be parallel processing friendly."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:75
msgid ""
"The implementation should allow a relatively easy to use C++ / C API. "
"This may mean interface, which does not use templates."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:78
msgid ""
"The implementation should allow arbitrary functions on cell values. I.e.,"
" be extensible by the user."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:81
msgid ""
"The implementation should allow focal methods. I.e., methods, where the "
"value of a cell depends on its neighborhood."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:87
msgid ""
"The implementation does not need to be tightly integrated with the core. "
"This means an \"add-on\" type solution is ok."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:90
msgid ""
"GDAL design sets some constraints/requirements to raster algebra "
"implementation: 1) the access to data is based on blocks, 2) GDAL "
"supports several datatypes, even complex values, 3) there is no immediate"
" support for the not-simple data structures needed by some methods (by "
"\"method\" I refer to functions of raster algebra in this text), 4) data "
"can be read from a band in parallel but writing needs to be exclusive."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:104
msgid "Drivers are not affected."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:109
msgid "The functionality will be added to the bindings."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:114
msgid ""
"Existing utilities are not affected but new utilities may be written "
"taking advantage of the new functionality."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:120
#: ../../source/development/rfc/rfc62_raster_algebra.rst:125
msgid "Must be written."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:136
msgid ""
"A proposed implementation is developed at "
"`https://github.com/ajolma/raster_algebra "
"<https://github.com/ajolma/raster_algebra>`__"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:139
msgid ""
"This code attempts to solve the problem as follows. (The source is in "
"transition from an old approach, which was based on operators as methods,"
" while the new approach is based on operator classes)"
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:143
msgid ""
"Classes 'operand' and 'operator' are defined. An operand is an object, "
"which holds data and an operator is an object, which computes a result "
"(essentially an operand) from operands."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:147
msgid ""
"Raster algebra computation is a tree of operand and operator objects, "
"which is executed in a recursive fashion."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:150
msgid ""
"There are interface classes and templated concrete classes. The concrete "
"classes inherit from the interface classes."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:153
msgid ""
"Two operand classes are defined: a number and a band. There is a need for"
" other types of operands. For example a classifier would map integer "
"values or real number ranges into numbers. Code for such exists in the "
"source but it is not organized to reflect the new approach."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:158
msgid ""
"A central method is 'compute' in band class, which is basically the "
"effective block loop code presented in the documentation for "
"GDALRasterBand::ReadBlock."
msgstr ""

#: ../../source/development/rfc/rfc62_raster_algebra.rst:162
msgid ""
"Multiple data types are supported by template concrete class for bands "
"and by overloaded get_value method, which returns the value in required "
"data type."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:5
msgid "RFC 63 : Sparse datasets improvements"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:13
msgid "Version: 2.2"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:18
msgid ""
"This RFC covers an improvement to manage sparse datasets, that is to say "
"datasets that contain substantial empty regions."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:24
msgid ""
"There are use cases where one needs to read or generate a dataset that "
"covers a large spatial extent, but in which significant parts are not "
"covered by data. There is no way in the GDAL API to quickly know which "
"areas are covered or not by data, hence requiring to process all pixels, "
"which is rather inefficient. Whereas some formats like GeoTIFF, VRT or "
"GeoPackage can potentially give such an information without processing "
"pixels."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:32
msgid ""
"It is thus proposed to add a new method GetDataCoverageStatus() in the "
"GDALRasterBand class, that takes as input a window of interest and "
"returns whether it is made of data, empty blocks or a mix of them."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:36
msgid ""
"This method will be used by the GDALDatasetCopyWholeRaster() method (used"
" by CreateCopy() / gdal_translate) to avoid processing sparse regions "
"when the output driver instructs it to do so."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:43
msgid "In GDALRasterBand class, a new virtual method is added :"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:128
msgid ""
"This method has a dumb default implementation that returns "
"GDAL_DATA_COVERAGE_STATUS_UNIMPLEMENTED \\| "
"GDAL_DATA_COVERAGE_STATUS_DATA"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:132
msgid "The public API is made of :"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:173
msgid ""
"GDALRasterBand::GetDataCoverageStatus() does basic checks on the validity"
" of the window before calling IGetDataCoverageStatus()"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:179
msgid ""
"GDALDatasetCopyWholeRaster() and GDALRasterBandCopyWholeRaster() accepts "
"a SKIP_HOLES option that can be set to YES by the output driver to cause "
"GetDataCoverageStatus() to be called on each chunk of the source dataset "
"to determine if contains only holes or not."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:187
msgid ""
"This RFC upgrades the GeoTIFF and VRT drivers to implement the "
"IGetDataCoverageStatus() method."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:190
msgid ""
"The GeoTIFF driver has also receive a number of prior enhancements, "
"related to that topic, for example to accept the SPARSE_OK=YES creation "
"option in CreateCopy() mode (or the SPARSE_OK open option in update "
"mode)."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:195
msgid "Extract of the documentation of the driver:"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:238
msgid ""
"The Python bindings has a mapping of GDALGetDataCoverageStatus(). Other "
"bindings could be updated (need to figure out how to return both a status"
" flag and a percentage)"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:245
msgid "No direct changes in utilities."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:248
msgid "Results"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:250
msgid ""
"With this new capability, a VRT of size 200 000 x 200 000 pixels that "
"contains 2 regions of 20x20 pixels each can be gdal_translated as a "
"sparse tiled GeoTIFF in 2 seconds. The resulting GeoTIFF can be itself "
"translated into another sparse tiled GeoTIFF in the same time."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:256
msgid "Future work"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:258
msgid ""
"Future work using the new capability could be done in overview building "
"or warping. Other drivers could also benefit from that new capability: "
"GeoPackage, ERDAS Imagine, ..."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:265
msgid "The new method is documented."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:270
msgid ""
"Tests of the VRT and GeoTIFF drivers are enhanced to test their "
"IGetDataCoverageStatus() implementation."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:276
msgid "C++ ABI change. No functional incompatibility foreseen."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:281
msgid "The implementation will be done by Even Rouault."
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:283
msgid ""
"The proposed implementation is in "
"`https://github.com/rouault/gdal2/tree/sparse_datasets "
"<https://github.com/rouault/gdal2/tree/sparse_datasets>`__"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:286
msgid ""
"Changes can be seen with "
"`https://github.com/OSGeo/gdal/compare/trunk...rouault:sparse_datasets?expand=1"
" "
"<https://github.com/OSGeo/gdal/compare/trunk...rouault:sparse_datasets?expand=1>`__"
msgstr ""

#: ../../source/development/rfc/rfc63_sparse_datasets_improvements.rst:292
msgid "+1 from EvenR and DanielM"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:5
msgid "RFC 64: Triangle, Polyhedral surface and TIN"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:7
msgid "Authors: Avyav Kumar Singh, Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:9
msgid "Contact: avyavkumar at gmail dot com, even.rouault at spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:13
msgid "Implementation version: GDAL 2.2"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:18
msgid ""
"As of now, the :cpp:class:`OGRGeometry` class (the base class from which "
"all the subtypes are derived) is limited to OGRCompoundCurve, "
"OGRCircularString, OGRLinearRing, OGRMultiLineString, OGRMultiPoint, "
"OGRMultiPolygon, OGRMultiCurve, OGRSimpleCurve, OGRCurvePolygon and "
"OGRPolygon."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:24
msgid ""
"This RFC addresses the addition of the following new geometries in "
"OGRGeometry:"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:27
msgid ""
"Triangle - A subset of polygons, the fundamental difference is that it is"
" made of 3 nodes only (actually 4, with the last one being the repetition"
" of the first one) and ONLY ONE exterior boundary and NO interior "
"polygons."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:31
msgid "PolyhedralSurface - A 3D figure made exclusively of Polygons."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:32
msgid ""
"TriangulatedSurface - A subset of PolyhedralSurface; a 3D figure which "
"consists exclusively of Triangles."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:56
msgid ""
"Some prelimenary work had already been done prior to this proposal, such "
"as including the necessary WKB codes in <ogr_core.h>."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:59
msgid ""
"Additionally, the `SFCGAL <http://www.sfcgal.org/>`__ library is a new "
"optional dependency of GDAL (build support only done for Unix for now). "
"The minimum version tested to build is 1.2.2 (as found in Ubuntu 16.04). "
"As mentioned in its home page, \"SFCGAL is a C++ wrapper library around "
"CGAL with the aim of supporting ISO 19107:2013 and OGC Simple Features "
"Access 1.2 for 3D operations.\" It is mostly used as a potential geometry"
" backend by PostGIS. It has a C API, that is the one we use."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:67
msgid ""
"SFCGAL functions may be used by methods of OGRGeometry (currently "
"IsValid(), Distance(), ConvexHull(), Intersection(), Union(), "
"Difference(), SymDifference(), Crosses()), as soon as one of the geometry"
" operands is a Triangle, PolyhedralSurface or TIN."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:72
msgid ""
"Two new OGRGeometry methods are used to convert SFCGAL geometries <-> OGR"
" geometries."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:80
msgid ""
"Besides SFCGAL, GEOS methods are still used in some cases, but with the "
"following limitations - a Triangle is converted to a Polygon with one "
"exterior ring; Polyhedral Surfaces and Triangulated Surfaces are "
"converted to geometry collection of polygons. (each Triangle in a "
"Triangulated Surface is converted to a Polygon as described previously)"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:86
msgid "The API for the new geometries introduced includes -"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:88
msgid ""
"Overwriting existing methods for Polygon in the case of Triangle API. A "
"complete API is provided below -"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:129
msgid ""
"The PolyhedralSurface API is derived from OGRSurface. Internally, it uses"
" an OGRMultiPolygon to store all the Polygons comprising the Polyhedral "
"Surface. Most of the implementations of the methods just reference "
"corresponding OGRMultiPolygon methods with checks to ensure that "
"conditions are maintained."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:200
msgid ""
"The Triangulated Surface API is similar to Polyhedral Surface, and the "
"MultiPolygon class was tweaked slightly to include methods to run which "
"consisted of subgeometries of the form Triangle. (A MultiPolygon is "
"strictly a collection of Polygons). These methods are internal to "
"OGRMultiPolygon and cannot be accessed by a public user. For instance, "
"the ``OGRMultiPolygon::addGeometryDirectly`` method has a check that the "
"subgeometry added to it should be of the type POLYGON. Rather than mess "
"around with the existing function, a new function has been written which "
"does not implement this check -"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:247
msgid "The Triangulated Surface API is as follows -"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:281
msgid "The new geometry WKB values can be seen as below -"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:284
msgid "Geometry Type"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:284
msgid "2D"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:284
msgid "Z"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:284
msgid "M"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:284
msgid "ZM"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:286
msgid "PolyhedralSurface"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:286
msgid "0015"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:286
msgid "1015"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:286
msgid "2015"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:286
msgid "3015"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:287
msgid "TIN"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:287
msgid "0016"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:287
msgid "1016"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:287
msgid "2016"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:287
msgid "3016"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:288
msgid "Triangle"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:288
msgid "0017"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:288
msgid "1017"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:288
msgid "2017"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:288
msgid "3017"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:292
msgid "Geometry conversions"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:294
msgid ""
"The OGRGeometryFactory::forceTo() and forceToMultiPolygon() methods have "
"been enhanced to support conversions between the new geometry types, and "
"towards multipolygon. Note that converting a TIN or a PolyhedralSurface "
"into a MultiPolygon is semantically incorrect since a MultiPolygon is "
"suppose to contain geometries in the same plane, but it might help when "
"converting those new geometry types into a format that doesn't support "
"them (and such conversion was for example implicitly done in the reading "
"side of the shapefile driver previously)"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:307
msgid "PostGIS"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:309
msgid ""
"No changes done to the driver explicitly, but it has been ensured that PG"
" <-> OGR compatibility has been maintained. PostGIS 3D functions work on "
"OGR, simple scripts work, for example from ``autotest/ogr/ogr_pg.py``, we"
" have -"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:324
msgid "ShapeFile"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:326
msgid ""
"Shapefiles have the concept of a \"MultiPatch\" object. The MultiPatch "
"can be made of several parts, which are"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:329
msgid ""
"A TriangleStrip is a linked strip of triangles, where every vertex (after"
" the first two) completes a new triangle. A new triangle is always formed"
" by connecting the new vertex with its two immediate predecessors."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:333
msgid ""
"A TriangleFan is a linked fan of triangles, where every vertex (after the"
" first two) completes a new triangle. A new triangle is always formed by "
"connecting the new vertex with its immediate predecessor and the first "
"vertex of the part."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:337
msgid ""
"Rings (outer ring, inner ring, first ring, \"non-typed\" ring) Up to now "
"multipatch were read as MultiPolygon. Now, in general, a "
"GeometryCollection will be returned, with zero or several TIN "
"corresponding to the TriangleStrip/TriangleFan and zero or one "
"MultiPolygon with all the rings. If there's only one TIN or one "
"MultiPolygon, it will be returned as a top-level geometry. The layer type"
" will be Unknown On writing, the SHPT layer creation option is extended "
"to recognize the MULTIPATCH value, and the current logic to guess the "
"shape type from the layer geometry type or the geometry type of the first"
" feature is extended to support MULTIPATCH. On a MULTIPATCH layer, "
"geometries of type TIN, POLYHEDRALSURFACE, MULTIPOLYGON or "
"GEOMETRYCOLLECTION (whose subgeometries are on of the 3 previous types) "
"are accepted and converted to a MultiPatch object, trying to use "
"TriangleStrip and TriangleFan if the triangles are in the expected order."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:354
msgid "FileGDB, OpenFileGDB"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:356
msgid ""
"The FileGDB format support the MultiPatch object as well, with one "
"extension. There is a new type of part, which is made of several "
"triangles whose organization is not TriangleStrip or TriangleFan. Both "
"drivers have been upgraded to work like the ShapeFile driver on the "
"reading side. On the writing side, the FileGDB driver will automatically "
"write a MultiPatch if the layer geometry type is TIN or "
"PolyhedralSurface. The layer option that existed before "
"CREATE_MULTIPATCH=YES can still be used to force writing as MultiPatch"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:366
msgid "GML"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:368
msgid ""
"The GML driver has been modified for both input and output -> Triangle, "
"PolyhedralSurface and TriangulatedSurface are capable of being "
"read/written from/to a GML document. Sample examples include -"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:417
msgid ""
"Note that on the writing side those geometries are only generated for a "
"GML 3 output."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:421
msgid "DXF"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:423
msgid ""
"The changes in the DXF driver include converting a PolyFaceMesh (a "
"subtype of PolyLine) to PolyhedralSurface. This is illustrated by a bug "
"on the GDAL trac - `https://trac.osgeo.org/gdal/ticket/6246 "
"<https://trac.osgeo.org/gdal/ticket/6246>`__. A PolyFace Mesh consists of"
" points defined initially using specific codes, then these points are "
"described as part of a polygon (a polygon can have four points at the "
"maximum). Reading the PolyFace Mesh is supported in OGR as of now, but "
"write support for it as well (though not implemented by me in this "
"changeset) should be possible as well now."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:436
msgid ""
"The GeoPackage specification supports [Multi]Point, [Multi]LineString, "
"[Multi]Polygon and GeometryCollection in its core. Curve geometry types "
"are mentioned as a registered extension. But Triangle, PolyhedralSurface "
"or TIN are not mentioned at all. However the GeoPackage geometry blob "
"format being based on ISO WKB, support for the new geometry types did not"
" really require new code. Hence we have kepts this possibility of "
"reading/writing the 3 new geometry types, but with a warning emitted that"
" a non-standard extension will be used on the writing side."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:447
msgid "Other drivers"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:449
msgid ""
"The CSV, VRT, PGDump, SQLite (but not Spatialite) drivers support the new"
" geometry types. A couple of drivers have been modified, so as not to "
"crash on the writing side when being provided with the new geometry "
"types. Besides the previously mentioned drivers, the following drivers "
"have been verified to not crash (but potentially error out, or skip "
"unrecognized geometries): MySQL, OCI, KML, LIBKML, GeoJSON, MapInfo"
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:459
msgid "Using standard Doxygen documentation procedure."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:464
msgid ""
"Many applications will not be able to properly deal with the new geometry"
" types that may now be returned by some drivers. In GDAL 2.1, the new "
"types were introduced mentioning that they might be returned by GDAL in "
"the future. Code should either skip the new geometries, deal with them "
"properly or use the OGR_G_ForceTo() function to convert to a geometry "
"type it supports."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:474
msgid ""
"Very few changes have been made so that the existing autotest suite still"
" passes. New geometry classes and conversion methods has been added to "
"ogr_geom.py and ogr_gml_geom.py. Updated drivers have received new tests "
"also."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:482
msgid ""
"Done by Avyav Kumar Singh, under the Google Summer of Code 2016 program, "
"and fine tuned / extended / integrated by Even Rouault."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:485
msgid ""
"The proposed implementation lies in the \"gsoc-triangle-ps-tin-rebased\" "
"branch of the `https://github.com/rouault/gdal2/tree/gsoc-triangle-ps-"
"tin-rebased <https://github.com/rouault/gdal2/tree/gsoc-triangle-ps-tin-"
"rebased>`__ repository."
msgstr ""

#: ../../source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst:493
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:203
msgid "+1 from JukkaR, DanielM, HowardB and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:5
msgid "RFC 65: RFC 7946 GeoJSON"
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:13
#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:13
msgid "Implementation version: 2.2"
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:18
msgid ""
"GeoJSON has been standardized by the IETF: `RFC 7946 "
"<https://tools.ietf.org/html/rfc7946>`__. Updates to the OGR GeoJSON "
"driver are needed so that it may write RFC 7946 GeoJSON."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:25
msgid ""
"The RFC 7946 standard is backwards compatible with the legacy definition "
"of GeoJSON, but has a few differences (see "
"`https://tools.ietf.org/html/rfc7946#appendix-B "
"<https://tools.ietf.org/html/rfc7946#appendix-B>`__). For OGR, the most "
"significant are: removal of \"crs\" (CRS84 only), counter-clockwise "
"winding of polygons, geometry splitting at the antimeridian, and "
"representation of bounding boxes at the antimeridian and poles. Note: RFC"
" 7946 explicitly restricts to 2D and 3D coordinates, and forbid use of "
"the M dimension for example. This was already the case in the existing "
"driver for the GeoJSON 2008 output."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:35
msgid ""
"Consensus on the gdal-dev list is that developers should be able to "
"require RFC 7946 GeoJSON by configuring layer creation with an option and"
" that it be an all-or-nothing switch."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:42
msgid ""
"A layer creation option will be added for the GeoJSON driver, e.g., "
"``RFC7946=TRUE``. When \"on\", OGR will write GeoJSON with CRS84 "
"coordinates (reprojecting as needed) with 7 places of precision by "
"default, polygons wound properly, and geometries split at the "
"antimeridian."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:48
msgid ""
"Related to that work, the OGRGeometryFactory::transformWithOptions() "
"method has been improved to better deal with reprojection of geometries "
"from polar projections, and projections that span the antimeridian, to "
"EPSG:4326"
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:66
msgid "Utilities will implement RFC 7946 by using the layer creation option."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:71
msgid "Documentation of the new layer creation option will reference RFC 7946."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:76
msgid "The ogr_geojson.py file tests the effect of the new option."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:81
msgid ""
"As this is a opt-in parameter, no backward compatibility issue. GeoJSON "
"files conformant to RFC 7646 can be read by previous GDAL/OGR versions."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:87
msgid "#6705"
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:92
msgid "Implementation has been done by Even Rouault and sponsored by Mapbox."
msgstr ""

#: ../../source/development/rfc/rfc65_rfc7946_geojson.rst:97
msgid "+1 from JukkaR, HowardB, DanielM and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:5
msgid "RFC 66 : OGR random layer read/write capabilities"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:11
msgid "Status: Implemented"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:13
msgid "Implementing version: 2.2"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:18
msgid ""
"This RFC introduces a new API to be able to iterate over vector features "
"at dataset level, in addition to the existing capability of doing it at "
"the layer level. The existing capability of writing features in layers in"
" random order, that is supported by most drivers with output "
"capabilities, is formalized with a new dataset capability flag."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:27
msgid ""
"Some vector formats mix features that belong to different layers in an "
"interleaved way, which make the current feature iteration per layer "
"rather inefficient (this requires for each layer to read the whole file)."
" One example of such drivers is the OSM driver. For this driver, a hack "
"had been developed in the past to be able to use the "
"OGRLayer::GetNextFeature() method, but with a really particular "
"semantics. See \"Interleaved reading\" paragraph of :ref:`vector.osm` for"
" more details. A similar need arises with the development of a new "
"driver, GMLAS (for GML Application Schemas), that reads GML files with "
"arbitrary element nesting, and thus can return them in a apparent random "
"order, because it works in a streaming way. For example, let's consider "
"the following simplified XML content :"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:50
msgid ""
"The driver will be first able to complete the building of feature B "
"before emitting feature A. So when reading sequences of this pattern, the"
" driver will emit features in the order B,A,B,A,..."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:60
msgid "Two new methods are added at the GDALDataset level :"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:62
msgid "GetNextFeature():"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:115
msgid "and ResetReading():"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:134
msgid "New capabilities"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:136
msgid "The following 2 new dataset capabilities are added :"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:146
msgid "The above 2 new methods are available in the C API with :"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:159
msgid "Discussion about a few design choices of the new API"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:161
msgid ""
"Compared to OGRLayer::GetNextFeature(), GDALDataset::GetNextFeature() has"
" a few differences :"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:164
msgid ""
"it returns the layer which the feature belongs to. Indeed, there's no "
"easy way from a feature to know which layer it belongs too (since in the "
"data model, features can exist outside of any layer). One possibility "
"would be to correlate the OGRFeatureDefn\\* object of the feature with "
"the one of the layer, but that is a bit inconvenient to do (and "
"theoretically, one could imagine several layers sharing the same feature "
"definition object, although this probably never happen in any in-tree "
"driver)."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:172
msgid ""
"even if the feature returned is not NULL, the returned layer might be "
"NULL. This is just a provision for now, since that cannot currently "
"happen. This could be interesting to address schema-less datasources "
"where basically each feature could have a different schema (GeoJSON for "
"example) without really belonging to a clearly identified layer."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:177
msgid ""
"it returns a progress percentage. When using OGRLayer API, one has to "
"count the number of features returned with the total number returned by "
"GetFeatureCount(). For the use cases we want to address knowing quickly "
"the total number of features of the dataset is not doable. But knowing "
"the position of the file pointer regarding the total size of the size is "
"easy. Hence the decision to make GetNextFeature() return the progress "
"percentage. Regarding the choice of the range [0,1], this is to be "
"consistent with the range accepted by GDAL progress functions."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:186
#, python-format
msgid ""
"it accepts a progress and cancellation callback. One could wonder why "
"this is needed given that GetNextFeature() is an \"elementary\" method "
"and that it can already returns the progress percentage. However, in some"
" circumstances, it might take a rather long time to complete a "
"GetNextFeature() call. For example in the case of the OSM driver, as an "
"optimization you can ask the driver to return features of a subset of "
"layers. For example all layers except nodes. But generally the nodes are "
"at the beginning of the file, so before you get the first feature, you "
"have typically to process 70% of the whole file. In the GMLAS driver, the"
" first GetNextFeature() call is also the opportunity to do a preliminary "
"quick scan of the file to determine the SRS of geometry columns, hence "
"having progress feedback is welcome."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:199
msgid ""
"The progress percentage output is redundant with the progress callback "
"mechanism, and the latter could be used to get the former, however it may"
" be a bit convoluted. It would require doing things like:"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:216
msgid ""
"GDALDatasetGetNextFeature is mapped as gdal::Dataset::GetNextFeature() "
"and GDALDatasetResetReading as gdal::Dataset::ResetReading()."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:219
msgid ""
"Regarding gdal::Dataset::GetNextFeature(), currently only Python has been"
" modified to return both the feature and its belonging layer. Other "
"bindings just return the feature for now (would need specialized "
"typemaps)"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:227
msgid "The OSM and GMLAS driver are updated to implement the new API."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:229
msgid ""
"Existing drivers that support ODsCRandomLayerWrite are updated to "
"advertise it (that is most drivers that have layer creation capabilities,"
" with the exceptions of KML, JML and GeoJSON)."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:236
msgid ""
"ogr2ogr / GDALVectorTranslate() is changed internally to remove the hack "
"that was used for the OSM driver to use the new API, when "
"ODsCRandomLayerRead is advertized. It checks if the output driver "
"advertizes ODsCRandomLayerWrite, and if it does not, emit a warning, but "
"still goes on proceeding with the conversion using random layer "
"reading/writing."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:243
msgid ""
"ogrinfo is extended to accept a -rl (for random layer) flag that "
"instructs it to use the GDALDataset::GetNextFeature() API. It was "
"considered to use it automatically when ODsCRandomLayerRead was "
"advertized, but the output can be quite... random and thus not very "
"practical for the user."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:257
msgid ""
"The specialized GetNextFeature() implementation of the OSM and GMLAS "
"driver is tested in their respective tests. The default implementation of"
" GDALDataset::GetNextFeature() is tested in the MEM driver tests."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:264
msgid "None for existing users of the C/C++ API."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:266
msgid ""
"Since there is a default implementation, the new functions/methods can be"
" safely used on drivers that don't have a specialized implementation."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:269
msgid ""
"The addition of the new virtual methods GDALDataset::ResetReading() and "
"GDALDataset::GetNextFeature() may cause issues for out-of-tree drivers "
"that would already use internally such method names, but with different "
"semantics, or signatures. We have encountered such issues with a few in-"
"tree drivers, and fixed them."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:278
msgid ""
"The implementation will be done by Even Rouault, and is mostly triggered "
"by the needs of the new GMLAS driver (initial development funded by the "
"European Earth observation programme Copernicus)."
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:282
msgid ""
"The proposed implementation is in "
"`https://github.com/rouault/gdal2/tree/gmlas_randomreadwrite "
"<https://github.com/rouault/gdal2/tree/gmlas_randomreadwrite>`__ (commit:"
" "
"`https://github.com/rouault/gdal2/commit/8447606d68b9fac571aa4d381181ecfffed6d72c"
" "
"<https://github.com/rouault/gdal2/commit/8447606d68b9fac571aa4d381181ecfffed6d72c>`__)"
msgstr ""

#: ../../source/development/rfc/rfc66_randomlayerreadwrite.rst:290
msgid "+1 from TamasS, HowardB, JukkaR, DanielM and EvenR."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:5
msgid "RFC 67 : Null values in OGR"
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:18
msgid ""
"This RFC implement the concept of null value for the field of a feature, "
"in addition to the existing unset status."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:24
msgid ""
"Currently, OGR supports one single concept to indicate that a field value"
" is missing : the concept of unset field."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:27
msgid ""
"So assuming a JSon feature collection with 2 features would properties "
"would be { \"foo\": \"bar\" } and { \"foo\": \"bar\", \"other_field\": "
"null }, OGR currently returns that the other_field is unset in both "
"cases."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:31
msgid ""
"What is proposed here is that in the first case where the \"other_field\""
" keyword is totally absent, we use the current unset field concept. And "
"for the other case, we add a new concept of null field."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:35
msgid ""
"This distinction between both concepts apply to all GeoJSON based formats"
" and protocols, so GeoJSON, ElasticSearch, MongoDB, CouchDB, Cloudant."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:39
msgid ""
"This also applies for GML where the semantics of a missing element would "
"be mapped to unset field and an element with a xsi:nil=\"true\" attribute"
" would be mapped to a null field."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:47
msgid "OGRField"
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:49
msgid ""
"The Set structure in the \"raw field\" union is modified to add a third "
"marker"
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:60
msgid ""
"This is not strictly related to this work but the 3rd marker decreases "
"the likelihood of a genuine value to be misinterpreted as unset / null. "
"This does not increase the size of the structure that is already at least"
" 12 bytes large."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:65
msgid ""
"The current special value of OGRUnsetMarker = -21121 will be set in the 3"
" markers for unset field (currently set to the first 2 markers)."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:68
msgid ""
"Similarly for the new Null state, the new value OGRNullMarker = -21122 "
"will be set to the 3 markers."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:74
msgid ""
"The methods int IsFieldNull( int nFieldIdx ) and void SetNullField ( int "
"nFieldIdx ) are added."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:77
msgid ""
"The accessors GetFieldXXXX() are modified to take into account the null "
"case, in the same way as if they are called on a unset field, so "
"returning 0 for numeric field types, empty string for string fields, "
"FALSE for date time fields and NULL for list-based types."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:82
msgid ""
"A convenience method OGRFeature::IsFieldSetAndNotNull() is added to ease "
"the porting of existing code that used previously IsFieldSet() and "
"doesn't need to distinguish between the unset and null states."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:99
msgid ""
"Lower-level functions will be added to manipulate directly the raw field "
"union (for use mostly in core and a few drivers), instead of directly "
"testing/ setting the markers :"
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:113
msgid "The new methods will mapped to SWIG."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:118
msgid ""
"The following drivers will be modified to take into account the unset and"
" NULL state as distinct states: GeoJSON, ElasticSearch, MongoDB, CouchDB,"
" Cloudant, GML, GMLAS, WFS."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:122
msgid ""
"Note: regarding the GMLAS driver, the previous behavior to have both xxxx"
" and xxxx_nil fields when xxxx is an optional nillable XML elements is "
"preserved by default (can be changed through a configuration setting in "
"the gmlasconf.xml file). The rationale is that the GMLAS driver is mostly"
" used to convert to SQL capable formats that cannot distinguish between "
"the unset and null states, hence the need for the 2 dedicated fields."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:130
msgid ""
"The CSV driver will be modified so that when EMPTY_STRING_AS_NULL open "
"option is specified, the new Null state is used."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:133
msgid ""
"All drivers that in their writing part test if the source feature has a "
"field unset will also test if the field is null."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:136
msgid ""
"For SQL based drivers (PG, PGDump, Carto, MySQL, OCI, SQLite, GPKG), on "
"reading a SQL NULL value will be mapped to the new Null state. On "
"writing, a unset field will not be mentioned in the corresponding INSERT "
"or UPDATE statement. Whereas a Null field will be mentioned and set to "
"NULL. On insertion, there will generally be no difference of behavior, "
"unless a default value is defined on the field, in which case it will be "
"used by the database engine to set the value in the unset case. On "
"update, a unset field will not see its content updated by the database, "
"where as a field set to NULL will be updated to NULL."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:149
msgid ""
"No direct changes, but as the OGRFeature::DumpReadable() method is "
"modified so that unset fields of features are no longer displayed, the "
"output of ogrinfo will be affected."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:161
msgid "Core changes and updated drivers will be tested."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:166
msgid ""
"All code, in GDAL source code, and in calling external code, that "
"currently uses OGRFeature::IsFieldSet() / OGR_F_IsFieldSet() should also "
"be updated to used IsFieldNull() / OGR_F_IsFieldNull(), either to act "
"exactly as in the unset case, or add a new appropriate behavior. A "
"convenience method and function OGRFeature::IsFieldSetAndNotNull() / "
"OGR_F_IsFieldSetAndNotNull() is added to ease the porting of existing "
"code."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:174
msgid ""
"Failure to do so, the existing code will see 0 for numeric field types, "
"empty string for string fields, FALSE for date time fields and NULL for "
"list-based types."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:178
msgid ""
"On the write side, for the GeoJSON driver, in GDAL 2.1 or before, a unset"
" field was written as field_name: null. Starting with GDAL 2.2, only "
"fields explicitly set as null with OGR_F_SetFieldNull() will be written "
"with a null value. Unset fields of a feature will not be present in the "
"corresponding JSon feature element."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:184
msgid "MIGRATION_GUIDE.TXT is updated to discuss those compatibility issues."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:194
msgid ""
"The implementation will be done by Even Rouault (Spatialys) and be "
"sponsored by Safe Software."
msgstr ""

#: ../../source/development/rfc/rfc67_nullfieldvalues.rst:197
msgid ""
"The proposed implementation is available in "
"`https://github.com/rouault/gdal2/tree/rfc67 "
"<https://github.com/rouault/gdal2/tree/rfc67>`__"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:5
msgid "RFC 68: C++11 Compilation Mode"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:8
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:11
#: ../../source/development/rfc/rfc70_output_format_guess.rst:8
#: ../../source/development/rfc/rfc71_github_migration.rst:8
#: ../../source/development/rfc/rfc72_pytest.rst:8
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:8
#: ../../source/development/rfc/rfc74_sphinx.rst:8
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:8
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:8
msgid "Author:"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:8
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:11
msgid "Kurt Schwehr"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:9
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:12
#: ../../source/development/rfc/rfc70_output_format_guess.rst:9
#: ../../source/development/rfc/rfc71_github_migration.rst:9
#: ../../source/development/rfc/rfc72_pytest.rst:9
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:9
#: ../../source/development/rfc/rfc74_sphinx.rst:10
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:9
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:9
msgid "Contact:"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:9
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:12
msgid "schwehr@google.com / schwehr@gmail.com"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:10
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:13
#: ../../source/development/rfc/rfc70_output_format_guess.rst:10
#: ../../source/development/rfc/rfc71_github_migration.rst:10
#: ../../source/development/rfc/rfc72_pytest.rst:10
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:10
#: ../../source/development/rfc/rfc74_sphinx.rst:11
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:10
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:10
msgid "Started:"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:10
msgid "2017-Apr-11"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:11
msgid "Passed:"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:11
msgid "2017-Sep-11"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:12
#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:14
#: ../../source/development/rfc/rfc70_output_format_guess.rst:11
#: ../../source/development/rfc/rfc71_github_migration.rst:11
#: ../../source/development/rfc/rfc72_pytest.rst:11
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:12
#: ../../source/development/rfc/rfc74_sphinx.rst:12
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:12
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:12
msgid "Status:"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:12
msgid "Adopted, implemented in GDAL 2.3"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:15
msgid ""
"This RFC is based on `GEOS RFC 5 "
"<http://trac.osgeo.org/geos/wiki/RFC5>`__ by Mateusz Łoskot."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:21
msgid ""
"The document proposes to switch to `C++11 "
"<http://en.wikipedia.org/wiki/C%2B%2B11>`__ compilation mode as default "
"throughout the whole C++ source code of GDAL."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:25
msgid ""
"The goal of the document is to request and achieve agreement on using "
"C++11 as the minimum required version of the C++ programming language "
"standard."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:32
msgid ""
"C++11 is the first major update of the C++ standard since 1998. (`C++03 "
"<https://en.wikipedia.org/wiki/C%2B%2B03>`__ was a bug fix release.)"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:36
msgid ""
"Having fewer versions of C++ to support will reduce the load on "
"developers and testing systems."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:39
msgid ""
"C++11 features aim to promote writing clean, compact, type-safe and fast "
"code. It also delivers better feature-wise compatibility with the C "
"language (C99)."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:43
msgid ""
"The Wikipedia article at `http://en.wikipedia.org/wiki/C++11 "
"<http://en.wikipedia.org/wiki/C++11>`__ does a great job describing all "
"changes in C++11 extensively."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:47
msgid ""
"The ``std::auto_ptr`` smart pointer, together with a bunch of other "
"features, were deprecated and will be removed from C++17. Features like "
"``std::unique_ptr`` provide much stronger replacements."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:51
msgid ""
"Enabling C++11 compilation mode will improve the programming environment "
"making it much friendlier than C++98."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:54
msgid ""
"A social factor: since (many) C++ programmers no longer enjoy C++98, "
"allowing C++11 mode may increase potential for new contributions."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:58
msgid "Compilers Landscape"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:60
msgid ""
"Summary of compilers supported by GDAL with their minimal versions "
"required to compile source code based on"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:63
msgid ""
"`http://en.cppreference.com/w/cpp/compiler_support "
"<http://en.cppreference.com/w/cpp/compiler_support>`__ C++11 features."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:67
msgid "C++11"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:70
#: ../../source/development/rfc/rfc68_cplusplus11.rst:82
msgid "GCC"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:70
msgid "4.8.1+"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:70
msgid "`C++11 status <https://gcc.gnu.org/projects/cxx-status.html#cxx11>`__"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:70
msgid ""
"Debian 8 (stable), Ubuntu 15.04+, Ubuntu 14.04 ``ppa:ubuntu-"
"toolchain-r/test``, Fedora 19+, RHEL7"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:72
#: ../../source/development/rfc/rfc68_cplusplus11.rst:84
msgid "Clang"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:72
msgid "3.3+"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:72
msgid "`C++11 status <https://clang.llvm.org/cxx_status.html#cxx11>`__"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:72
msgid "Debian 8 (stable), Ubuntu 14.04+, Fedora 19+, CentOS 6(?)"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:73
#: ../../source/development/rfc/rfc68_cplusplus11.rst:85
msgid "MSVC"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:73
#: ../../source/development/rfc/rfc68_cplusplus11.rst:85
msgid "14.0+ (2015)"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:73
msgid "`C++11 status <https://msdn.microsoft.com/en-us/library/hh567368.aspx>`__"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:73
msgid "n/a"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:77
#: ../../source/development/rfc/rfc68_cplusplus11.rst:140
msgid "C++14"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:79
msgid "The C++14 compilers are listed for comparison only:"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:82
msgid "4.9+"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:84
msgid "3.4+"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:89
msgid "Plan"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:91
msgid ""
"This proposal only requests agreement for the C++11 compilation mode "
"switch in the current ``trunk`` branch only."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:94
msgid ""
"This proposal does not suggest any detailed roadmap of large refactoring "
"of the GDAL C++ codebase."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:97
msgid ""
"The GDAL codebase is > 1.3M LOC and given the available man-power to LOCs"
" ratio, such one-step refactoring would not be feasible."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:100
msgid ""
"Instead, the task will be tackled with the baby step approach gradually "
"transforming the codebase according to priorities set along the way. Any "
"disruptive refactoring, changes in interfaces of C++ classes, breaking "
"changes in C++ API must be announced and discussed on the mailing list or"
" the bug tracker."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:106
msgid ""
"*IMPORTANT*: C++11 refactoring must not change the C API or break C API "
"compatibility, unless agreed upon based on prior RFC proposed."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:109
msgid ""
"However, if the proposal is accepted, any new C++ code written for GDAL "
"must be C++11-compliant."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:112
msgid ""
"Prior acceptance of this proposal is necessary in order to start any "
"source code refactoring using C++11 features."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:115
msgid ""
"Once accepted, first step will be to update the build configurations to "
"require C++11-compliant compiler."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:121
msgid ""
"This section outlines issues potentially caused by upgrade to C++11 "
"language."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:124
msgid ""
"C++11 destructors, by default, have now the new exception specification "
"of ``nothrow(true)``. Destructors of GDAL classes should be reviewed and "
"any that are allowed/expected to throw exceptions must be marked with "
"``nothrow(false)``. Otherwise, any user of the existing GDAL codebase "
"would find the program terminating whenever GDAL destructor throws an "
"exception. Such review would be beneficial anyway."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:133
msgid "Release"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:135
msgid "First release of GDAL with C++11 compiler requirement could be 2.3.0."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:142
msgid "This section clarifies status of C++14 support in GDAL."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:144
msgid ""
"Once C++11 is adopted as default compilation mode, GDAL developers and "
"maintainers must ensure it also successfully compiles in C++14 and C++17 "
"modes."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:148
msgid ""
"Are contributors allowed to add ``ifdef``'s for C++14 and C++17? No. Not "
"at this time."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:151
msgid ""
"Is there a plan to upgrade to C++14 or C++17 to allow use of the C++ "
"latest features? No, there is no plan. It is, however, recognized, such "
"motion may be put to the vote around 2020."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:158
msgid ""
"`http://en.cppreference.com/w/cpp/compiler_support "
"<http://en.cppreference.com/w/cpp/compiler_support>`__ C++ compiler "
"support"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:169
msgid ""
"GDAL has been working well with C++11 builds for a number of years now, "
"so there should be no externally visible changes for the initial removal "
"of C++03 support."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:176
msgid ""
"Change configure.ac to remove ``with_cpp11`` flag, always use C++11, and "
"fail if ``AX_CXX_COMPILE_STDCXX_11`` does not find C++11"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:178
msgid "Remove @CXX11_SUPPORT@ in GDALmake.opt.in and anywhere else it occurs"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:179
msgid ""
"Remove continuous build targets that do not support C++11 from Travis-CI "
"and AppVeyor"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:181
msgid "Remove #if HAVE_CXX11 and leave only the C++11 code"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:183
msgid "``find . -name \\*.h -o -name \\*.cpp | xargs egrep 'HAVE_CXX11'``"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:185
msgid "CPL_STATIC_ASSERT -> ``static_assert``"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:186
msgid "``NULL`` -> ``nullptr`` (Only for C++ code)"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:187
msgid "CPL_OVERRIDE -> override and remove redundant virtual"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:188
msgid "-MAX or -max() -> ``std::numeric_limits<T>::lowest()``"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:193
msgid ""
"The switch does not impact the ``C`` API used by the SWIG bindings. "
"However, there may be some code that can be removed."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:199
msgid ""
"There are many C++11 features not address in this RFC. See "
"`https://en.wikipedia.org/wiki/C%2B%2B11 "
"<https://en.wikipedia.org/wiki/C%2B%2B11>`__"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:202
msgid "attributes"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:203
msgid "``auto``"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:204
msgid "``consexpr``"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:205
msgid "``cstdint``"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:206
msgid "``delete`` and ``default`` for member functions"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:207
msgid "enum classes"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:208
msgid "initializer lists and ``std::initializer_list``"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:209
msgid "lambda"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:210
msgid "range based for loops"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:211
msgid "std::regex"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:212
msgid "rvalue references"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:213
msgid "smart pointers ``std::unique_ptr`` and ``std::shared_ptr``"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:214
msgid ""
"New string literals: u8\"An UTF-8 string\", u\"An UTF-16 str\", U\"An "
"UTF-32 str\", R\"xml(raw content)xml\""
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:216
msgid "``std::thread``, ``thread_local`` and related"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:217
msgid "tuples"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:218
msgid "And more..."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:223
msgid "Any code using the C++ API must use C++11 or newer."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:225
msgid "The C API should not be impacted."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:227
msgid "GDAL 2.2.x and older will continue to have C++03 support."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:232
msgid "The existing autotest suite should continue to pass."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:237
msgid ""
"Although the above describes changes should have very few impact on "
"existing applications of the C API, some behavior changes, C++ level "
"changes and the conceptual changes are thought to deserve a 2.3 version "
"number."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:245
msgid ""
"Implementation will be done by Kurt Schwehr. Others are welcome to pitch "
"in."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:251
msgid "Related RFCs:"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:253
msgid ""
"`GEOS RFC 5: C++11 Compilation Mode "
"<http://trac.osgeo.org/geos/wiki/RFC5>`__: GEOS is switching to requiring"
" C++11 to build."
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:256
msgid ""
"`Move OTB to C++14 <https://wiki.orfeo-"
"toolbox.org/index.php/Request_for_Comments-36:_Move_OTB_to_C%2B%2B14>`__"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:262
msgid ""
"`https://lists.osgeo.org/pipermail/gdal-dev/2017-September/047139.html "
"<https://lists.osgeo.org/pipermail/gdal-"
"dev/2017-September/047139.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:264
msgid "EvenR +1"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:265
msgid "JukkaR +1"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:266
msgid "DanielM +0"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:267
msgid "HowardB +1"
msgstr ""

#: ../../source/development/rfc/rfc68_cplusplus11.rst:268
msgid "KurtS +1"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:5
msgid "RFC 69: C/C++ Code Formatting"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:7
msgid ""
"This document proposes and describes desired code formatting style used "
"across C and C++ source code in GDAL."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:13
msgid "2017-May-04"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:14
msgid "*Work-In-Progress*"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:17
msgid ""
"This RFC is based on `GEOS RFC 4 "
"<https://trac.osgeo.org/geos/wiki/RFC4>`__ by Mateusz Łoskot."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:20
msgid "**TODO:** Give examples of formatting."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:25
msgid ""
"The document proposes and describes desired default code formatting style"
" guidelines for GDAL programming in C and C++ languages."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:28
msgid ""
"The goal of this document is to initiate process to reach an agreement "
"for the default code formatting style."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:34
msgid ""
"There is a need to decide on format of GDAL source code and apply such "
"globally consistent format to GDAL C/C++ codebase."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:37
msgid ""
"A uniform, codebase-wide formatting style makes reading and comprehending"
" existing code easier, writing code focused on important aspects of new "
"developments and more pleasant, removes burden during a patch or pull "
"request code reviews and prevents `bikeshedding religious arguments "
"<http://wiki.c2.com/?WhereDoTheBracesGo>`__. Even in small projects, "
"contributing developers discover the problems of working without an "
"agreed upon code format."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:45
msgid ""
"The utility of such guidelines has been proven by many open source "
"software projects."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:48
msgid ""
"The scope of the proposal is specifically limited to formatting style "
"guidelines. It is not an intention to develop a general coding guide "
"covering other aspects of writing software like naming, etc."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:53
#: ../../source/development/rfc/rfc72_pytest.rst:55
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:90
#: ../../source/development/rfc/rfc74_sphinx.rst:51
msgid "Proposal"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:55
msgid ""
"It is important to make effortless for developers to produce properly "
"formatted code."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:58
msgid ""
"The proposal suggests to use `clang-format "
"<https://clang.llvm.org/docs/ClangFormat.html>`__ version 3.8 or higher "
"to define C++ code formatting rules for GDAL code."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:62
msgid ""
"The ``clang-format`` is a tool to automatically format C/C++ code, so "
"that developers don't need to worry about style issues. Unlike other "
"tools which use own parsers, ``clang-format`` uses the Clang tokenizer "
"and supports the same C++ source code as the Clang compiler. This "
"guarantees correct output is produced and offers unique features (eg. "
"wrapping long lines whether of code, strings, arrays - something which "
"AStyle has no way of doing)."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:70
msgid ""
"The style settings can be defined in a ``.clang-format`` configuration "
"file, however to make it as easy as possible, we will use the default "
"style (LLVM style?)."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:74
msgid ""
"The ``clang-format`` is straightforward to run and can support "
"development workflow as standalone tool or as one of many editor "
"integrations or other bespoke utilities (eg. ``git cl format`` "
"[Chromium])."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:79
msgid ""
"No automation of code reformatting is proposed. It would be treating the "
"symptoms, no cause: developers not following the code formatting "
"standard."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:83
msgid ""
"Although no means to enforce the default formatting style are proposed, "
"currently used CI services (eg. Travis CI) may be employed as a post-"
"commit safety valve - a clang-format lint failure as a compile break "
"(e.g. `clang_format.py "
"<https://github.com/mongodb/mongo/blob/master/buildscripts/clang_format.py>`__"
" build script used by MongoDB). Alternatively, a gatekeeper may be "
"installed in SVN/Git, rejecting commits with code not conforming to the "
"code formatting style."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:93
msgid "Code Formatting Rules"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:95
msgid "What code formatting rules to use?"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:97
msgid ""
"*\"A mature engineers know that a standard is more important than which "
"standard.\"* ~[MongoDB]"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:100
msgid ""
"``clang-format`` offers several defaults (eg. LLVM, Mozilla, Linux, "
"Google C++ Style)."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:103
msgid ""
"The proposal recommends to use one of the base styles without any "
"modification. It is possible to fine-tune the configuration, but this RFC"
" aims for simplicity."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:107
msgid "The reasons are two-fold:"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:109
msgid ""
"make GDAL code unified with the wide spectrum of well-established C/C++ "
"projects"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:111
msgid "long arguments and religious wars prevention."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:114
msgid "``.clang-format``"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:116
msgid "The hope is to avoid requiring a .clang-format file in the code base."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:119
msgid "``.editorconfig``"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:121
msgid ""
"`EditorConfig <http://editorconfig.org/>`__ is currently in use and "
"``.editorconfig`` file is provided to automatically tell popular code "
"editors about the basic style settings like indentation, whitespaces and "
"end-of-line markers for distinguished types of plain text files."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:126
msgid ""
"The ``.editorconfig`` file will have to be updated to match the chosen "
"``.clang-format`` settings if they are required."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:130
msgid "EOL"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:132
msgid "``clang-format`` does not enforce line endings."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:134
msgid ""
"The EOL marker is considered to be `a part of a file encoding decision "
"<http://lists.llvm.org/pipermail/cfe-commits/Week-of-"
"Mon-20130930/090200.html>`__ and not part of any coding style."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:138
msgid ""
"The EOL marker can be enforced as project-wide setting controlled with "
"``.gitattributes`` and ``.editorconfig``."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:141
msgid ""
"However, it shall still be left as configurable setting in developer's "
"environment of choice (eg. ``git config``) independently from the "
"project-wide setting."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:146
msgid "Big Reformat"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:148
msgid "What to do about the existing code?"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:150
msgid "The proposal recommends to just do one big reformat of the codebase."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:152
msgid ""
"While it may seem causing clutter in the repository log (eg. ``svn "
"blame``), if it occurs infrequently (eg. yearly) and is applied to the "
"entire codebase at that time, it should not be very disruptive to the "
"source code history. One way to cope with skewed history is to use ``git "
"blame -w`` which ignores whitespace when comparing commits."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:158
msgid ""
"Partial application of the code formatting rules would create more work "
"without delivering the full benefit [MongoDB] leading to codebase with "
"different styles mixed."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:163
msgid "Branches"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:165
msgid "Branches to run the big reformat in are:"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:167
msgid "``trunk``"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:168
msgid "[STRIKEOUT:``branches/2.2``]"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:169
msgid "[STRIKEOUT:``branches/2.1``]"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:170
msgid "[STRIKEOUT:``branches/2.0``]"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:173
msgid "After Big Reformat"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:175
msgid "How to work against the natural entropy in a codebase:"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:177
msgid ""
"It is highly recommended to use ``clang-format`` integration while "
"writing a code."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:179
msgid "Format changed code before committing or opening pull requests."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:180
msgid ""
"If you have to commit change in code formatting, do it in separate "
"commit. Avoid commits with a mixture of code and formatting changes."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:183
msgid ""
"There is downside of history clutter in repository, but this proposal "
"states that a codebase with different styles across is even worse."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:187
msgid ""
"*\"After all, every moment of time wasted on code formatting or "
"discussion thereof is eliminated.\"* ~[MongoDB]"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:193
msgid ""
"Set up Travis CI \"style safety valve\" build dedicated to run clang-"
"format lint based on the approach used in ``​clang_format.py`` script by "
"MongoDB."
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:198
msgid "Miscellaneous"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:200
msgid ""
"Those who build GDAL with GCC 6+ may appreciate consistent code format "
"style as it will help to avoid some dozens of the `new compiler warnings "
"<https://developers.redhat.com/blog/2016/02/26/gcc-6-wmisleading-"
"indentation-vs-goto-fail/>`__:"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:217
msgid ""
"[MongoDB] Succeeding With ClangFormat: `Part 1 "
"<https://engineering.mongodb.com/post/succeeding-with-clangformat-part-1"
"-pitfalls-and-planning/>`__, `Part 2 "
"<https://engineering.mongodb.com/post/succeeding-with-clangformat-part-2"
"-the-big-reformat/>`__, `Part 3 <https://engineering.mongodb.com/post"
"/succeeding-with-clangformat-part-3-persisting-the-change/>`__"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:223
msgid ""
"[Chromium] `Using clang-format on Chromium C++ Code "
"<https://chromium.googlesource.com/chromium/src/+/master/docs/clang_format.md>`__"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:225
msgid ""
"`https://clangformat.com <https://clangformat.com>`__ - ``clang-format`` "
"interactive guide and builder"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:227
msgid ""
"`https://zed0.co.uk/clang-format-configurator/ <https://zed0.co.uk/clang-"
"format-configurator/>`__"
msgstr ""

#: ../../source/development/rfc/rfc69_cplusplus_formatting.rst:228
msgid ""
"`https://trac.osgeo.org/geos/wiki/RFC4 "
"<https://trac.osgeo.org/geos/wiki/RFC4>`__"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:5
msgid "RFC 6: Geometry and Feature Style as OGR Special Fields"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:16
msgid ""
"This proposal addresses and issue have been discovered long ago, and OGR "
"provides no equivalent solution so far."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:19
msgid ""
"Some of the supported formats like Mapinfo.tab may contain multiple "
"geometry types and style information. In order to handle this kind of "
"data sources properly a support for selecting the layers by geometry type"
" or by the style info would be highly required. For more details see the "
"following MapServer related bugs later in this document."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:25
msgid ""
"All of the proposed changes can be found at the tracking bug of this RFC "
"referenced later in this document."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:31
msgid ""
"The most reasonable way to support this feature is to extend the "
"currently existing 'special field' approach to allow specifying more than"
" one fields. Along with the already definied 'FID' field we will add the "
"following ones:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:36
msgid "'OGR_GEOMETRY' containing the geometry type like 'POINT' or 'POLYGON'."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:38
msgid "'OGR_STYLE' containing the style string."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:39
msgid "'OGR_GEOM_WKT' containing the full WKT of the geometry."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:41
msgid ""
"By providing the aforementioned fields one can make for example the "
"following selections:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:44
msgid ""
"select FID, OGR_GEOMETRY, OGR_STYLE, OGR_GEOM_WKT, \\* from MyTable where"
" OGR_GEOMETRY='POINT' OR OGR_GEOMETRY='POLYGON'"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:46
msgid ""
"select FID, OGR_GEOMETRY, OGR_STYLE, OGR_GEOM_WKT, \\* from MyTable where"
" OGR_STYLE LIKE '%BRUSH%'"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:48
msgid ""
"select FID, OGR_GEOMETRY, OGR_STYLE, OGR_GEOM_WKT, \\* from MyTable where"
" OGR_GEOM_WKT LIKE 'POLYGON%'"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:50
msgid "select distinct OGR_GEOMETRY from MyTable order by OGR_GEOMETRY desc"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:55
msgid "There are two distinct areas where this feature plays a role"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:57
msgid "Feature query implemented at ogrfeaturequery.cpp"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:59
msgid "SQL based selection implemented at ogr_gensql.cpp and ogrdatasource.cpp"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:62
msgid ""
"To specify arbitrary number of special fields we will declare an array "
"for the field names and types in ogrfeaturequery.cpp as"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:72
msgid ""
"So as to make this array accessible to the other files the followings "
"will be added to ogr_p.h"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:90
msgid ""
"In ogrfeature.cpp the field accessor functions (GetFieldAsString, "
"GetFieldAsInteger, GetFieldAsDouble) will be modified providing the "
"values of the special fields by the field index"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:94
msgid ""
"The following code will be added to the beginning of "
"OGRFeature::GetFieldAsInteger:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:112
msgid ""
"The following code will be added to the beginning of "
"OGRFeature::GetFieldAsDouble:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:130
msgid ""
"The following code will be added to the beginning of "
"OGRFeature::GetFieldAsString:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:160
msgid ""
"The current implementation of OGRFeature::GetFieldAsString uses a static "
"string to hold the const char\\* return value that is highly avoidable "
"and makes the code thread unsafe. In this regard the 'static char "
"szTempBuffer[80]' will be changed to non static and a new member will be "
"added to OGRFeature in ogrfeature.h as:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:170
msgid ""
"This member will be initialized to NULL at the constructor, and will be "
"freed using CPLFree() at the destructor of OGRFeature."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:173
msgid ""
"In OGRFeature::GetFieldAsString all of the occurrences of 'return "
"szTempBuffer;' will be changed to 'return m_pszTmpFieldValue = CPLStrdup("
" szTempBuffer );'"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:177
msgid ""
"OGRFeature::GetFieldAsString is responsible to destroy the old value of "
"m_pszTmpFieldValue at the beginning of the function:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:185
msgid ""
"In ogrfeaturequery.cpp we should change OGRFeatureQuery::Compile to add "
"the special fields like:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:198
msgid ""
"In ogrfeaturequery.cpp OGRFeatureQueryEvaluator() should be modifyed "
"according to the field specific actions like"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:226
msgid ""
"In ogrfeaturequery.cpp OGRFeatureQuery::FieldCollector should be modifyed"
" to add the field names like:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:235
msgid ""
"In ogrdatasource.cpp ExecuteSQL() will allocate the arrays according to "
"the number of the special fields:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:249
msgid "And the fields will be added as"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:262
msgid ""
"For supporting the SQL based queries we should also modify the "
"constructor of OGRGenSQLResultsLayer in ogr_gensql.cpp and set the field "
"type properly:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:284
msgid ""
"Some of the queries will require to modify "
"OGRGenSQLResultsLayer::PrepareSummary in ogr_gensql.cpp will be "
"simplified (GetFieldAsString will be used in all cases to access the "
"field values):"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:294
msgid ""
"OGRGenSQLResultsLayer::TranslateFeature should also be modifyed when "
"copying the fields from primary record to the destination feature"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:311
msgid ""
"For supporting the 'order by' queries we should also modify "
"OGRGenSQLResultsLayer::CreateOrderByIndex() as:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:332
msgid ""
"All of the strings allocated previously should be deallocated later in "
"the same function as:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:352
msgid ""
"When ordering by the field values the OGRGenSQLResultsLayer::Compare "
"should also be modifyed:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:386
msgid "Adding New Special Fields"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:388
msgid ""
"Adding a new special field in a subsequent development phase is fairly "
"straightforward and the following steps should be made:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:391
msgid ""
"In ogr_p.h a new constant should be added with the value of the "
"SPECIAL_FIELD_COUNT and SPECIAL_FIELD_COUNT should be incremented by one."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:395
msgid ""
"In ogrfeaturequery.cpp the special field string and the type should be "
"added to SpecialFieldNames and SpecialFieldTypes respectively"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:398
msgid ""
"The field value accessors (OGRFeature::GetFieldAsString, "
"OGRFeature::GetFieldAsInteger, OGRFeature::GetFieldAsDouble) should be "
"modifyed to provide the value of the new special field. All of these "
"functions provide const return values so GetFieldAsString should retain "
"the value in the m_pszTmpFieldValue member."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:404
msgid ""
"When adding a new value with a type other than SWQ_INTEGER and SWQ_STRING"
" the following functions might also be modified accordingly:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:408
msgid "OGRGenSQLResultsLayer::OGRGenSQLResultsLayer"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:409
msgid "OGRGenSQLResultsLayer::TranslateFeature"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:410
msgid "OGRGenSQLResultsLayer::CreateOrderByIndex"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:411
msgid "OGRGenSQLResultsLayer::Compare"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:412
msgid "OGRFeatureQueryEvaluator"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:417
msgid ""
"In most cases the backward compatibility of the OGR library will be "
"retained. However the special fields will potentially conflict with "
"regard fields with the given names. When accessing the field values the "
"special fields will take pecedence over the other fields with the same "
"names."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:423
msgid ""
"When using OGRFeature::GetFieldAsString the returned value will be stored"
" as a member variable instead of a static variable. The string will be "
"deallocated and will no longer be usable after the destruction of the "
"feature."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:431
msgid ""
"A new gdalautotest/ogr/ogr_sqlspecials.py script to test support for all "
"special fields in the ExecuteSQL() call and with WHERE clauses."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:437
msgid ""
"The OGR SQL document will be updated to reflect the support for special "
"fields."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:443
msgid ""
"Tamas Szekeres will implement the bulk of the RFC in time for GDAL/OGR "
"1.4.0."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:446
msgid ""
"Frank Warmerdam will consider how the backward compatibility issues (with"
" special regard to the modified lifespan of the GetFieldAsString returned"
" value) will affect the other parts of the OGR project and will write the"
" Python regression testing script."
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:454
msgid ""
"Tracking bug for this feature (containing all of the proposed code "
"changes): #1333"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:457
msgid "MapServer related bugs:"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:459
msgid "`1129 <http://trac.osgeo.org/mapserver/ticket/1129>`__"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:460
msgid "`1438 <http://trac.osgeo.org/mapserver/ticket/1438>`__"
msgstr ""

#: ../../source/development/rfc/rfc6_sqlgeom.rst:471
msgid "Andrey Kiselev +1"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:5
msgid ""
"RFC 70: Guessing output format from output file name extension for "
"utilities"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:8
#: ../../source/development/rfc/rfc71_github_migration.rst:8
#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:8
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:8
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:8
msgid "Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:9
#: ../../source/development/rfc/rfc71_github_migration.rst:9
msgid "even.rouault@spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:10
msgid "Aug 2017"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:11
#: ../../source/development/rfc/rfc71_github_migration.rst:11
msgid "Adopted, implemented"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:12
msgid "Implementation version:"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:12
msgid "2.3.0"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:18
msgid ""
"This proposal is to add syntaxic sugar to make GDAL and OGR command line "
"utilities, so they take into account the extension of the output filename"
" to guess which output driver to use, when it is not explicitly specified"
" with -f / -of switch."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:26
msgid ""
"Currently command line utilities require to explicitly specify the output"
" format when not wishing to use the default format (generally GeoTIFF for"
" raster, and Shapefile for vector). But this is rather counter-intuitive."
" For example \"gdal_translate in.tif out.png\" will generate a GeoTIFF, "
"and \"ogr2ogr out.gpkg in.shp\" a shapefile. So you have to specify "
"respectively -of PNG and -f GPKG to get the expected result."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:34
msgid ""
"Guessing the output format from the extension of the output filename is "
"for example a behavior found in ImageMagick convert utility, or in "
"OpenJPEG opj_compress/opj_decompress utilities."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:39
msgid "Changes in C/C++ and Python utilities"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:41
msgid ""
"Command line utilities, when neither -f nor -of are specified (note: "
"since r39878 both switches can be indifferently used), will loop through "
"the registered drivers and check if one or several drivers, with output "
"capabilities, declare to recognize the extension of the output filename."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:46
msgid ""
"When one and only one driver declares this extension (.tif, .png, .jpg "
"etc), it will be used automatically"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:48
msgid ""
"When several drivers declare this extension (for example KML and LIBKML "
"for .kml), the utility will select the first registered driver (except "
"netCDF instead of GMT for .nc files), and a warning is emitted specifying"
" which driver is used"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:52
msgid ""
"When no driver declares this extension, and the extension is not empty "
"(e.g a .mpg filename), the utility will error out"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:55
msgid "For completeness:"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:57
msgid ""
"When there's no extension, and no prefix is recognized (see below), the "
"default output driver will be silently used, as currently"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:60
msgid ""
"Since at least GDAL 1.10, the base of this logic already exists since a "
"warning is emitted for C/C++ utilities, when the extension of the output "
"format is known to be recognized by another driver than the default "
"output driver."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:65
msgid ""
"Similarly, for vector output, if doing something like \"ogr2ogr "
"PG:dbname=mydb out.shp\", a PG:dbname=mydb directory is created with "
"shapefiles, instead of ingesting the shapefile into PostgreSQL. A warning"
" is emitted in that case since the PG driver declares the PG: prefix in "
"its metadata. The new behavior will be to imply the -update switch in "
"such situation."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:72
msgid ""
"When the utilities are available as library functions (GDALTranslate(), "
"etc.), output format guessing will also be applied if the -f/-of switch "
"is not specified"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:79
msgid ""
"For librarified utilities (gdal.Translate, etc.), the format argument now"
" defaults to None."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:83
msgid "Potential issues"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:85
msgid ""
"There might be some fragility with the new logic in the situation where a"
" GDAL version has only one driver that supports extension xxx, but a "
"later version adds another driver that also supports extension xxx (or "
"another distribution of the same version has a plugin that handles xxx). "
"So scripts that did \"gdal_translate in out.xxx\" would now error out in "
"the next version since several drivers are available."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:92
msgid ""
"Bottom line: always specify the output driver when "
"reliability/reproducibility is desired."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:95
msgid ""
"This RFC mostly helps for interactive conversions where the less you type"
" the better."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:101
msgid ""
"This will break scripts that use an output filename whose extension is "
"matched by a driver which is not the default one. This incompatibility is"
" rather unlikely since previous GDAL versions already emit a warning in "
"this situation (for C/C++ utilities only. for Python utilities default "
"driver is silently used), so people have likely specified the output "
"driver if they really want to do \"gdal_translate in.tif out.png -of "
"GTiff\"."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:109
msgid "MIGRATION_GUIDE.TXT will mention those potential caveats."
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:114
msgid ""
"The existing autotest suite should continue to pass (with a few changes "
"related to tests for the current behavior)"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:120
msgid "Implementation will be done by Even Rouault"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:122
msgid ""
"Proposed implementation is in "
"`https://github.com/rouault/gdal2/tree/rfc70 "
"<https://github.com/rouault/gdal2/tree/rfc70>`__"
msgstr ""

#: ../../source/development/rfc/rfc70_output_format_guess.rst:125
msgid ""
"Diff: `https://github.com/OSGeo/gdal/compare/trunk...rouault:rfc70 "
"<https://github.com/OSGeo/gdal/compare/trunk...rouault:rfc70>`__"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:5
msgid "RFC 71: Migration to GitHub"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:10
msgid "March 2018"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:17
msgid ""
"It is proposed that the GDAL source tree and ticket database moves from "
"the OSGeo hosted Subversion repository/Trac database to GitHub. Full "
"source code history will be preserved. To make the migration simpler, "
"existing tickets will remain in OSGeo Trac and will not be migrated to "
"GitHub. New tickets will have to be opened in GitHub."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:24
msgid "Motivations"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:26
msgid ""
"It is considered that most developers interested by GDAL development are "
"nowadays more used to git than Subversion, and the use of Subversion as "
"the main source control management makes contributions less attractive."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:30
msgid ""
"The `https://github.com/OSGeo/gdal <https://github.com/OSGeo/gdal>`__ "
"mirror has existed since 2012 and has over time become the preferred way "
"for contributors without direct SVN access (or even those with SVN "
"access) to submit their contributions, in particular because of the "
"coupling with the continuous integratations services of Travis-CI and "
"!AppVeyor that enable maintainers to check that the contribution doesn't "
"introduce known regressions + the friendly way of commenting a pull "
"request. However the manual porting of !GitHub pull requests to Trac is a"
" bit painful for GDAL maintainers."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:39
msgid ""
"GitHub has become the de-facto hosting platform for a lot of open-source "
"projects."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:43
msgid "Details of the migration"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:45
msgid ""
"The existing GitHub git repository will be pushed to "
"`https://github.com/OSGeo/gdal_svn_mirror_backup "
"<https://github.com/OSGeo/gdal_svn_mirror_backup>`__ (eventually removed "
"once we are confident further steps have not messed things up)"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:49
msgid ""
"As GitHub also uses the syntax \"#1234\" to link commit messages to its "
"issues that was also used in Trac, currently when following links in "
"!GitHub that point to a Trac ticket, one ends up to a non-existing or "
"unrelated !GitHub issue/pull request. So the commit messages of the "
"current !GitHub mirror will be rewritten by a \"git filter-branch --msg-"
"filter 'python rewrite.py' -- --all\" command to replace \"#1234\" with "
"\"`https://trac.osgeo.org/gdal/ticket/1234 "
"<https://trac.osgeo.org/gdal/ticket/1234>`__\""
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:57
msgid ""
"The git 'trunk' branch will be renamed 'master' to follow git best "
"practices"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:59
msgid "The existing 'tag/x.y.z' branches will be replaced by proper git tags."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:61
msgid ""
"This modified repository will be forced push to "
"`https://github.com/OSGeo/gdal <https://github.com/OSGeo/gdal>`__ This "
"will have the consequence of invalidating existing pull request or forks "
"of repository that will have to be rebased to the new one. From that "
"point, \"svn commit\" should be avoided and changes should go to the git "
"repository."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:67
msgid ""
"The cron job on the OSGeo server that refreshes the website from sources "
"will be modified to pull from !GitHub rather than SVN."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:69
msgid ""
"Ticket creation permissions will be removed in Trac. Modification or "
"closing of existing open tickets will still be possible. From that point,"
" if closing a Trac ticket, one will have manually to reference the github"
" commit."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:73
msgid ""
"The settings of the GDAL GitHub repository will be changed allow tickets "
"to be filed. Labels and Milestones will be populated with relevant "
"content"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:77
msgid ""
"Further actions required, in no particular order, and for which help from"
" other GDAL developers/contributors would be welcome:"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:80
msgid ""
"Most visible Trac wiki documentation will have to be revised to point to "
"GitHub"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:82
msgid "HOWTO-RELEASE will have to be revised."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:83
msgid ""
"Existing SVN committers still interested in the project will have to "
"request commit access to the GitHub repo."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:85
msgid ""
"Some support from OSGeo SAC will be needed to turn the GDAL SVN "
"repository to read-only (a complementary option would be to rename it to "
"gdal_historical so that people pulling from the old one are well aware of"
" the migration by having their scripts 'cleanly' error out)"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:89
msgid ""
"Some guidelines on how we intend to use git/GitHub features will have to "
"be rewritten."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:93
msgid "Exit strategy"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:95
msgid ""
"GitHub is a closed platform. In case it would close or would start askin "
"to pay unreasonable fees, some backup strategy of the tickets would be "
"needed. The solutions might be:"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:99
msgid ""
"`https://github.com/josegonzalez/python-github-backup "
"<https://github.com/josegonzalez/python-github-backup>`__"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:100
msgid ""
"GitLab has an import module from GitHub. Although some experimentation "
"has been done with those, this RFC does *not* cover setting up those "
"solutions as a regular backup system."
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:105
msgid "Not covered by this RFC"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:107
msgid ""
"Migration of Trac wiki content to GitHub wiki is not in the scope of this"
" RFC. Can be done later"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:111
msgid "Previous related discussions"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:113
msgid ""
"`https://lists.osgeo.org/pipermail/gdal-dev/2018-March/048240.html "
"<https://lists.osgeo.org/pipermail/gdal-dev/2018-March/048240.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:114
msgid ""
"`https://lists.osgeo.org/pipermail/gdal-dev/2017-September/047060.html "
"<https://lists.osgeo.org/pipermail/gdal-"
"dev/2017-September/047060.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc71_github_migration.rst:119
msgid "+1 from HowardB, JukkaR, KurtS and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:5
msgid "RFC 72: Update autotest suite to use pytest"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:8
msgid "Craig de Stigter"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:9
msgid "craig.destigter@koordinates.com"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:10
msgid "2018-Sep-27"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:11
msgid "*Implemented in GDAL 2.4*"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:17
msgid ""
"The document proposes and describes conversion of the existing Python "
"autotest suite to use the `pytest framework "
"<https://docs.pytest.org/en/latest/>`__."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:21
msgid ""
"Using pytest provides significant productivity gains for writing, reading"
" and debugging python tests, compared with the current home-grown "
"approach."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:28
msgid ""
"The current autotest framework dates back to 2007 (at least), and while "
"reasonably comprehensive (and 186,000 lines of Python) is difficult for "
"developers to use and extend."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:32
msgid ""
"As a homegrown framework it'll never get any better than the effort GDAL "
"developers put in. For example: reporting, test coverage, "
"parallelisation, resumption, log/output handling, parameterisation."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:35
msgid ""
"Test failures are typically only as descriptive as \"fail\", determining "
"the cause requires editing the tests."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:37
msgid "It is difficult to run/rerun individual tests"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:38
msgid ""
"The tests often assume a set of compile options that may not be valid for"
" the local build."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:40
msgid ""
"Tests are patched/disabled in various CI environments by scripts outside "
"the test tree. This is opaque to developers working locally."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:42
msgid ""
"Some tests depend on each other and a specific execution order, making it"
" difficult to debug and extend."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:44
msgid "Shared functionality is repeated across tests and modules"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:45
msgid ""
"Tests are typically only written for new functionality, not regressions. "
"(Crudely, from the 2663 commits in the last year only 725 touched the "
"autotest tree)"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:49
msgid ""
"By adopting an OSS test framework in widespread use we can leverage the "
"ecosystem to provide GDAL with benefits and improvements going forward. "
"The utility of automated testing has been proven for GDAL, and we need to"
" make test writing as easy as possible."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:57
msgid ""
"Port the existing Python autotest suite to use the `pytest framework "
"<https://docs.pytest.org/en/latest/>`__. Why pytest? It's in widespread "
"use, has a wide set of features, is extensible via plugins, and focuses "
"on making writing and debugging tests as easy as possible - minimising "
"boilerplate code and maximising reuse. `This presentation "
"<http://thesoftjaguar.com/pres_pytest.html>`__ (despite dating back to "
"2014) gives a brief overview of the key benefits."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:65
msgid ""
"Do the bulk of this port using automated code refactoring tools so the "
"autotest suite matches the preferred pytest approach. While pytest does "
"support all sorts of custom test collection and execution methods, in "
"order to increase the benefits to developers going forward we should do a"
" proper conversion. Initial goal is to get the tests ported, remove as "
"much boilerplate as feasible, all while keeping the existing CI green. "
"Future goals are to continue to reduce boilerplate code and increase "
"isolation between tests."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:74
msgid "At a minimum we still need to preserve the existing ability to:"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:76
msgid ""
"Run all existing CI tests in all environments using the existing "
"configuration"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:78
msgid "Run individual test modules"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:79
msgid "Support existing subprocess/multiprocess tests"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:80
msgid "Support testing under Python 2.7 & Python 3"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:81
msgid "Stacktraces for assertion failures"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:83
msgid ""
"The new test suite will be in place for the GDAL 2.4.0 release in "
"December 2018. Changes will not be backported to the 2.3.x or earlier "
"release branches."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:87
#: ../../source/development/rfc/rfc74_sphinx.rst:110
msgid "References:"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:89
msgid "`issue #949 <https://github.com/OSGeo/gdal/issues/949>`__."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:90
msgid ""
"`gdal-dev post <https://lists.osgeo.org/pipermail/gdal-"
"dev/2018-October/049081.html>`__, Oct 2018"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:95
msgid "Example"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:97
msgid "A typical existing GDAL python unit test:"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:124
msgid "Could *eventually* become something like this"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:135
msgid ""
"It's a lot clearer what it is actually testing, and all support "
"functionality is handled by shared-use fixtures (``gdaladdo`` & "
"``require_files``), including cleanup and conditional-skipping."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:140
msgid "Test output"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:142
msgid ""
"Pytest out-of-the-box produces readable output, and is augmented by the "
"``pytest-sugar`` plugin which makes it even nicer:"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:145
msgid ""
"Successful tests don't produce much output (a single ``.`` or ``✓`` per "
"test, by default)"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:147
msgid ""
"Failed tests produce a traceback. Any logs, stdout and stderr produced by"
" the failing tests are printed too. This is a great start for debugging "
"the cause of the failure."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:150
msgid "Any expressions used in failing asserts are printed."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:151
msgid "Test output is clearly colourised (red/green) if the terminal supports it."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:154
msgid "![](pytest-output-example.png, 626px, center)"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:157
msgid "Plan Phase 1"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:159
msgid "Progress at `pull request 963 <https://github.com/OSGeo/gdal/pull/963>`__."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:162
msgid ""
"Using code automation, convert the existing Python autotest suite to use "
"pytest-style assertions."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:165
msgid ""
"rename all tests to ``test_*()``. Pytest finds tests by matching names "
"against a regex and this is the default regex."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:168
msgid ""
"generate assertions from ``post_reason()``/``return 'fail'`` calls where "
"possible"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:171
msgid "replace all ``skip``/``fail``/``success`` return values"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:173
msgid ""
"remove extra ``../pymod`` entries from ``sys.path``. All tests now run in"
" a single process"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:176
msgid "remove ``__main__`` block and ``gdaltest_list`` from test files"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:178
msgid ""
"these collectively achieve better test collection/selection, output "
"capturing, and improved assertions and reporting"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:181
msgid ""
"Manually convert the dynamically-generated tests to use `parametrization "
"<https://docs.pytest.org/en/latest/parametrize.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:184
msgid ""
"Ensure the slow/internet tests are still marked as such and skipped by "
"default."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:187
msgid ""
"Use `pytest-sugar <https://pivotfinland.com/pytest-sugar/>`__ to make "
"test output pretty. Disable it in CI since it doesn't work well with "
"travis CI's output buffering."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:191
msgid ""
"Move environment-specific test-skipping from CI to the test suite, "
"possibly with additional tag/marks."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:194
msgid "Ensure the existing CI tests pass & debug any failures"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:196
msgid "Add documentation and a straightforward install process for pytest itself"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:200
msgid "Notable changes and their implications"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:202
msgid ""
"tests are now run with ``cd autotest ; pytest``. (The first time you may "
"need to ``pip install -r requirements.txt`` to install pytest)"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:204
msgid ""
"All tests now run in a single process (they were previously forked for "
"each test module). This means that:"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:207
msgid ""
"errors during test collection are now loud, and immediately fail the "
"entire test run with a traceback. Previously things like syntax errors in"
" files and errors at module level were easy to miss."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:211
msgid "a single segfault will kill the entire test run dead."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:213
msgid ""
"It's now possible to run individual tests, instead of just entire files. "
"However, tests are *not yet independent of each other*. So that might "
"cause the tests to behave differently than if you ran the whole module."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:217
msgid ""
"``test_py_scripts.run_py_script`` was modified to always run the script "
"as a subprocess. The stdout capturing of the original method did strange "
"things with pytest. This change broke some tests that relied on passing "
"files in the ``/vsimem/`` root to scripts, so those have been changed to "
"use the ``tmp/`` root instead."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:222
msgid "no test suite support for Python <2.7"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:227
msgid "Plan Phase 2 / Future Work"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:229
msgid ""
"Improving test isolation, so running an entire module at a time isn't "
"required."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:231
msgid ""
"Removing the global ``gdaltest.<drivername>_drv`` variables and replace "
"them with pytest fixtures."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:233
msgid "Use fixtures for temporary file handling and cleanup"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:234
msgid "More automated test skipping based on what's actually compiled."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:235
msgid "Automated style cleanup using `Black <https://github.com/ambv/black>`__."
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:237
msgid ""
"Consider parallelising test runs by default (there are several `plugins "
"available <https://github.com/pytest-dev/pytest-xdist>`__ for this)"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:244
msgid "Adopted with the following votes from PSC members:"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:246
msgid "+1 from EvenR, DanielM, HowardB and KurtS"
msgstr ""

#: ../../source/development/rfc/rfc72_pytest.rst:247
msgid "+0 from JukkaR"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:5
msgid ""
"RFC 73: Integration of PROJ6 for WKT2, late binding capabilities, time-"
"support and unified CRS database"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:9
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:9
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:9
msgid "even.rouault @ spatialys.com"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:10
msgid "2019-Jan-08"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:11
msgid "Last modified:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:11
msgid "2019-May-02"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:12
msgid "Implemented in GDAL 3.0"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:18
msgid ""
"The document describe work related to integration of PROJ 6 with GDAL, "
"which adds different capabilities: support for CRS WKT 2 version, \"late "
"binding\" capabilities for coordinate transformations between CRS, "
"support of time-dimension for coordinate operations and the use of a "
"unified CRS database."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:27
msgid ""
"The motivations are those exposed in `https://gdalbarn.com/#why "
"<https://gdalbarn.com/#why>`__ , which are copied here"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:31
msgid ""
"Coordinate systems in GDAL, PROJ, and libgeotiff are missing modern "
"capabilities and need a thorough refactoring:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:34
msgid ""
"The dreaded ad hoc CSV databases in PROJ_LIB and GDAL_DATA are "
"frustrating for users, pose challenges for developers, and impede "
"interoperability of definitions."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:37
msgid "GDAL and PROJ are missing OGC WKT2 support."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:38
msgid ""
"PROJ 5.0+ no longer requires datum transformation pivots through WGS84, "
"which can introduce errors of up to 2m, but the rest of the tools do not "
"take advantage of it."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:43
msgid "CSV database"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:45
msgid ""
"The use of a SQLite-based database for EPSG and other definitions will "
"allow the projects to add more capability (area-aware validation), "
"transition the custom peculiar data structures of the projects to "
"something more universally consumable, and promote definition "
"interoperability between many coordinate system handling software tools."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:52
msgid "WKT2"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:54
msgid ""
"`OGC WKT2 <http://docs.opengeospatial.org/is/12-063r5/12-063r5.html>`__ "
"fixes longstanding interoperability coordinate system definition "
"discrepancies. WKT2 contains tools for describing time-dependent "
"coordinate reference systems. PROJ 5+ is now capable of time-dependent "
"transformations, but GDAL and other tools do not yet support them."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:60
msgid ""
"Several countries are updating their geodetic infrastructure to include "
"time-dependent coordinate systems. For example, Australia and the United "
"States are adapting time-dependent coordinate systems in 2020 and 2022, "
"respectively. The familiar NAD83 and NAVD88 in North America being "
"replaced by NATRF2022 and NAPGD2022, and the industry WILL have to adapt "
"to these challenges sooner or later."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:68
msgid "WGS84 Pivot"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:70
msgid ""
"PROJ previously required datum transformation that pivoted through WGS84 "
"via a 7-parameter transform. This pivot is a practical solution, but it "
"can introduce error of about two meters, and many legacy datums cannot be"
" defined in terms of WGS84. PROJ 5+ now provides the tools to support "
"late-binding through its `transformation pipeline framework "
"<https://proj4.org/usage/transformation.html#geodetic-transformation>`__,"
" but GDAL and the rest of the tools cannot use it yet. Higher accuracy "
"transformations avoid stepping through WGS84 and eliminates extra "
"transformation steps with side-car data from a local geodetic authority."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:81
msgid "Related work in other libraries"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:83
msgid ""
"This RFC is the last step in the \"gdalbarn\" work. Previous steps have "
"consisted in implementing the related changes in PROJ master per `PROJ "
"RFC 2 <https://proj4.org/community/rfc/rfc-2.html>`__ and in libgeotiff "
"master per `libgeotiff pull request 2 "
"<https://github.com/OSGeo/libgeotiff/pull/2>`__."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:93
msgid "Third-party library requirements"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:95
msgid ""
"GDAL master (future 3.0) will require PROJ master (future PROJ 6.0) and "
"libgeotiff master (future libgeotiff 1.5 or 2.0) for build and execution."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:99
msgid ""
"Regarding PROJ, no internal copy of PROJ will be embedded in GDAL master."
" It is not doable of supporting older versions of PROJ, as the "
"OGRSpatialReference class has been largely rewritten to take advantage of"
" functionality that has been completely moved from GDAL to PROJ: PROJ "
"string import and export, WKT string import and export, EPSG database "
"exploitation. To be able to use more easily GDAL master and PROJ master "
"in complex setups where some GDAL dependencies use a libproj provided by "
"the system, and where mixing naively PROJ master and this older libproj "
"would result in runtime crashes, PROJ master can be built with "
"CFLAGS/CXXFLAGS=-DPROJ_RENAME_SYMBOLS to alias its public symbols, and "
"GDAL will be able to use this custom build. Note that this is not "
"intended to be used in a long term, since proper packaging solutions will"
" eventually use PROJ 6 to rebuild all its reverse dependencies. It should"
" be noted also that PROJ is required at configure / nmake time, that is "
"the dynamic loading at runtime through dlopen() / LoadLibrary() is no "
"longer available."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:116
msgid ""
"Regarding libgeotiff, the internal copy in frmts/gtiff/libgeotiff has "
"been refreshed with the content of upstream libgeotiff master."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:119
msgid ""
"All continuous integration systems (Travis-CI and AppVeyor) have been "
"updated to build PROJ master as part of the GDAL build."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:123
msgid "OGRSpatialReference rewrite"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:125
msgid ""
"The OGRSpatialReference class is central in GDAL/OGR for all coordinate "
"reference systems (CRS) manipulations. Up to GDAL 2.4, this class "
"contained mostly a OGR_SRSNode root node of a WKT 1 representation, and "
"all getters and setters manipulated this tree representation. As part of "
"this work, the main object contained internally by OGRSpatialReference is"
" now a PROJ PJ object, and methods call PROJ C API getters and setters on"
" this PJ object. This enables to be, mostly (*), representation "
"independent."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:134
msgid ""
"WKT1, WKT2, ESRI WKT, PROJ strings import and export is now delegated to "
"PROJ. The same holds for import of CRS from the EPSG database, that now "
"relies on proj.db SQLite database. Consequently all the data/\\*.csv "
"files that contained CRS related information have been removed from GDAL."
" It should be noted that \"morphing\" from ESRI WKT is now done "
"automatically when importing WKT."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:141
msgid ""
"While general semantics of methods like IsSame() or FindMatches() remain "
"the same, underneath implementations are substantially different, which "
"can lead to different results than previous GDAL versions in some cases. "
"In the FindMatches() case, identification of CRS to EPSG entries is "
"generally improved due to enhanced query capabilities in the database."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:147
msgid ""
"(*) The \"mostly\" precision is here since it was not practical to do "
"this rewrite in every place. So for some methods, an internal WKT1 export"
" is still done. This is the case for methods that take a path to a SRS "
"node (like \"GEOGCS|UNIT\") as an argument, or some methods like "
"SetProjection(), GetProjParm(), that expect a OGC WKT1 specific name. "
"Those are thought to be used mostly be drivers. Changing them to be EPSG "
"names would impact a number of drivers, some of them little tested "
"regarding SRS support, and which furthermore mostly support WKT1 "
"representation only."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:158
msgid "OGRCoordinateTransformation changes"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:160
msgid ""
"Since GDAL 2.3 and initial PROJ 5 support, when transforming between two "
"CRS we still relied on the PROJ.4 string export of the source and target "
"CRS to create a coordinate operation pipeline. So this limited to "
"\"early-binding\" operations, that is using the WGS84 pivot through "
"towgs84 or nadgrids PROJ keywords. Now PROJ new capabilities to find "
"appropriate coordinate operations between two CRS is used, offering "
"\"late-binding\" capabilities to take into account other pivots than "
"WGS84 or area of uses."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:169
msgid ""
"OGRCreateCoordinateOperation() now takes an extra optional arguments to "
"define options."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:172
msgid ""
"One of those options is to define an area of interest that will be taken "
"into account when searching candidate operations. If several operations "
"match, the \"best\" (according to PROJ sorting criterion) will be "
"selected. Note: it will systematically be used even if later calls to "
"Transform() use coordinates outside of the initial area of interest."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:178
msgid ""
"Another option is the ability to specify the coordinate operation to "
"apply, so as an override of what GDAL / PROJ would have automatically "
"computed, either as a PROJ string (generally a +proj=pipeline), or a WKT "
"coordinate operation/concatenated operation. Users can typically select a"
" specific coordinate operation by using the new PROJ projinfo utility "
"that can return the candidate operations from a source_crs / target_crs "
"tuple."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:186
msgid ""
"When no option is specified, GDAL will use PROJ to list all candidate "
"coordinate operations. For each call to Transform(), it will compute the "
"average coordinate of the input coordinates and use it to determine the "
"best coordinate operation from the candidate ones."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:191
msgid ""
"The Transform() method now takes an extra argument to contain the "
"coordinate epoch (generally as a decimal year value) for coordinate "
"operations that are time-dependent. Related, the transform options of the"
" GDALTransform mechanism typically used by gdalwarp now accepts a "
"COORDINATE_EPOCH for the same purpose."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:198
msgid "Use of OGRSpatialReference in GDAL"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:200
msgid ""
"Currently GDAL datasets accept and return a WKT 1 string to describe the "
"SRS. To be more independent of the actual encoding, and for example "
"allowing a GeoPackage raster dataset to be able to use WKT 2, it is "
"desirable to be able to attach a SRS that is not dependent of the "
"representation (WKT 1 or WKT 2), hence using a OGRSpatialReference object"
" instead of a const char\\* string."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:207
msgid "The following new methods are added in GDALDataset:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:209
msgid "virtual const OGRSpatialReference\\* GetSpatialRef() const;"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:210
msgid "virtual CPLErr SetSpatialRef(const OGRSpatialReference*);"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:211
msgid "virtual const OGRSpatialReference\\* GetGCPSpatialRef() const;"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:212
msgid ""
"virtual CPLErr SetGCPs(int nGCPCount, const GDAL_GCP *pasGCPList, const "
"OGRSpatialReference*);"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:215
msgid ""
"To ease the transition, the following non virtual methods are added in "
"GDALDataset:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:218
msgid "const OGRSpatialReference\\* GetSpatialRefFromOldGetProjectionRef() const;"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:220
msgid ""
"CPLErr OldSetProjectionFromSetSpatialRef(const OGRSpatialReference\\* "
"poSRS);"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:222
msgid ""
"const OGRSpatialReference\\* GetGCPSpatialRefFromOldGetGCPProjection() "
"const;"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:224
msgid ""
"CPLErr OldSetGCPsFromNew( int nGCPCount, const GDAL_GCP \\*pasGCPList, "
"const OGRSpatialReference \\* poGCP_SRS );"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:227
msgid ""
"and the previous GetProjectionRef(), SetProjection(), GetGCPProjection() "
"and SetGCPs() are available as projected virtual methods, prefixed by an "
"underscore"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:231
msgid ""
"This way to convert an existing driver, it is a matter of renaming its "
"GetProjectionRef() method as \\_GetProjectionRef(), and adding:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:241
msgid "Default WKT version"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:243
msgid ""
"OGRSpatialReference::exportToWkt() without options will report WKT 1 "
"(with explicit AXIS nodes. See below \"Axis order issues\" paragraph) for"
" CRS compatibles of this representation, and otherwise use WKT2:2018 "
"(typically for Geographic 3D CRS)."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:248
msgid ""
"An enhanced version of exportToWkt() accepts options to specify the exact"
" WKT version used, if multi-line or single-line output must be used, etc."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:252
msgid ""
"Alternatively the OSR_WKT_FORMAT configuration option can be used to "
"modify the WKT version used by exportToWk() (when no explicit version is "
"passed in the options of exportToWkt())"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:256
msgid ""
"The gdalinfo, ogrinfo and gdalsrsinfo utililies will default to "
"outputting WKT2:2018"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:260
msgid "Axis order issues"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:262
msgid ""
"This is a recurring pain point. This RFC proposes a new approach (without"
" pretending to solving it completely) to what was initially done per `RFC"
" 20: OGRSpatialReference Axis Support <./rfc20_srs_axes>`__. The issue is"
" that CRS official definitions use axis orders that do not conform to the"
" way raster or vector data is traditionally encoded in GIS applications. "
"The typical example is the Geographic \"WGS 84\" definition from EPSG, "
"EPSG:4326, which uses latitude as the first axis and longitude as the "
"second axis. RFC 20 decided that by default the AXIS definition would be "
"stripped off from the WKT when the axis order from the authority did not "
"match the GIS friendly one (and use a custom EPSGA authority to have WKT "
"with official AXIS elements)"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:274
msgid ""
"This was technically possible since the WKT 1 grammar makes the AXIS "
"element definition. However removal of the AXIS definitions was a "
"potential source of confusion as it was unclear which axis order was "
"actually used. Furthermore, in WKT2, the AXIS element is compulsory, and "
"the internal PROJ representation requires also a coordinate system to be "
"defined. So there would have been two unsatisfactory options:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:281
msgid ""
"return patched versions of the official definition with the GIS friendly "
"order, while still using the official authority code. Practical since we "
"keep the link with the source code, but a lie since we modify it. Users "
"would not know whether they must trust the encoded order, or the official"
" order from the authority."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:286
msgid ""
"return patched versions of the official definition with the GIS friendly "
"order, but without the official authority code. This would be compliant, "
"but we would lose the link with the authority code."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:290
msgid ""
"The solution put forward in this RFC is to add a \"data axis to SRS axis "
"mapping\" concept, which is a bit similar to what is done in WCS "
"DescribeCoverage response to explain how the SRS axis map to the grid "
"axis of a coverage"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:295
msgid ""
"Extract from "
"`https://docs.geoserver.org/stable/en/user/extensions/wcs20eo/index.html "
"<https://docs.geoserver.org/stable/en/user/extensions/wcs20eo/index.html>`__"
" for a coverage that uses EPSG:4326"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:308
msgid ""
"A similar mapping is added to define how the 'x' and 'y' components in "
"the geotransform matrix or in a OGRGeometry map to the axis defined by "
"the CRS definition."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:312
msgid "Such mapping is given by a new method in OGRSpatialReference"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:318
msgid ""
"To explain its semantics, imagine that it return 2,-1,3. That is "
"interpreted as:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:321
msgid "2: the first axis of the CRS maps to the second axis of the data"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:322
msgid ""
"-1: the second axis of the CRS maps to the first axis of the data, with "
"values negated"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:324
msgid "3: the third axis of the CRS maps to the third axis of the data"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:326
msgid ""
"This is similar to the PROJ axisswap operation: "
"`https://proj4.org/operations/conversions/axisswap.html "
"<https://proj4.org/operations/conversions/axisswap.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:329
msgid ""
"By default, on a newly create OGRSpatialReference object, "
"GetDataAxisToSRSAxisMapping() returns the identity 1,2[,3], that is, "
"conform to the axis order defined by the authority."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:333
msgid ""
"As all GDAL and a vast majority of OGR drivers depend on using the \"GIS "
"axis mapping\", a method SetAxisMappingStrategy( "
"OAMS_TRADITIONAL_GIS_ORDER or OAMS_AUTHORITY_COMPLIANT or OAMS_CUSTOM ) "
"is added to make their job of specifying the axis mapping easier;"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:338
msgid "OAMS_TRADITIONAL_GIS_ORDER means:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:340
msgid "for geographic 2D CRS,"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:342
msgid ""
"for Latitude NORTH, Longitude EAST (such as EPSG:4326), "
"GetDataAxisToSRSAxisMapping() returns {2,1}, meaning that the data order "
"is longitude, latitude"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:345
msgid "for Longitude EAST, Latitude NORTH (such as OGC:CRS84), returns {1,2}"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:348
msgid "for projected CRS,"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:350
msgid "for EAST, NORTH (ie most projected CRS), return {1,2}"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:351
msgid "for NORTH, EAST, return {2,1}"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:352
msgid ""
"for North Pole CRS, with East/SOUTH, North/SOUTH, such as EPSG:5041 "
"(\"WGS 84 / UPS North (E,N)\"), would return {1,2}"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:354
msgid ""
"for North Pole CRS, with northing/SOUTH, easting/SOUTH, such as "
"EPSG:32661 (\"WGS 84 / UPS North (N,E)\"), would return {2,1}"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:356
msgid "similarly for South Pole CRS"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:357
msgid "for all other cases, return {1,2}"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:359
msgid ""
"OGRCreateCoordinateTransformation() now honors the data axis to srs axis "
"mapping."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:362
msgid ""
"Note: contrary to what I indicated in a previous email, gdaltransform "
"behavior is unchanged, since internally the GDALTransform mechanism "
"forces the GIS friendly order."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:366
msgid ""
"Raster datasets are modified to call "
"SetAxisMappingStrategy(OAMS_TRADITIONAL_GIS_ORDER) on the "
"OGRSpatialReference\\* they return, and assumes it in SetSpatialRef() "
"(assumed and unchecked for now)"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:371
msgid ""
"Vector layers mostly all call "
"SetAxisMappingStrategy(OAMS_TRADITIONAL_GIS_ORDER) on the "
"OGRSpatialReference\\* returned by GetSpatialRef(). In the case of the "
"GML driver, if the user defines the INVERT_AXIS_ORDER_IF_LAT_LONG open "
"option, axis swapping is not done (as previously) and the "
"AUTHORITY_COMPLIANT strategy is used. ICreateLayer() when receiving a "
"OGRSpatialReference\\* may decide (and most will do it) to change the "
"axis mapping strategy. That is: if it receives a OGRSpatialReference with"
" AUTHORITY_COMPLIANT order, it may decide to switch to "
"TRADITIONAL_GIS_ORDER and GetSpatialRef()::GetDataAxisToSRSAxisMapping() "
"will reflect that. ogr2ogr is modified to do the geometry axis swapping "
"in that case."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:384
msgid ""
"Related to that change, WKT 1 export now always return the AXIS element, "
"and EPSG:xxxx thus behaves identically to EPSGA:xxxx"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:387
msgid ""
"So a summary view of this approach is that in the formal SRS definition, "
"we no longer do derogations regarding axis order, but we add an "
"additional interface to describe how we actually make our match match "
"with the SRS definition."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:393
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:158
msgid "Driver changes"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:395
msgid ""
"Raster drivers that returned / accepted a SRS as a WKT string through the"
" GetProjectionRef(), SetProjection(), GetGCPProjection() and SetGCPs() "
"methods have been upgraded to use the new virtual methods, in most cases "
"by using the compatibility layer."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:400
msgid ""
"The GDALPamDataset (PAM .aux.xml files) and the GDAL VRT drivers have "
"been fully upgraded to support the new interfaces, and "
"serialize/deserialize the data axis to SRS axis mapping values."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:404
msgid ""
"The GeoPackage driver now fully supports the official \"gpkg_crs_wkt\" "
"extension used to store WKT 2 string definitions in the "
"gpkg_spatial_ref_sys table. The driver attempts at not using the "
"extension when SRS can be encoded as WKT1 strings, and will automatically"
" add the \"definition_12_063\" column to an existing gpkg_spatial_ref_sys"
" table if a SRS requiring WKT2 (typically a Geographic 3D CRS) is "
"inserted."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:415
msgid ""
"gdalinfo and ogrinfo reports the data axis to CRS axis mapping whenever a"
" CRS is reported. They will also output WKT2_2018 by default, unless "
"\"-wkt_format wkt1\" is specified."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:447
msgid ""
"gdalwarp, ogr2ogr and gdaltransform have gained a -ct switch that can be "
"used by advanced users to specify a coordinate operation, either as a "
"PROJ string (generally a +proj=pipeline), or a WKT coordinate "
"operation/concatenated operation, as explained in the above "
"\"OGRCoordinateTransformation changes\" paragraph. Note: the pipeline "
"must take into account the axis order of the CRS, even if the underlying "
"raster/vector drivers use the \"GIS friendly\" order. For example "
"\"+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert "
"+xy_in=deg +xy_out=rad +step +proj=utm +zone=31 +ellps=WGS84\" when "
"transforming from EPSG:4326 to EPSG:32631."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:458
msgid ""
"gdalsrsinfo is enhanced to be able to specify the 2 new supported WKT "
"variants: WKT2_2015 and WKT2_2018. It will default to outputting "
"WKT2_2018"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:463
#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:184
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:403
msgid "SWIG binding changes"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:465
msgid ""
"The enhanced ExportToWkt() and OGRCoordinateTransformation methods are "
"available through SWIG bindings. May require additional typemaps for non-"
"Python languages (particularly for the support of 4D X,Y,Z,time "
"coordinates)"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:473
msgid ""
"This work is intended to be *mostly* backward compatible, yet inevitable "
"differences will be found. For example the WKT 1 and PROJ string export "
"has been completely rewritten in PROJ, and so while being hopefully "
"equivalent to what GDAL 2.4 or earlier generated, this is not strictly "
"identical: number of significant digits, order of PROJ parameters, "
"rounding, etc etc..."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:480
msgid "MIGRATION_GUIDE.TXT has been updated to reflect some differences:"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:482
msgid "OSRImportFromEPSG() takes into account official axis order."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:483
msgid ""
"removal of OPTGetProjectionMethods(), OPTGetParameterList() and "
"OPTGetParameterInfo() No equivalent."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:485
msgid ""
"removal of OSRFixup() and OSRFixupOrdering(): no longer needed since "
"objects constructed are always valid"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:487
msgid ""
"removal of OSRStripCTParms(). Use OSRExportToWktEx() instead with the "
"FORMAT=SQSQL option"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:489
msgid "exportToWkt() outputs AXIS nodes"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:490
msgid ""
"OSRIsSame(): now takes into account data axis to CRS axis mapping, unless"
" IGNORE_DATA_AXIS_TO_SRS_AXIS_MAPPING=YES is set as an option to "
"OSRIsSameEx()"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:493
msgid ""
"ogr_srs_api.h: SRS_WKT_WGS84 macro is no longer declared by default since"
" WKT without AXIS is too ambiguous. Preferred remediation: use "
"SRS_WKT_WGS84_LAT_LONG. Or #define USE_DEPRECATED_SRS_WKT_WGS84 before "
"including ogr_srs_api.h"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:498
msgid ""
"Out-of-tree raster drivers will be impacted by the introduction of the "
"new virtual methods GetSpatialRef(), SetSpatialRef(), GetGCPSpatialRef() "
"and SetGCPs(..., const OGRSpatialReference\\* poSRS), and the removal of "
"their older equivalents using WKT strings instead of a "
"OGRSpatialReference\\* instance."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:507
msgid ""
"New methods have been documented, and documentation of existing methods "
"has been changed when appropriate during the development. That said, a "
"more thorough pass will be needed. The tutorials will also have to be "
"updated."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:515
msgid ""
"The autotest suite has been adapted in a number of places since the "
"expected results have changed for a number of reasons (AXIS node exported"
" in WKT, differences in WKT and PROJ string generation). New tests have "
"been added for the new capabilities."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:520
msgid ""
"It should be noted that autotest not necessarily checks everything, and "
"issues have been discovered and fixed through manual testing. The "
"introduction of the \"data axis to CRS axis mapping\" concept is also "
"quite error prone, as it requires setting the OAMS_TRADITIONAL_GIS_ORDER "
"strategy in a lot of different places."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:526
msgid ""
"So users and developers are kindly invited to thoroughly test GDAL once "
"this work has landed in master."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:532
msgid ""
"Done by Even Rouault, `Spatialys <http://www.spatialys.com>`__. Available"
" per `PR 1185 <https://github.com/OSGeo/gdal/pull/1185>`__ Funded through"
" `gdalbarn <https://gdalbarn.com/>`__ sponsoring."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:536
msgid ""
"While it is provided as a multiple commit for \"\"\"easier\"\"\" review, "
"it will be probably squashed in a single commit for inclusion in master, "
"as intermediate steps are not all buildable, due to PROJ symbol renames "
"having occurred during the development, which would break bisectability."
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:544
msgid "Adopted with +1 from PSC members HowardB, JukkaR, DanielM and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:547
msgid "Modifications"
msgstr ""

#: ../../source/development/rfc/rfc73_proj6_wkt2_srsbarn.rst:549
msgid "2019-May-02: change mentions of GDAL 2.5 to GDAL 3.0"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:5
msgid "RFC 74: Migrate gdal.org to RTD-style Sphinx infrastructure"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:10
msgid "howard@hobu.co"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:11
msgid "2019-May-19"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:12
msgid "*Adopted*"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:18
msgid ""
"The document proposes migrating the GDAL documentation from a Doxygen to "
"`Sphinx <http://www.sphinx-doc.org/en/master/>`__ in `ReadTheDocs "
"<https://readthedocs.org>`__ format."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:25
msgid ""
"Casual contribution to the GDAL documentation is challenging. Wiki-style "
"contribution is possible through the Trac instance, but that requires "
"getting an OSGeo login, which is a high bar, and the Trac information is "
"disconnected from the primary documentation. Other projects such as PROJ "
"and `MapServer <https://mapserver.org>`__ have seen significant uptick in"
" contributed documentation by adopting Sphinx-based systems, and we hope "
"the adoption of this approach for GDAL will ignite a renaissance of "
"documentation contribution as it did for those projects."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:34
msgid ""
"The current approach has some significant deficiencies that have not been"
" overcome by waiting for new versions of Doxygen to arrive. These "
"include:"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:38
msgid ""
"The Doxygen build buries the source of the documentation deep into the "
"source tree, which makes it hard to find where to properly add "
"information."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:41
msgid ""
"The structure of the website is indirect from the source code that "
"creates it."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:43
msgid ""
"New features such as convenient mobile-friendly styling, alternative "
"serializations such as PDF, and tighter API and user-level documentation "
"integration are not within easy reach."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:46
msgid ""
"Editing of raw HTML means that convenient output of other serialization "
"types, such as PDF, Windows Compiled Help, or manpage output is "
"challenging."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:53
msgid ""
"The GDAL team will refactor the GDAL.org website to be based on Sphinx "
"with the following properties:"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:56
msgid "Convert the bulk of the existing documentation to reStructuredText"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:57
msgid ""
"Adapt the `ReadTheDocs theme <https://sphinx-rtd-"
"theme.readthedocs.io/en/stable/>`__"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:59
msgid ""
"Apply an \"Edit this Page on GitHub\" link to every page on the site for "
"convenient contribution"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:61
msgid ""
"Utilize `GitHub Pages <https://pages.github.com/>`__ to host gdal.org, "
"with updates being regenerated and committed to a repository by `Azure "
"Pipelines <https://dev.azure.com/osgeo/gdal/_build>`__ continuous "
"integration."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:66
msgid ""
"Output a PDF serialization of the website for documentation version "
"posterity."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:70
msgid "Considerations"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:72
msgid ""
"Numerous hard links to driver pages exist in source code. Care must be "
"taken to attempt to preserve these links as well as possible with "
"redirects to adapt to any new organization."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:75
msgid ""
"Porting of existing Trac content to the new data structure will allow "
"decommission of that piece of infrastructure. Significant content porting"
" investment may be required to achieve this."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:78
msgid ""
"Doxygen API-style documents are still valuable, and we propose to keep a "
"rendering of them at ``/doxygen`` for users who wish to continue with "
"that approach. Internal API documentation will continue to use Doxygen, "
"and it will be reflected into the Sphinx website using the Breathe "
"capability."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:83
msgid ""
"Initial content organization will attempt to mimic the existing website "
"as well as can be achieved, but no requirement to maintain adherence to "
"the previous structure is required if other organization approaches are "
"more convenient given the features and capabilities of Sphinx."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:88
msgid ""
"Existing translations will not be ported. Adaptation and continuation of "
"porting of translations is beyond the scope of this RFC, but there are "
"capabilities for managing translations in Sphinx (MapServer.org provides "
"an excellent example), and follow-on contributors can keep moving forward"
" with the architecture once the initial effort is complete."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:94
msgid ""
"Content may be missed during the transition. Please file tickets in "
"GitHub for any items that became more difficult to find or are gone after"
" the transition."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:99
msgid "Logistics"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:101
msgid ""
"A current example of the site lives at `https://gdal.dev "
"<https://gdal.dev>`__ This example is set to noindex. Once the RFC is "
"passed, adaptation of the infrastructure that builds it will be migrated "
"to `https://gdal.org <https://gdal.org>`__ and the example website will "
"be completely decommissioned. Currently, `https://github.com/hobu/gdal "
"<https://github.com/hobu/gdal>`__ ``doc-sprint`` branch is the fork that "
"drives this content. It will be squash-merged to the main repository at "
"the passing of the RFC."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:112
msgid "`issue #1204 <https://github.com/OSGeo/gdal/issues/1204>`__."
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:113
msgid ""
"`2019 OSGeo Community Code Sprint "
"<https://wiki.osgeo.org/wiki/OSGeo_Community_Sprint_2019>`__"
msgstr ""

#: ../../source/development/rfc/rfc74_sphinx.rst:119
msgid "+1 from KurtS, HowardB, DanielM, NormanB, JukkaR and EvenR."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:5
msgid "RFC 75: Multidimensional arrays"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:10
msgid "2019-May-24"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:11
#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:11
msgid "Last updated:"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:11
msgid "2019-Jul-22"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:12
msgid "Implemented in GDAL 3.1"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:18
msgid ""
"This document describes the addition of read/write support for "
"multidimensional arrays, in particular of dimension 3 or above, in GDAL "
"core and a few select drivers."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:24
msgid ""
"Multidimensional arrays (also known as hypercubes) are a way of mоdelling"
" spatio-temporal (time series of 2D raster) or spatio-vertical-temporal "
"(2D + Z dimension + time dimension) data which are becoming increasingly "
"more available. GDAL current raster model is however strongly 2D "
"oriented. A number of drivers, such as netCDF, HDF4, HDF5, work around "
"that limitation by using raster bands or subdatasets to expose muliple 2D"
" slices of what is intrinsically a N>2 Multidimensional dataset. It is "
"desirable to have a proper API, and driver support, to be able to expose "
"those multidimensional arrays as such, and be able to perform slice and "
"trim operations on them."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:34
msgid ""
"That topic had already been discussed in the past, in particular in this "
"`mailing list thread <https://lists.osgeo.org/pipermail/gdal-"
"dev/2017-October/047472.html>`_"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:40
msgid ""
"A lot of existing GDAL raster API are strongly 2D oriented. Rather than "
"upgrading all those API, and driver code, to be ready for N arbitrary "
"dimensions, which would be a enormous effort for the benefit of only a "
"small fraction of drivers, we propose to add a new dedicated API to "
"support multidimensional arrays. We also want to support hierarchical "
"structure of data as found in the `HDF5 format and data model "
"<https://portal.opengeospatial.org/files/81716>`_. This model can "
"encompass the needs of other formats/drivers that have multidimensional "
"capabilities such as HDF4, netCDF, GRIB, WCS. Therefore the proposed API "
"will be strongly inspired by the API of the HDF5 library itself."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:51
msgid "Data model"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:52
msgid ""
"The data model is described in: "
"https://github.com/rouault/gdal/blob/rfc75/gdal/doc/source/user/multidim_raster_data_model.rst"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:58
msgid ""
"New classes and methods will be added. See "
"https://github.com/rouault/gdal/blob/rfc75/gdal/gcore/gdal_priv.h#L1715"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:61
msgid ""
"A new driver capability will be added for drivers supporting "
"multidimensional rasters:"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:69
msgid ""
"A new open flag, ``GDAL_OF_MULTIDIM_RASTER``, for :cpp:func:`GDALOpenEx` "
"will be added. When this is specified, drivers supporting "
"multidimensional raster will return a root GDALGroup. Otherwise their "
"current traditional 2D mode will still be used."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:74
msgid ""
"New creation options metadata items are added to documents "
"multidimensional dataset, group, dimension, array and attribute creation "
"options."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:104
msgid "Examples with the netCDF driver:"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:154
msgid ""
"All C++ methods are mapped to the C API. See "
"https://github.com/rouault/gdal/blob/rfc75/gdal/gcore/gdal.h#L1397"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:160
msgid "The MEM driver will implement read and write support."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:161
msgid ""
"The VRT driver will allow extraction of 2D slices from multidimensional "
"drivers to 2D/classic drivers, as well as "
"multidimensional->multidimensional slicing/trimming"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:164
msgid "The netCDF driver will implement read and write support."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:165
msgid "The HDF4 and HDF5 drivers will implement read support."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:166
msgid ""
"The GRIB driver will implement read support (exposing X,Y,Time arrays for"
" GRIB messages only differing by timestamp)"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:170
msgid "New Utilities"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:172
msgid ""
"A new gdalmdiminfo utility is added to report the hierarchical structure "
"and content. Its output format is JSON. See "
"https://github.com/rouault/gdal/blob/rfc75/gdal/doc/source/programs/gdalmdiminfo.rst"
" for its documentation."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:176
msgid ""
"A new gdalmdimtranslate utility is added to convert multidimensional "
"raster between different formats, and/or can perform selective conversion"
" of specific arrays and groups, and/or subsetting operations. It can also"
" do extraction of 2D slices from multidimensional drivers to 2D/classic "
"drivers. See "
"https://github.com/rouault/gdal/blob/rfc75/gdal/doc/source/programs/gdalmdimtranslate.rst"
" for its documentation."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:186
msgid ""
"The C API is mapped to the SWIG bindings. The scope is complete for the "
"Python bindings. Other languages would need to add missing typemaps, but "
"this is not in the scope of the work of this RFC. For Python bindings, "
"NumPy integration is done."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:194
msgid ""
"This is intended to be a preliminary work on that topic. While the aim is"
" for it to be be usable for the defined scope, it will probably require "
"future enhancements to fill functional and/or performance gaps."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:198
msgid "No block cache mechanism (not sure this is needed)"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:199
msgid "No sub-pixel requests, or non-nearest subsampling"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:200
msgid ""
"Upgrade of WCS driver or other drivers with potential multidimensional "
"capabilities are not part of this RFC."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:202
msgid "SWIG bindings: full scope only for Python bindings."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:207
msgid "No backward incompatibility. Only API and utility additions."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:212
msgid ""
"Data model: "
"https://github.com/rouault/gdal/blob/rfc75/gdal/doc/source/user/multidim_raster_data_model.rst"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:213
msgid ""
"API tutorial: "
"https://github.com/rouault/gdal/blob/rfc75/gdal/doc/source/tutorials/multidimensional_api_tut.rst"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:214
msgid ""
"gdalmdiminfo: "
"https://github.com/rouault/gdal/blob/rfc75/gdal/doc/source/programs/gdalmdiminfo.rst"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:215
msgid ""
"gdalmdimtranslate: "
"https://github.com/rouault/gdal/blob/rfc75/gdal/doc/source/programs/gdalmdimtranslate.rst"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:216
msgid ""
"VRT driver: "
"https://github.com/rouault/gdal/blob/rfc75/gdal/doc/source/drivers/raster/vrt_multidimensional.rst"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:221
msgid ""
"The gdalautotest suite is extended to test the modified drivers and the "
"new utilities."
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:227
msgid ""
"The implementation will be done by Even Rouault. A preliminary "
"implementation is available at https://github.com/OSGeo/gdal/pull/1704"
msgstr ""

#: ../../source/development/rfc/rfc75_multidimensional_arrays.rst:234
msgid "+1 from HowardB, NormanB and EvenR"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:5
msgid "RFC 76: OGR Python drivers"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:10
msgid "2019-Nov-5"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:11
msgid "2019-Nov-15"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:12
msgid "Adopted, implemented in GDAL 3.1"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:18
msgid "This RFC adds the capability to write OGR/vector drivers in Python."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:23
msgid ""
"For some use cases that do not require lighting speed, or to deal with "
"very niche formats (possibly in house format), it might be faster and "
"more efficient to write a vector driver in Python rather than a GDAL C++ "
"driver as currently required, or an ad-hoc converter."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:30
msgid ""
"QGIS has now a way to create Python-based providers such as in "
"https://github.com/qgis/QGIS/blob/master/tests/src/python/provider_python.py"
" Having a way to do in GDAL itself also allows the rest of GDAL/OGR based"
" tools to use the OGR Python driver."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:36
msgid "How does that work ?"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:39
msgid "Driver registration"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:41
msgid ""
"The driver registration mechanism is extended to look for .py scripts in "
"a dedicated directory:"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:44
msgid ""
"the directory pointed by the ``GDAL_PYTHON_DRIVER_PATH`` configuration "
"option (there may be several paths separated by `:` on Unix or `;` on "
"Windows)"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:46
msgid ""
"if not defined, the directory pointed by the ``GDAL_DRIVER_PATH`` "
"configuration option."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:48
msgid ""
"if not defined, in the directory (hardcoded at compilation time on Unix "
"builds) where native plugins are located."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:51
msgid "Those Python script must set in their first lines at least 2 directives:"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:53
msgid "``# gdal: DRIVER_NAME = \"short_name\"``"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:54
msgid ""
"``# gdal: DRIVER_SUPPORTED_API_VERSION = 1`` . Currently only 1 "
"supported. If the interface changed in a backward incompatible way, we "
"would increment internally the supported API version number. This item "
"enables us to check if we are able to \"safely\" load a Python driver. If"
" a Python driver would support several API versions (not clear if that's "
"really possible at that point), it might use an array syntax to indicate "
"that, like ``[1,2]``"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:60
msgid "``# gdal: DRIVER_DCAP_VECTOR = \"YES\"``"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:61
msgid "``# gdal: DRIVER_DMD_LONGNAME = \"my super plugin\"``"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:63
msgid ""
"Optional metadata such as ``# gdal: DRIVER_DMD_EXTENSIONS`` or ``# gdal: "
"DRIVER_DMD_HELPTOPIC`` can be defined (basically, any driver metadata key"
" string prefixed by ``# gdal: DRIVER_``"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:67
msgid ""
"These directives will be parsed in a pure textual way, without invocation"
" of the Python interpreter, both for efficiency consideration and also "
"because we want to delay the research or launch of the Python interpreter"
" as much as possible (the typical use case if GDAL used by QGIS: we want "
"to make sure that QGIS has itself started Python, to reuse that Python "
"interpreter)"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:73
msgid ""
"From the short metadata, the driver registration code can instantiate "
"GDALDriver C++ objects. When the Identify() or Open() method is invoked "
"on that object, the C++ code will:"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:77
msgid ""
"if not already done, find Python symbols, or start Python (see below "
"paragraph for more details)"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:79
msgid "if not already done, load the .py file as a Python module"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:80
msgid ""
"if not already done, instantiate an instance of the Python class of the "
"module deriving from ``gdal_python_driver.BaseDriver``"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:82
msgid ""
"call the  ``identify`` and ``open`` method depending on the originated "
"API call."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:84
msgid ""
"The ``open`` method will return a Python ``BaseDataset`` object with "
"required and optional methods that will be invoked by the corresponding "
"GDAL API calls. And likewise for the ``BaseLayer`` object. See the "
"example_."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:89
msgid "Connection with the Python interpreter"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:91
msgid ""
"The logic will be shared with the VRT pixel functions written in Python "
"functionality It relies on runtime linking to the Python symbols already "
"available in the process (for example the python executable or a binary "
"embedding Python and using GDAL, such as QGIS), or loading of the Python "
"library in case no Python symbols are found, rather than compile time "
"linking. The reason is that we do not know in advance with which Python "
"version GDAL can potentially be linked, and we do not want "
"gdal.so/gdal.dll to be explicitly linked with a particular Python "
"library."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:100
msgid "This is both embedding and extending Python."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:102
msgid "The steps are:"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:104
msgid ""
"through dlopen() + dlsym() on Unix and "
"EnumProcessModules()+GetProcAddress() on Windows, look for Python "
"symbols. If found, use it. This is for example the case if GDAL is used "
"from a Python module (GDAL Python bindings, rasterio, etc.) or an "
"application like QGIS that starts a Python interpreter."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:108
msgid ""
"otherwise, look for the PYTHONSO environment variable that should point "
"to a pythonX.Y[...].so/.dll"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:110
msgid ""
"otherwise, look for the python binary in the path and try to identify the"
" correspond Python .so/.dll"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:112
msgid ""
"otherwise, try to load with dlopen()/LoadLibrary() well-known names of "
"Python .so/.dll"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:116
msgid "Impacts on GDAL core"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:118
msgid ""
"They are minimal. The GDALAllRegister() method has an added call to "
"GDALDriverManager::AutoLoadPythonDrivers() that implements the above "
"mentioned logic. The GDALDriver class has been extended to support a new "
"function pointer, IdentifyEx(), which is used by the C++ shim that loads "
"the Python code."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:127
msgid ""
"This extended IdentifyEx() function pointer, which adds the GDALDriver* "
"argument, is used in priority by GDALIdentify() and GDALOpen() methods. "
"The need for that is purely boring. For normal C++ drivers, there is no "
"need to pass the driver, as there is a one-to-one correspondence between "
"a driver and the function that implements the driver. But for the Python "
"driver, there is a single C++ method that does the interface with the "
"Python Identify() method of several Python drivers, hence the need of a "
"GDALDriver* argument to forward the call to the appropriate driver."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:139
msgid "Example of such a driver"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:141
msgid ""
"Note that the prefixing by the driver name in the connection string is "
"absolutely not a requirement, but something specific to this particular "
"driver which is a bit artificial. The CityJSON driver mentioned below "
"does not need it."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:356
msgid "Other examples:"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:358
msgid ""
"a PASSTHROUGH driver that forwards calls to the GDAL SWIG Python API: "
"https://github.com/OSGeo/gdal/blob/master/gdal/examples/pydrivers/ogr_PASSTHROUGH.py"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:360
msgid ""
"a driver implemented a simple parsing of `CityJSON "
"<https://www.cityjson.org/>`_: "
"https://github.com/OSGeo/gdal/blob/master/gdal/examples/pydrivers/ogr_CityJSON.py"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:364
msgid "Limitations and scope"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:366
msgid "Vector and read-only for now. This could later be extended of course."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:368
msgid ""
"No connection between the Python code of the plugin and the OGR Python "
"API that is built on top of SWIG. This does not appear to be doable in a "
"reasonable way. Nothing prevents people from using the GDAL/OGR/OSR "
"Python API but the objects exchanged between the OGR core and the Python "
"code will not be OGR Python SWIG objects. A typical example is that a "
"plugin will return its CRS as a string (WKT, PROJSON, or deprecated "
"PROJ.4 string), but not as a osgeo.osr.SpatialReference object. But it is"
" possible to use the osgeo.osr.SpatialReference API to generate this WKT "
"string."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:378
msgid ""
"This RFC does not try to cover the management of Python dependencies. It "
"is up to the user to do the needed \"pip install\" or whatever Python "
"package management solution it uses."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:382
msgid ""
"The Python \"Global Interpreter Lock\" is held in the Python drivers, as "
"required for safe use of Python. Consequently scaling of such drivers is "
"limited."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:385
msgid ""
"Given the above restrictions, this will remain an \"experimental\" "
"feature and the GDAL project will not accept such Python drivers to be "
"included in the GDAL repository. This is similar to the situation of the "
"QGIS project that allows Python plugins outside of the main QGIS "
"repository. If a QGIS plugin want to be moved into the main repository, "
"it has to be converted to C++. The rationale for this is that the "
"correctness of the Python code can mostly be checked at runtime, whereas "
"C++ benefits from static analysis (at compile time, and other checkers). "
"In the context of GDAL, this rationale also applies. GDAL drivers are "
"also stress-tested by the OSS Fuzz infrastructure, and that requires them"
" to be written in C++."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:396
msgid ""
"The interface between the C++ and Python code might break between GDAL "
"feature releases. In that case we will increment the expected API version"
" number to avoid loading incompatible Python drivers. We will likely not "
"make any effort to be able to deal with plugins of incompatible "
"(previous) API version."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:408
msgid "Security implications"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:410
msgid ""
"Similar to the existing native code plugin mechanism of GDAL. If the user"
" defines the GDAL_PYTHON_DRIVER_PATH environment variable or "
"GDAL_DRIVER_PATH, annd put .py scripts in them (or in "
"{prefix}/lib/gdalplugins/python as a fallback), they will be executed."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:415
msgid ""
"However, opening a .py file with GDALOpen() or similar mechanisms will "
"not lead to its execution, so this is safe for normal GDAL usage."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:418
msgid ""
"The GDAL_NO_AUTOLOAD compile time #define, already used to disable "
"loading of native plugins, is also honoured to disable the loading of "
"Python plugins."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:422
msgid "Performance impact"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:424
msgid ""
"If no .py script exists in the researched location, the performance "
"impact on GDALAllRegister() should be within the noise."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:430
msgid "No backward incompatibility. Only functionality addition."
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:435
msgid ""
"A tutorial will be added to explain how to write such a Python driver: "
"https://github.com/rouault/gdal/blob/pythondrivers/gdal/doc/source/tutorials/vector_python_driver.rst"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:441
msgid ""
"The gdalautotest suite will be extended with the above test Python "
"driver, and a few error cases: "
"https://github.com/rouault/gdal/blob/pythondrivers/autotest/ogr/ogr_pythondrivers.py"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:446
msgid "Previous discussions"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:448
msgid "This topic has been discussed in the past in :"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:450
msgid "https://lists.osgeo.org/pipermail/gdal-dev/2017-April/thread.html#46526"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:451
msgid "https://lists.osgeo.org/pipermail/gdal-dev/2018-November/thread.html#49294"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:456
msgid ""
"A candidate implementation is available at in "
"https://github.com/rouault/gdal/tree/pythondrivers"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:459
msgid "https://github.com/OSGeo/gdal/compare/master...rouault:pythondrivers"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:464
msgid "+1 from EvenR, JukkaR, MateuzL, DanielM"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:465
msgid "-0 from SeanG"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:466
msgid "+0 from HowardB"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:469
msgid "Credits"
msgstr ""

#: ../../source/development/rfc/rfc76_ogrpythondrivers.rst:471
msgid "Sponsored by OpenGeoGroep"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:5
msgid "RFC 7: Use VSILFILE for VSI*L Functions"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:7
msgid "Author: Even Rouault (Eric Doenges is original author)"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:9
msgid "Contact: even dot rouault at spatialys.com, Eric.Doenges@gmx.net"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:16
msgid ""
"To change the API for the VSI*L family of functions to use a new data-"
"type VSILFILE instead of the current FILE."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:20
msgid "Background, Rationale"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:22
msgid ""
"Currently, GDAL offers two APIs to abstract file access functions "
"(referred to as VSI\\* and VSI\\ *L in this document). Both APIs claim to"
" operate on FILE pointers; however, the VSI*\\ L functions can only "
"operate on FILE pointers created by the VSIFOpenL function. This is "
"because VSIFOpenL returns a pointer to an internal C++ class typecast to "
"a FILE pointer, not an actual FILE pointer. This makes it impossible for "
"the compiler to warn when the VSI\\* and VSI*L functions are "
"inappropriately mixed."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:32
msgid "Proposed Fix"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:34
msgid ""
"A new opaque data-type VSILFILE shall be declared. All VSI\\ *L functions"
" shall be changed to use this new type instead of FILE. Additionally, any"
" GDAL code that uses the VSI*\\ L functions must be changed to use this "
"data-type as well."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:40
msgid "RawRasterBand changes"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:42
msgid ""
"The 2 constructors are changed to accept a void\\* fpRaw instead of a "
"FILE\\*"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:44
msgid ""
"A new member VSILFILE\\* fpRawL is added. The existing member FILE\\* "
"fpRaw is kept. The constructors will set the adequate member according to"
" the value of the bIsVSIL parameter."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:47
msgid "A new method VSILFILE\\* GetFPL() is added."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:48
msgid ""
"The old FILE\\* GetFP() is adapted to have same behavior as before (can "
"return a standard FILE handle or a VSI*L handle depending on the handle "
"that was passed to the constructor)"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:52
msgid ""
"Those changes are meant to minimize the need for casting when using "
"RawRasterBand. Backward API compatibility is preserved."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:56
msgid "Compatibility Issues, Transition timeline"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:58
msgid ""
"In order to allow the compiler to detect inappropriate parameters passed "
"to any of the VSI*L functions, VSILFILE will be declared with the help of"
" an empty forward declaration, i.e."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:66
msgid "with the struct \\_VSILFILE itself left undefined."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:68
msgid ""
"However, this would break source compatibility for any existing code "
"using the VSI*L API. Therefore, for now, VSILFILE is defined to be an "
"alias of FILE, unless the VSIL_STRICT_ENFORCE macro is defined."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:80
msgid ""
"In a future release (GDAL 2.0 ?), the behavior will be changed to enforce"
" the new strong typing."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:83
msgid ""
"Any future development done since the adoption of this RFC should use "
"VSILFILE when dealing with the VSIF*L API."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:87
msgid "Questions"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:89
msgid "Should we define VSIL_STRICT_ENFORCE by default when DEBUG is defined ?"
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:92
msgid ""
"This would make life easier for GDAL developers to use the appropriate "
"typing, but not affect API/ABI when using release mode."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:98
msgid ""
"The whole source tree ( port, gcore, frmts, ogr, swig/include ) will be "
"altered adequatly so that the compilation works in VSIL_STRICT_ENFORCE "
"mode. Ticket #3799 contains a patch with the implementation. The "
"compilation doesn't add any new warning. The autotest suite still works "
"after this change."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:104
msgid ""
"The GeoRaster and JPIPKAK drivers have been modified during the "
"conversion process, but I'm not in position to compile them. Testing "
"appreciated. All other drivers that have been altered in the conversion "
"process have been compiled."
msgstr ""

#: ../../source/development/rfc/rfc7_vsilapi.rst:109
msgid ""
"In the conversion process, a misuse of POSIX FILE API with a large file "
"handler was discovered in the ceos2 driver, but the function happened to "
"be unusued."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:5
msgid "RFC 8: Developer Guidelines"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:11
msgid "Status: draft"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:16
msgid ""
"This document is intended to document developer practices for the "
"GDAL/OGR project. It will be an evolving document."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:22
msgid ""
"GDAL strives to be widely portable to 32bit and 64bit computing "
"environments. It accomplishes this in a number of ways - avoid compiler "
"specific directives, avoiding new, but perhaps not widely available "
"aspects of C++, and most importantly by abstracting platform specific "
"operations in CPL functions in the gdal/port directory."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:28
msgid ""
"Generally speaking, where available CPL functions should be used in "
"preference to operating system functions for operations like memory "
"allocation, path parsing, filesystem io, multithreading functions, and "
"ODBC access."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:34
msgid "Variable Naming"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:36
msgid ""
"Much of the existing GDAL and OGR code uses an adapted Hungarian naming "
"convention. Use of this convention is not mandatory, but when maintaining"
" code using this convention it is desirable to continue adhering to it "
"with changes. Most importantly, please avoiding using it improperly as "
"that can be very confusing."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:42
msgid ""
"In Hungarian prefixing the prefix tells something about about the type, "
"and potentially semantics of a variable. The following are some prefixes "
"used in GDAL/OGR."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:46
msgid "*a*: array"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:47
msgid "*b*: C++ bool. Also used for ints with only TRUE/FALSE values in C."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:48
msgid "*by*: byte (GByte / unsigned char)."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:49
msgid "*df*: floating point value (double precision)"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:50
msgid "*e*: enumeration"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:51
msgid "*i*: integer number used as a zero based array or loop index."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:52
msgid "*f*: floating point value (single precision)"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:53
msgid "*h*: an opaque handle (such as GDALDatasetH)."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:54
msgid "*n*: integer number (size unspecified)"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:55
msgid "*o*: C++ object"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:56
msgid "*os*: CPLString"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:57
msgid "*p*: pointer"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:58
msgid "*psz*: pointer to a zero terminated string. (eg. \"char \\*pszName;\")"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:59
msgid "*sz*: zero terminated string (eg.\" char szName[100];\")"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:60
msgid ""
"TODO: What about constants (either global or global to a file)? Propose: "
"*k*"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:63
msgid ""
"Prefix can be stacked. The following are some examples of meaningful "
"variables."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:66
msgid "\\*char !\\*\\ *papszTokens*: Pointer to the an array of strings."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:67
msgid "\\*int *panBands*: Pointer to the first element of an array of numbers."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:69
msgid ""
"\\*double *padfScanline*: Pointer to the first element of an array of "
"doubles."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:71
msgid "\\*double *pdfMeanRet*: Pointer to a single double."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:72
msgid "\\*GDALRasterBand *poBand*: Pointer to a single object."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:73
msgid "\\*GByte *pabyHeader*: Pointer to an array of bytes."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:75
msgid ""
"It may also be noted that the standard convention for variable names is "
"to capitalize each word in a variable name."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:79
msgid "Memory allocation"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:81
msgid ""
"As per `RFC 19: Safer memory allocation in GDAL "
"<./rfc19_safememalloc>`__, you can use VSIMalloc2(x, y) instead of doing "
"CPLMalloc(x \\* y) or VSIMalloc(x \\* y). VSIMalloc2 will detect "
"potential overflows in the multiplication and return a NULL pointer if it"
" happens. This can be useful in GDAL raster drivers where x and y are "
"related to the raster dimensions or raster block sizes. Similarly, "
"VSIMalloc3(x, y, z) can be used as a replacement for CPLMalloc(x \\* y "
"\\* z)."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:91
msgid "Headers, and Comment Blocks"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:96
msgid "Misc. Notes"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:98
msgid "Use lower case filenames."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:99
msgid "Use .cpp extension for C++ files (not .cc)."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:100
msgid "Avoid spaces or other special characters in file or directory names."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:101
msgid "Use 4 character indentation levels."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:102
msgid "Use spaces instead of hard tab characters in source code."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:103
msgid "Try to keep lines to 79 characters or less."
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:106
msgid "See also"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:108
msgid ""
"`http://erouault.blogspot.com/2016/01/software-quality-improvements-in-"
"gdal.html <http://erouault.blogspot.com/2016/01/software-quality-"
"improvements-in-gdal.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:109
msgid ""
"`https://travis-ci.org/OSGeo/gdal/builds <https://travis-"
"ci.org/OSGeo/gdal/builds>`__"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:110
msgid ""
"`https://ci.appveyor.com/project/OSGeo/gdal/history "
"<https://ci.appveyor.com/project/OSGeo/gdal/history>`__"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:111
msgid ""
"`https://travis-ci.org/rouault/gdal_coverage/builds <https://travis-"
"ci.org/rouault/gdal_coverage/builds>`__"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:112
msgid ""
"`https://ci.appveyor.com/project/rouault/gdal-coverage/history "
"<https://ci.appveyor.com/project/rouault/gdal-coverage/history>`__"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:113
msgid ""
"`https://gdalautotest-coverage-results.github.io/coverage_html/index.html"
" <https://gdalautotest-coverage-"
"results.github.io/coverage_html/index.html>`__"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:116
msgid "Python code"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:118
msgid ""
"All Python code in autotest, swig/python/scripts and swig/python/samples "
"should pass OK with the Pyflakes checker (version used currently: 0.8.1)."
" This is asserted by Travis-CI jobs"
msgstr ""

#: ../../source/development/rfc/rfc8_devguide.rst:121
msgid ""
"Python code should be written to be compatible with both Python 2 and "
"Python 3."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:5
msgid "RFC 9: GDAL Paid Maintainer Guidelines"
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:11
msgid "Status: Approved"
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:16
msgid ""
"To formalize guidelines for the work of maintainers paid out of GDAL "
"project sponsorship funds."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:20
msgid "Responsibilities"
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:22
msgid "Analyse and where possible fix bugs reported against GDAL."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:23
msgid "Run, review and extend the test suite (via buildbot, etc)."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:24
msgid "Maintain and extend documentation."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:25
msgid "Assist integrating new contributed features."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:26
msgid ""
"Help maintain project infrastructure (mailing lists, buildbot, source "
"control, etc)"
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:28
msgid "Provide user support on the project mailing lists, and in other venues."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:30
msgid "Develop new capabilities."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:32
msgid ""
"Bug fixing and maintenance should be focused on GDAL/OGR, but as needed "
"will extend into sub-projects such as libtiff, libgeotiff, Shapelib and "
"MITAB as long it is to serve a need of the GDAL/OGR project."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:36
msgid ""
"In order to provide reasonable response times the maintainer is expected "
"spend some time each week addressing new bugs and user support. If the "
"maintainer will be unavailable for an extended period of time (vacation, "
"etc) then the supervisor should be notified."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:42
msgid "Direction"
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:44
msgid ""
"The maintainer is generally subject to the project PSC. However, for day "
"to day decisions one PSC member will be designated as the supervisor for "
"the maintainer. This supervisor will prioritize work via email, bug "
"assignments, and IRC discussions."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:49
msgid ""
"The supervisor will try to keep the following in mind when prioritizing "
"tasks."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:52
msgid ""
"Bug reports, and support needs of Sponsors should be given higher "
"priority than other tasks."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:54
msgid ""
"Areas of focus identified by the PSC (ie. multi-threading, SWIG "
"scripting) should be given higher priority than other tasks."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:56
msgid "Bugs or needs that affect many users should have higher priority."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:57
msgid ""
"The maintainer should be used to take care of work that no one else is "
"willing and able to do (ie. fill the holes, rather than displacing "
"volunteers)"
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:60
msgid ""
"Try to avoid tieing up the maintainer on one big task for many weeks "
"unless directed by the PSC."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:62
msgid ""
"The maintainer should not be directed to do work for which someone else "
"is getting paid."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:65
msgid ""
"Substantial new development projects will only be taken on by the "
"maintainer with the direction of a PSC motion (or possibly an RFC "
"designating the maintainer to work on a change)."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:69
msgid ""
"Note that the maintainer and the maintainer supervisor are subject to the"
" normal RFC process for any substantial change to GDAL."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:73
msgid "Reporting"
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:75
msgid ""
"The maintainer will produce a brief bi-weekly report to the gdal-dev list"
" indicating tasks worked on, and a more detailed timesheet for the "
"supervisor."
msgstr ""

#: ../../source/development/rfc/rfc9_maintainer.rst:79
msgid ""
"This is intended to provide visibility into status, accomplishments, and "
"time allocation. It also gives an opportunity for the PSC to request a "
"\"course correction\" fairly promptly."
msgstr ""

