# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1998-2020
# This file is distributed under the same license as the GDAL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GDAL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-19 07:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/api/cpl.rst:5
msgid "Common Portability Library C API"
msgstr ""

#: ../../source/api/cpl.rst:8
msgid "cpl_conv.h"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/gdalwarp_cpp.rst
#: ../../source/api/gnm_cpp.rst ../../source/api/ogr_srs_api.rst
#: ../../source/api/ogrspatialref.rst ../../source/api/raster_c_api.rst
#: ../../source/api/vector_c_api.rst
msgid "Defines"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/gdal_alg.rst
#: ../../source/api/gdal_utils.rst ../../source/api/gdalwarp_cpp.rst
#: ../../source/api/gnm_cpp.rst ../../source/api/ogr_srs_api.rst
#: ../../source/api/ogrfeaturestyle_cpp.rst ../../source/api/raster_c_api.rst
#: ../../source/api/vector_c_api.rst
msgid "Typedefs"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/cpl_cpp.rst
#: ../../source/api/gdal_alg.rst ../../source/api/gdal_utils.rst
#: ../../source/api/gdalwarp_cpp.rst ../../source/api/ogr_srs_api.rst
#: ../../source/api/ogrspatialref.rst ../../source/api/raster_c_api.rst
#: ../../source/api/vector_c_api.rst
msgid "Functions"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/gdal_alg.rst
#: ../../source/api/gdaldataset_cpp.rst ../../source/api/gdalwarp_cpp.rst
#: ../../source/api/ogr_srs_api.rst ../../source/api/raster_c_api.rst
#: ../../source/api/vector_c_api.rst
msgid "Public Members"
msgstr ""

#: ../../source/api/cpl.rst:14
msgid "cpl_csv.h"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/gdal_alg.rst
#: ../../source/api/gdalwarp_cpp.rst ../../source/api/gnm_cpp.rst
#: ../../source/api/ogr_srs_api.rst ../../source/api/ogrfeaturestyle_cpp.rst
#: ../../source/api/raster_c_api.rst ../../source/api/vector_c_api.rst
msgid "Enums"
msgstr ""

#: ../../source/api/cpl.rst:20
msgid "cpl_error.h"
msgstr ""

#: ../../source/api/cpl.rst:26
msgid "cpl_http.h"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/gdalabstractmdarray_cpp.rst
#: ../../source/api/gdaldataset_cpp.rst ../../source/api/ogrgeometry_cpp.rst
msgid "Public Types"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/cpl_cpp.rst
#: ../../source/api/gdalabstractmdarray_cpp.rst
#: ../../source/api/gdalattribute_cpp.rst ../../source/api/gdaldataset_cpp.rst
#: ../../source/api/gdaldimension_cpp.rst ../../source/api/gdaldriver_cpp.rst
#: ../../source/api/gdalextendeddatatype_cpp.rst
#: ../../source/api/gdalgroup_cpp.rst ../../source/api/gdalmdarray_cpp.rst
#: ../../source/api/gdalrasterband_cpp.rst ../../source/api/gdalwarp_cpp.rst
#: ../../source/api/gnm_cpp.rst ../../source/api/ogrfeature_cpp.rst
#: ../../source/api/ogrfeaturestyle_cpp.rst
#: ../../source/api/ogrgeometry_cpp.rst ../../source/api/ogrlayer_cpp.rst
#: ../../source/api/ogrspatialref.rst ../../source/api/vector_c_api.rst
msgid "Public Functions"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/cpl_cpp.rst
#: ../../source/api/gdalwarp_cpp.rst ../../source/api/ogrfeaturestyle_cpp.rst
#: ../../source/api/ogrspatialref.rst
msgid "Private Members"
msgstr ""

#: ../../source/api/cpl.rst:32
msgid "cpl_minixml.h"
msgstr ""

#: ../../source/api/cpl.rst:38
msgid "cpl_multiproc.h"
msgstr ""

#: ../../source/api/cpl.rst:44
msgid "cpl_port.h"
msgstr ""

#: ../../source/api/cpl.rst:50
msgid "cpl_progress.h"
msgstr ""

#: ../../source/api/cpl.rst:56
msgid "cpl_string.h"
msgstr ""

#: ../../source/api/cpl.rst ../../source/api/cpl_cpp.rst
#: ../../source/api/gdalwarp_cpp.rst ../../source/api/gnm_cpp.rst
#: ../../source/api/ogrfeaturestyle_cpp.rst ../../source/api/ogrspatialref.rst
msgid "Private Functions"
msgstr ""

#: ../../source/api/cpl.rst:62
msgid "cpl_time.h"
msgstr ""

#: ../../source/api/cpl.rst:68
msgid "cpl_virtualmem.h"
msgstr ""

#: ../../source/api/cpl.rst:74
msgid "cpl_vsi_error.h"
msgstr ""

#: ../../source/api/cpl.rst:80
msgid "cpl_vsi.h"
msgstr ""

#: ../../source/api/cpl.rst:87
msgid ":ref:`cpl_cpp_api`."
msgstr ""

#: ../../source/api/cpl_cpp.rst:5
msgid "Common Portability Library C++ API"
msgstr ""

#: ../../source/api/cpl_cpp.rst:8
msgid "cpl_odbc.h"
msgstr ""

#: ../../source/api/cpl_cpp.rst ../../source/api/gdaldataset_cpp.rst
#: ../../source/api/gdaldriver_cpp.rst
#: ../../source/api/gdalextendeddatatype_cpp.rst
#: ../../source/api/gdalrasterband_cpp.rst ../../source/api/gdalwarp_cpp.rst
#: ../../source/api/ogrfeature_cpp.rst ../../source/api/ogrfeaturestyle_cpp.rst
#: ../../source/api/ogrgeometry_cpp.rst ../../source/api/ogrlayer_cpp.rst
#: ../../source/api/ogrspatialref.rst
msgid "Public Static Functions"
msgstr ""

#: ../../source/api/cpl_cpp.rst:14
msgid "cpl_vsi_virtual.h"
msgstr ""

#: ../../source/api/cpl_cpp.rst
msgid "Variables"
msgstr ""

#: ../../source/api/cpl_cpp.rst:21
msgid ":ref:`cpl_api`."
msgstr ""

#: ../../source/api/gdal_alg.rst:5
msgid "gdal_alg.h: GDAL Algorithms C API"
msgstr ""

#: ../../source/api/gdal_alg.rst:8
msgid "gdal_alg.h"
msgstr ""

#: ../../source/api/gdal_utils.rst:5
msgid "gdal_utils.h: GDAL Algorithms C API"
msgstr ""

#: ../../source/api/gdalabstractmdarray_cpp.rst:5
msgid "GDALAbstractMDArray C++ API"
msgstr ""

#: ../../source/api/gdalattribute_cpp.rst:5
msgid "GDALAttribute C++ API"
msgstr ""

#: ../../source/api/gdalattribute_cpp.rst:8
msgid "GDALAttribute class"
msgstr ""

#: ../../source/api/gdalattribute_cpp.rst:15
msgid "GDALIHasAttribute interface"
msgstr ""

#: ../../source/api/gdaldataset_cpp.rst:5
msgid "GDALDataset C++ API"
msgstr ""

#: ../../source/api/gdaldimension_cpp.rst:5
msgid "GDALDimension C++ API"
msgstr ""

#: ../../source/api/gdaldriver_cpp.rst:5
msgid "GDALDriver C++ API"
msgstr ""

#: ../../source/api/gdaldriver_cpp.rst:8
msgid "GDALDriver class"
msgstr ""

#: ../../source/api/gdaldriver_cpp.rst:15
msgid "GDALDriverManager class"
msgstr ""

#: ../../source/api/gdalextendeddatatype_cpp.rst:5
msgid "GDALExtendedDataType C++ API"
msgstr ""

#: ../../source/api/gdalextendeddatatype_cpp.rst:8
msgid "GDALExtendedDataType class"
msgstr ""

#: ../../source/api/gdalextendeddatatype_cpp.rst:15
msgid "GDALEDTComponent class"
msgstr ""

#: ../../source/api/gdalgroup_cpp.rst:5
msgid "GDALGroup C++ API"
msgstr ""

#: ../../source/api/gdalmdarray_cpp.rst:5
msgid "GDALMDArray C++ API"
msgstr ""

#: ../../source/api/gdalrasterband_cpp.rst:5
msgid "GDALRasterBand C++ API"
msgstr ""

#: ../../source/api/gdalrasterband_cpp.rst ../../source/api/gnm_cpp.rst
msgid "Protected Functions"
msgstr ""

#: ../../source/api/gdalwarp_cpp.rst:5
msgid "Warper C++ API"
msgstr ""

#: ../../source/api/gdalwarp_cpp.rst ../../source/api/ogrspatialref.rst
msgid "Private Static Functions"
msgstr ""

#: ../../source/api/gnm_cpp.rst:5
msgid "Geographic Network C++ API"
msgstr ""

#: ../../source/api/index.rst:5
msgid "API"
msgstr ""

#: ../../source/api/index.rst:10
msgid "`Full Doxygen output <../doxygen/index.html>`_"
msgstr ""

#: ../../source/api/index.rst:13
msgid "C API"
msgstr ""

#: ../../source/api/index.rst:26
msgid "C++ API"
msgstr ""

#: ../../source/api/index.rst:29
msgid "Raster API"
msgstr ""

#: ../../source/api/index.rst:40
msgid "Vector API"
msgstr ""

#: ../../source/api/index.rst:51
msgid "Spatial reference system API"
msgstr ""

#: ../../source/api/index.rst:59
msgid "Multi-dimensional array API"
msgstr ""

#: ../../source/api/index.rst:72
msgid "Miscellaneous C++ API"
msgstr ""

#: ../../source/api/index.rst:81
msgid "Python API"
msgstr ""

#: ../../source/api/index.rst:91
msgid "`Java API <../java/index.html>`_"
msgstr ""

#: ../../source/api/index.rst:95
msgid ""
"API is omitted in this PDF document. You can consult it on "
"https://gdal.org/api/index.html"
msgstr ""

#: ../../source/api/ogr_srs_api.rst:5
msgid "ogr_srs_api.h: Spatial Reference System C API"
msgstr ""

#: ../../source/api/ogrfeature_cpp.rst:5
msgid "OGRFeature C++ API"
msgstr ""

#: ../../source/api/ogrfeature_cpp.rst:8
msgid "OGRFeature class"
msgstr ""

#: ../../source/api/ogrfeature_cpp.rst:15
msgid "OGRFeatureDefn class"
msgstr ""

#: ../../source/api/ogrfeature_cpp.rst:22
msgid "OGRFieldDefn class"
msgstr ""

#: ../../source/api/ogrfeature_cpp.rst:29
msgid "OGRGeomFieldDefn class"
msgstr ""

#: ../../source/api/ogrfeaturestyle_cpp.rst:5
msgid "OGRFeature Style C++ API"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:5
msgid "OGRGeometry C++ API"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:7
msgid "Include file: ogr_geometry.h"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:10
msgid "OGRGeometryFactory class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:17
msgid "OGRGeometry class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:24
msgid "OGRPoint class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:31
msgid "OGRLineString class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:38
msgid "OGRLinearRing class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:45
msgid "OGRCircularString class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:52
msgid "OGRCurve class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:59
msgid "OGRSurface class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:66
msgid "OGRPolygon class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:73
msgid "OGRCurvePolygon class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:80
msgid "OGRMultiPoint class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:87
msgid "OGRMultiLineString class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:94
msgid "OGRMultiPolygon class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:101
msgid "OGRGeometryCollection class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:108
msgid "OGRMultiCurve class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:115
msgid "OGRMultiSurface class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:122
msgid "OGRPolyhedralSurface class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:129
msgid "OGRTriangle class"
msgstr ""

#: ../../source/api/ogrgeometry_cpp.rst:136
msgid "OGRTriangulatedSurface class"
msgstr ""

#: ../../source/api/ogrlayer_cpp.rst:5
msgid "OGRLayer C++ API"
msgstr ""

#: ../../source/api/ogrspatialref.rst:5
msgid "Spatial Reference System C++ API"
msgstr ""

#: ../../source/api/python_api_ref.rst:5
msgid "Python API reference"
msgstr ""

#: ../../source/api/python_api_ref.rst:7
msgid "See `API reference <../python/index.html>`_"
msgstr ""

#: ../../source/api/python_gotchas.rst:5
msgid "Python Gotchas in the GDAL and OGR Python Bindings"
msgstr ""

#: ../../source/api/python_gotchas.rst:7
msgid ""
"This page lists aspects of GDAL's and OGR's Python bindings that may "
"catch Python programmers by surprise. If you find something new, feel "
"free to add it to the list, but consider discussing it on the `gdal-dev "
"mailing list <https://lists.osgeo.org/mailman/listinfo/gdal-dev>`__  "
"first, to make sure you fully understand the issue and that others agree "
"that it is unexpected, \"non-Pythonic\", or something that would catch "
"many Python programmers by surprise. Be sure to reference email threads, "
"GitHub tickets, and other sources of additional information."
msgstr ""

#: ../../source/api/python_gotchas.rst:13
msgid ""
"This list is not the place to report bugs. If you believe something is a "
"bug, please `open a ticket <https://github.com/OSGeo/gdal/issues>`__ and "
"report the problem to gdal-dev. Then consider listing it here if it is "
"something related to Python specifically. Do not list it here if it "
"relates to GDAL or OGR generally, and not the Python bindings "
"specifically."
msgstr ""

#: ../../source/api/python_gotchas.rst:16
msgid ""
"Not all items listed here are bugs. Some of these are just how GDAL and "
"OGR work and cannot be fixed easily without breaking existing code. If "
"you don't like how something works and think it should be changed, feel "
"free to discuss it on gdal-dev and see what can be done."
msgstr ""

#: ../../source/api/python_gotchas.rst:21
msgid "Gotchas that are by design... or per history"
msgstr ""

#: ../../source/api/python_gotchas.rst:23
msgid ""
"These are unexpected behaviors that are not considered by the GDAL and "
"OGR teams to be bugs and are unlikely to be changed due to effort "
"required, or whose fixing might affect backward compatibility, etc."
msgstr ""

#: ../../source/api/python_gotchas.rst:27
msgid ""
"Python bindings do not raise exceptions unless you explicitly call "
"``UseExceptions()``"
msgstr ""

#: ../../source/api/python_gotchas.rst:29
msgid ""
"By default, the GDAL and OGR Python bindings do not raise exceptions when"
" errors occur. Instead they return an error value such as ``None`` and "
"write an error message to ``sys.stdout``. For example, when you try to "
"open a non-existing dataset with GDAL:"
msgstr ""

#: ../../source/api/python_gotchas.rst:41
msgid ""
"In Python, it is traditional to report errors by raising exceptions. You "
"can enable this behavior in GDAL and OGR by calling the "
"``UseExceptions()`` function:"
msgstr ""

#: ../../source/api/python_gotchas.rst:55
msgid ""
"The GDAL team acknowledges that Python programmers expect exceptions to "
"be enabled by default, but says that exceptions are disabled by default "
"to `preserve backward compatibility <https://lists.osgeo.org/pipermail"
"/gdal-dev/2010-September/026031.html>`__."
msgstr ""

#: ../../source/api/python_gotchas.rst:58
msgid ""
"Python crashes if you use an object after deleting an object it has a "
"relationship with"
msgstr ""

#: ../../source/api/python_gotchas.rst:60
msgid "Consider this example:"
msgstr ""

#: ../../source/api/python_gotchas.rst:70
msgid ""
"In this example, ``band`` has a relationship with ``dataset`` that "
"requires ``dataset`` to remain allocated in order for ``band`` to work. "
"If we delete ``dataset`` and then try to use ``band``, Python will crash:"
msgstr ""

#: ../../source/api/python_gotchas.rst:82
msgid ""
"This problem can manifest itself in subtle ways. For example, it can "
"occur if you try to instantiate a temporary dataset instance within a "
"single line of code:"
msgstr ""

#: ../../source/api/python_gotchas.rst:90
msgid ""
"In this example, the dataset instance was no longer needed after the call"
" to ``GetRasterBand()`` so Python deallocated it *before* calling "
"``Checksum()``."
msgstr ""

#: ../../source/api/python_gotchas.rst:92
msgid ""
"This problem occurs because the GDAL and OGR objects are implemented in "
"C++ and the relationships between them are maintained in C++ using "
"pointers. When you delete the dataset instance in Python it causes the "
"C++ object behind it to be deallocated. But the C++ object behind the "
"band instance does not know that this happened, so it contains a pointer "
"to the C++ dataset object that no longer exists. When the band tries to "
"access the non-existing object, the process crashes."
msgstr ""

#: ../../source/api/python_gotchas.rst:96
msgid ""
"The GDAL team knows that this design is not what Python programmers "
"expect. Unfortunately the design is difficult to correct so it is likely "
"to remain for some time. Please consult the GDAL team for more "
"information."
msgstr ""

#: ../../source/api/python_gotchas.rst:99
msgid ""
"The problem is not restricted to GDAL band and dataset objects. It "
"happens in other areas where objects have relationships with each other. "
"Unfortunately there is no complete list, so you have to watch for it "
"yourself. One other known place involves the OGR ``GetGeometryRef()`` "
"function:"
msgstr ""

#: ../../source/api/python_gotchas.rst:111
msgid ""
"If you read the GDAL and OGR API documentation carefully, you will see "
"that the functions that end in \"Ref\" obtain references to internal "
"objects, rather than making new copies. This is a clue that the problem "
"could occur. Be careful when using the \"Ref\" functions. Also watch out "
"for functions that end in \"Directly\", such as "
"``SetGeometryDirectly()``, which transfer ownership of internal objects:"
msgstr ""

#: ../../source/api/python_gotchas.rst:123
msgid ""
"The advantage of the \"Ref\" and \"Directly\" functions is they provide "
"faster performance because a duplicate object does not need to be "
"created. The disadvantage is that you have to watch out for this problem."
msgstr ""

#: ../../source/api/python_gotchas.rst:130
msgid ""
"Python crashes if you add a new field to an OGR layer when features "
"deriving from this layer definition are still active"
msgstr ""

#: ../../source/api/python_gotchas.rst:132
msgid "For example:"
msgstr ""

#: ../../source/api/python_gotchas.rst:142
msgid ""
"For more information, please see `#3552 "
"<https://trac.osgeo.org/gdal/ticket/3552>`__."
msgstr ""

#: ../../source/api/python_gotchas.rst:145
msgid ""
"Layers with attribute filters (``SetAttributeFilter()``) will only return"
" filtered features when using ``GetNextFeature()``"
msgstr ""

#: ../../source/api/python_gotchas.rst:147
msgid ""
"If you read the documentation for ``SetAttributeFilter()`` carefully you "
"will see the caveat about ``OGR_L_GetNextFeature()``. This means that if "
"you use ``GetFeature()``, instead of ``GetNextFeature()``, then you can "
"still access and work with features from the layer that are not covered "
"by the filter. ``GetFeatureCount()`` will respect the filter and show the"
" correct number of features filtered. However, working with "
"``GetFeatureCount()`` in a loop can lead to some subtle confusion. "
"Iterating over the Layer object or using ``GetNextFeature()`` should be "
"the default method for accessing features:"
msgstr ""

#: ../../source/api/python_gotchas.rst:162
msgid ""
"Certain objects contain a ``Destroy()`` method, but you should never use "
"it"
msgstr ""

#: ../../source/api/python_gotchas.rst:164
msgid ""
"You may come across examples that call the ``Destroy()`` method. `This "
"tutorial "
"<https://www.gis.usu.edu/~chrisg/python/2009/lectures/ospy_slides2.pdf>`__"
" even gives specific advice on page 12 about when to call ``Destroy``. "
"But according to `email from Even Rouault "
"<https://lists.osgeo.org/pipermail/gdal-"
"dev/2010-September/026027.html>`__, ``Destroy()`` never need to be "
"called:"
msgstr ""

#: ../../source/api/python_gotchas.rst:198
msgid "Saving and closing datasets/datasources"
msgstr ""

#: ../../source/api/python_gotchas.rst:200
msgid ""
"To save and close GDAL raster datasets or OGR vector datasources, the "
"object needs to be dereferenced, such as setting it to ``None``, a "
"different value, or deleting the object. If there are more than one "
"copies of the dataset or datasource object, then each copy needs to be "
"dereferenced."
msgstr ""

#: ../../source/api/python_gotchas.rst:203
msgid "For example, creating and saving a raster dataset:"
msgstr ""

#: ../../source/api/python_gotchas.rst:217
msgid ""
"The last dereference to the raster dataset writes the data modifications "
"and closes the raster file. ``WriteArray(arr)`` does not write the array "
"to disk, unless the GDAL block cache is full (typically 40 MB)."
msgstr ""

#: ../../source/api/python_gotchas.rst:219
msgid ""
"With some drivers, raster datasets can be intermittently saved without "
"closing using ``FlushCache()``. Similarly, vector datasets can be saved "
"using ``SyncToDisk()``. However, neither of these methods guarantee that "
"the data are written to disk, so the preferred method is to deallocate as"
" shown above."
msgstr ""

#: ../../source/api/python_gotchas.rst:223
msgid "Exceptions raised in custom error handlers do not get caught"
msgstr ""

#: ../../source/api/python_gotchas.rst:225
msgid ""
"The python bindings allow you to specify a python callable as an error "
"handler (`#4993 <https://trac.osgeo.org/gdal/ticket/4993>`__). However, "
"these error handlers appear to be called in a separate thread and any "
"exceptions raised do not propagate back to the main thread (`#5186 "
"<https://trac.osgeo.org/gdal/ticket/5186>`__)."
msgstr ""

#: ../../source/api/python_gotchas.rst:228
msgid ""
"So if you want to  `catch warnings as well as errors "
"<https://gis.stackexchange.com/questions/43404/how-to-detect-a-gdal-ogr-"
"warning/68042>`__, something like this won't work:"
msgstr ""

#: ../../source/api/python_gotchas.rst:245
msgid "But you can do something like this instead:"
msgstr ""

#: ../../source/api/python_gotchas.rst:285
msgid "Gotchas that result from bugs or behaviors of other software"
msgstr ""

#: ../../source/api/python_gotchas.rst:288
msgid "Python crashes in GDAL functions when you upgrade or downgrade numpy"
msgstr ""

#: ../../source/api/python_gotchas.rst:290
msgid ""
"Much of GDAL's Python bindings are implemented in C++. Much of the core "
"of numpy is implemented in C. The C++ part of GDAL's Python bindings "
"interacts with the C part of numpy through numpy's ABI (application "
"binary interface). This requires GDAL's Python bindings to be compiled "
"using numpy header files that define numpy C data structures. Those data "
"structures sometimes change between numpy versions. When this happens, "
"the new version of numpy is not be compatible at the binary level with "
"the old version, and the GDAL Python bindings must be recompiled before "
"they will work with the new version of numpy. And when they are "
"recompiled, they probably won't work with the old version."
msgstr ""

#: ../../source/api/python_gotchas.rst:294
msgid ""
"If you obtained a precompiled version of GDAL's Python bindings, such as "
"the Windows packages from `http://gisinternals.com/sdk.php "
"<http://gisinternals.com/sdk.php>`__ be sure you look up what version of "
"numpy was used to compile them, and install that version of numpy on your"
" machine."
msgstr ""

#: ../../source/api/python_gotchas.rst:297
msgid ""
"Python bindings cannot be used successfully from ArcGIS in-process "
"geoprocessing tools (ArcGIS 9.3 and later)"
msgstr ""

#: ../../source/api/python_gotchas.rst:299
msgid ""
"ArcGIS allows the creation of custom, Python-based geoprocessing tools. "
"Until ArcGIS 10, there was no easy way to read raster data into memory. "
"GDAL provides such a mechanism."
msgstr ""

#: ../../source/api/python_gotchas.rst:301
msgid ""
"Starting with ArcGIS 9.3, geoprocessing tools can either run in the "
"ArcGIS process itself (ArcCatalog.exe or ArcMap.exe) or run in a separate"
" python.exe worker process. Unfortunately ArcGIS contains a bug in how it"
" runs in-process tools. Thus, if you use GDAL from an in-process tool, it"
" will run fine the first time but after that it may fail with "
"``TypeError`` exceptions until you restart the ArcGIS process. For "
"example, band.ReadAsArray() fails with:"
msgstr ""

#: ../../source/api/python_gotchas.rst:303
msgid ""
"``TypeError: in method 'BandRasterIONumpy', argument 1 of type "
"'GDALRasterBandShadow *``'"
msgstr ""

#: ../../source/api/python_gotchas.rst:305
msgid ""
"This is a bug in ArcGIS. Please see `#3672 "
"<https://trac.osgeo.org/gdal/ticket/3672>`__ for complete details and "
"advice on workarounds."
msgstr ""

#: ../../source/api/raster_c_api.rst:5
msgid "gdal.h: Raster C API"
msgstr ""

#: ../../source/api/vector_c_api.rst:5
msgid "ogr_core.h and ogr_api.h: Vector C API"
msgstr ""

